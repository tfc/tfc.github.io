<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Jacek's Blog</title>
    <link href="https://blog.galowicz.de/atom.xml" rel="self" />
    <link href="https://blog.galowicz.de" />
    <id>https://blog.galowicz.de/atom.xml</id>
    <author>
        <name>Jacek Galowicz</name>
        <email>jacek@galowicz.de</email>
    </author>
    <updated>2022-12-28T00:00:00Z</updated>
    <entry>
    <title>Book Review: Algorithms to Live By - The Computer Science of Human Decisions</title>
    <link href="https://blog.galowicz.de/2022/12/28/book-review-algorithms-to-live-by" />
    <id>https://blog.galowicz.de/2022/12/28/book-review-algorithms-to-live-by</id>
    <published>2022-12-28T00:00:00Z</published>
    <updated>2022-12-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!-- cSpell:words Griffiths Gittins Belew Hosken diseconomy Overfitting -->
<!-- cSpell:words incent overfit AIMD protokollon diseconomies -->
<!-- cSpell:words crêpe crêpes Tolins Backoff Primality Karlton Beladys -->
<!-- cSpell:words counterincentive Cinco -->
<!-- cSpell:ignore huhs hmms -->
<p>What does the math tell us about how many job applicants we should look at
before hiring one?
While onboarding our new employees, how can ideas from the
<a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol">TCP networking protocol</a>
help us to identify the optimal workload for them?
Why would giving employees unlimited vacation days most likely lead to less
vacation being taken?
<a href="https://amzn.to/3HAmDaM">Algorithms to live By - The Computer Science of Human Decisions</a>
gives some fascinating insights into such questions.</p>
<!--more-->
<div class="book-cover">
<figure>
<img src="/images/books/algorithms-to-live-by.jpg" alt="Book Cover of “Algorithms to Live By - The Computer Science of Human Decisions”" />
<figcaption aria-hidden="true">Book Cover of “Algorithms to Live By - The Computer Science of Human Decisions”</figcaption>
</figure>
</div>
<h2 id="book-authors">Book &amp; Authors</h2>
<p><a href="https://amzn.to/3HAmDaM">Link to the Amazon Store Page</a></p>
<p>The first edition of this book is from 2016 and the store page on Amazon says
that since 2017 it’s already the 12th edition.
It is ~370 pages in total but the actual content without notes etc. is just
about 260 pages.</p>
<p><a href="https://en.wikipedia.org/wiki/Brian_Christian">Brian Christian</a> is a
non-fiction author, speaker, poet, programmer (e.g. Ruby on Rails contributor),
and researcher.
This book and his other books, <a href="https://amzn.to/3G4nkbn">The Most Human Human</a>
and <a href="https://amzn.to/3vbQqPP">The Alignment Problem</a> won several awards.</p>
<p><a href="https://en.wikipedia.org/wiki/Tom_Griffiths_(cognitive_scientist)">Tom Griffiths</a>
is a professor of computer science and psychology and the director of the
<a href="https://cocosci.princeton.edu/">Computational Cognitive Science Lab</a>
at Princeton University.</p>
<h2 id="content-and-structure">Content and Structure</h2>
<p>The authors selected 11 topics from mathematics and computer science.
In each chapter, they describe practical and relevant challenges from real life
that can be solved with formulas and algorithms.
If you ever asked yourself “What’s the point? I will never use this in real
life!” at school or university, these are for you!</p>
<p>The authors spend some time explaining probabilities, trade-offs,
complexities, etc. with scientific methods, but they don’t go too deep.
This makes the content comprehensible for nearly everyone, especially interested
readers who never studied anything mathematical/technical.
I might not be the best person to judge that because I did study at university,
but I am certain that as long as seeing variable names or diagrams does not
straightly trigger fear, you should be able to understand it and experience fun
reading the stories.</p>
<p>Let’s get to the different chapters and their content.
This review is much longer than <a href="/tags/book.html">the others in my blog</a>:
The different chapters provide valuable insights, but on mostly disconnected
topics.
I did not want to drop any.</p>
<h3 id="optimal-stopping---when-to-stop-looking">1. Optimal Stopping - When to Stop Looking</h3>
<p>This chapter is about the <em>stopping problem</em>, which is a classic decision-making
problem that involves choosing the optimal time to stop a process or activity.
When you want to find the best specimen out of an unknown set (in the sense that
you don’t know what’s the lower and upper bounds of “good” are),
the <strong>Look-Then-Leap rule</strong> states that you should set an amount of time you
want to spend looking.
This amount of time should then be split into a looking phase and a leaping
phase.
In the looking phase, you categorically don’t choose anyone.
After that point, you enter the leaping phase and commit to the next candidate
who outshines the best applicants from the looking phase.
The looking phase shall occupy 37% of the time or the number of candidates
you can afford to look at.
This leads to a 37% chance of selecting the best (That it’s both 37% is a
coincidence that results from the maths).
37% does not appear great, but is better or worse than the gut feeling?</p>
<div class="floating-image-right">
<figure>
<img src="/images/books/algorithms-to-live-by-the-office.webp" width="300" alt="Finding the best applicant is hard" />
<figcaption aria-hidden="true">Finding the best applicant is hard</figcaption>
</figure>
</div>
<p>This strategy can be used in a variety of interesting situations:</p>
<ul>
<li>The Secretary Problem: Choosing the best candidate from a pool of applicants</li>
<li>Selling a house: Determining the best offer</li>
<li>Finding a partner: Deciding when to commit to a relationship after a series of
different dates</li>
<li>Selecting a parking lot: Choosing the best parking space available while
trading off between how far it is from your flat and how often you will have
to do another round around the block</li>
<li>Quitting an activity: Deciding when to stop doing something</li>
</ul>
<h3 id="exploreexploit---the-latest-vs.-the-greatest">2. Explore/Exploit - The Latest vs. the Greatest</h3>
<p>This chapter starts with the very concrete question of when you should stick to
the restaurants you know to be good, and when to try out new ones.
It turns out that this is the same problem that casino visitors face in a saloon
full of one-armed bandits:
Should they try the same bandit again, or should they switch to another one?
It’s also the same problem that marketing specialists face when they do
<a href="https://en.wikipedia.org/wiki/A/B_testing">A/B testing</a>
of different wordings or styles of advertisements (the book mentions that Google
tested 41 shades of blue for a toolbar in 2009).</p>
<div class="floating-image-right">
<figure>
<img src="/images/books/algorithms-to-live-by-casino.webp" width="300" alt="Choosing the best option is crucial" />
<figcaption aria-hidden="true">Choosing the best option is crucial</figcaption>
</figure>
</div>
<p>The <a href="https://en.wikipedia.org/wiki/Gittins_index">Gittins Index</a>
models a strategy for deciding when to switch from one
solution to another, based on the <em>history</em> of success rates.
The way it works is that each alternative gets a score.
For every decision, the alternative with the highest score is selected.
Based on success or failure, the score is updated following a specific scheme.
This strategy results in the following behavior:</p>
<ul>
<li><em>Untested options</em> are tried if the tested ones go below a success rate of 70%</li>
<li>The strategy is more merciful on failing alternatives in the beginning
than on long-known alternatives</li>
</ul>
<p>Switching or not switching between alternatives raises questions about other
use cases:
In clinical studies, the set of voluntary patients (or not so voluntary if the
only cure is still experimental) is split into a group that
gets the new experimental medicine, and another group that gets placebos.
When the study is only half over but the new treatment already proved very
effective, how ethical is it to stick to giving the placebo group placebos
instead of switching over all patients to the seemingly effective treatment?
Switching might however jeopardize the needed statistical backing that is needed
to approve the effectiveness of new treatments.</p>
<p>While the Gittins Index looks at the past, the chapter also introduces
the reader to other strategies as the <strong>regret minimization strategy</strong> based on
so-called
<a href="https://en.wikipedia.org/wiki/Thompson_sampling#Upper-Confidence-Bound_%28UCB%29_algorithms">Upper Confidence Bound algorithms</a>,
which take assumptions on the future into account.
These give the benefit of the doubt a mathematical backing:</p>
<blockquote>
<p>Following the advice of these algorithms, you should be excited to meet new
people and try new things — to assume the best about them, in the absence of
evidence to the contrary.
In the long run, optimism is the best prevention for regret.</p>
</blockquote>
<p>When looking at the future, it also becomes relevant how much time is left:</p>
<blockquote>
<p>Explore when you will have time to use the resulting knowledge and exploit
when you’re ready to cash in.
The interval makes the strategy.</p>
</blockquote>
<h3 id="sorting---making-order">3. Sorting - Making Order</h3>
<p>This chapter handles sorting theory and discusses the cost of sorting.
Sorting costs <em>time</em> (and comparisons - sometimes these are not free), which is
something that computer science students learn to quantify with complexity
theory up and down, typically by analyzing different sorting algorithms and
estimating their costs as a function of the input size.</p>
<div class="floating-image-right">
<figure>
<img src="/images/books/algorithms-to-live-by-sorting-mail.gif" width="300" alt="Depending on the input size, sorting can become an unwieldy task" />
<figcaption aria-hidden="true">Depending on the input size, sorting can become an unwieldy task</figcaption>
</figure>
</div>
<p>Ever thought about how long it would take to sort a deck of 5 cards? Or 10?
Or 20? The cost of sorting them goes up much steeper than the deck of cards
grows.
The book demonstrates the science behind scale nicely to non-computer-scientists
using more examples that show how much scale hurts when sorting inputs that are
just too big.
Social hierarchies and pecking orders have been established with physical
fighting as sorting methods, which puts the “cost” of comparison/sorting in a
completely different perspective.
Civilization has brought softer and more efficient ways to sort with
sports and markets, which resemble crowd algorithms, so to say.</p>
<p>The example of sports is explained more in-depth:
Championships and leagues are a way to sort teams by performance.
For sports where one person or team competes version one other at a time,
complex tournament strategies like
<a href="https://en.wikipedia.org/wiki/Single-elimination_tournament">Single Elimination</a>,
<a href="https://en.wikipedia.org/wiki/Round-robin_tournament">Round Robin</a>,
<a href="https://en.wikipedia.org/wiki/Ladder_tournament">Ladder</a>, and
<a href="https://en.wikipedia.org/wiki/Bracket_(tournament)">Bracket Tournament</a>
strategies are used.
Races with many competitors are simpler, but even these have qualifying events,
which sort them before the race which is supposed to sort them in the first
place.
Each of these strategies resembles different sort algorithms for different
problem sizes, long before sorting algorithms have been formalized.</p>
<p>Even <em>search</em> machines offer some kind of sorting, although this is surprising
at first:
You enter some search words into Google, and Google presents you not one but
many websites - sorted by relevance.</p>
<h3 id="caching---forget-about-it">4. Caching - Forget About It</h3>
<p>This chapter motivates the concept of “caching” by explaining
<a href="https://en.wikipedia.org/wiki/Memory_hierarchy">memory hierarchies</a>:
Computers have smaller portions of very fast but expensive memory and bigger
portions of memory that is cheap but slow.
Users like their computers fast, so engineers have to deal with the challenge
to provide the right data at the right time from limited faster memory.</p>
<div class="floating-image-right">
<figure>
<img src="/images/books/algorithms-to-live-by-fortune-teller.webp" alt="A cache tries to predict what portions of memory will be asked for to reduce wait times" />
<figcaption aria-hidden="true">A cache tries to predict what portions of memory will be asked for to reduce wait times</figcaption>
</figure>
</div>
<p>Phil Karlton, at that time an engineer at Carnegie Mellon, half-jokingly
originated
<a href="https://www.karlton.org/2017/12/naming-things-hard/">this quote around 1970</a>:</p>
<blockquote>
<p>There are only two hard things in Computer Science:
Cache invalidation and naming things.</p>
</blockquote>
<p>The chapter before was all about sorting data to make specific items
easier to find.
This chapter brings some (half-joking) news for the lazy.
With all the knowledge about caching, it turns out, that <em>not</em> sorting data
can shorten access times a lot:</p>
<blockquote>
<p>Tom’s otherwise extremely tolerant wife objects to a pile of clothes next to
the bed, despite his insistence that it’s in fact a highly efficient caching
scheme.
Fortunately, our conversations with computer scientists revealed a solution to
this problem too.
Rik Belew of UC San Diego, who studies search engines from a cognitive
perspective, recommended the use of a valet stand.</p>
</blockquote>
<p>The mentioned “pile of clothes” in some sense resembles the
<a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU">Least Recently Used</a>
caching scheme:</p>
<blockquote>
<p>LRU teaches us that the next thing we can expect to need is the last one we
needed, while the thing we’ll need after that is probably the
second-most-recent one.
And the last thing we can expect to need is the one we’ve already gone
the longest without.</p>
</blockquote>
<p>The chapter makes interesting detours between principles known from computer
science like
<a href="https://en.wikipedia.org/wiki/B%C3%A9l%C3%A1dy%27s_anomaly">Beladys Anomaly</a>,
<a href="https://en.wikipedia.org/wiki/FIFO_(computing_and_electronics)">First-In-First-Out (FIFO)</a>,
and
<a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#Random_replacement_(RR)">Random Replacement</a>,
and shows how similar these principles are to processes that happen
in our brains, like the
<a href="https://en.wikipedia.org/wiki/Forgetting_curve">Human Forgetting Curve</a>, which
is a known phenomenon from neurosciences and psychology.</p>
<p>The science of caching can not only be applied to computers, but also the
physical layout of library rooms, the ordering of clothes in the bedroom,
management of post-its, and shelves, and why/when/how people remember or forget
things:</p>
<blockquote>
<p>Caching gives us the language to understand what’s happening.
We say “brain fart” when we should really say “cache miss”.</p>
</blockquote>
<h3 id="scheduling---first-things-first">5. Scheduling - First Things First</h3>
<p>Beginning with the question of how to schedule tasks in everyday life, the
book delves briefly into how computers schedule technical tasks, and what to
learn from them:</p>
<blockquote>
<p>The first lesson in single-machine scheduling is literally before we even
begin: make your goals explicit.</p>
</blockquote>
<p>As things are generally a bit more arranged in computer memory than in
real life, it is easier to summarize observations and extract guidelines:</p>
<blockquote>
<p>Minimizing the sum of completion times leads to a very simple optimal
algorithm called Shortest Processing Time:
Always do the quickest task you can.</p>
</blockquote>
<div class="floating-image-right">
<figure>
<img src="/images/books/algorithms-to-live-by-scheduling.webp" alt="Planning is hard (source)" />
<figcaption aria-hidden="true">Planning is hard <a href="https://giphy.com/gifs/funny-how-task-iCFlLMvzDHIk0">(source)</a></figcaption>
</figure>
</div>
<p>After a few motivating examples that relate to real-life tasks, the amount of
theory is ramped up a bit, for example when explaining
<a href="https://en.wikipedia.org/wiki/Single-machine_scheduling">Earliest Due Date (also called Moore’s Algorithm)</a>
vs
<a href="https://en.wikipedia.org/wiki/Shortest_job_next">Shortest Processing Time</a> and
discussing such strategies with real-life problems (e.g. something bad happens
when a deadline is crossed).</p>
<p>This example cracked me up:</p>
<blockquote>
<p>There’s an episode of The X-Files where the protagonist Mulder, bedridden and
about to be consumed by an obsessive-compulsive vampire, spills a bag of
sunflower seeds on the floor in self-defense.
The vampire, powerless against his compulsion, stoops to pick them up one by
one, and ultimately the sun rises before he can make a meal of Mulder.
Computer scientists would call this a “ping attack” or a “denial of service”
attack:
Give a system an overwhelming number of trivial things to do, and the
important things get lost in the chaos.</p>
</blockquote>
<p>The chapter also goes a meta-level up:
A perfect schedule or time plan must reflect two things:</p>
<blockquote>
<p>[…], preemption isn’t free.
Every time you switch tasks, you pay a price, known in computer science as a
context switch.</p>
</blockquote>
<p>The little pause between two tasks should be reflected, otherwise, we drown in
task switching:</p>
<blockquote>
<p>Anyone you interrupt more than a few times an hour is in danger of doing no
work at all.</p>
</blockquote>
<p>…for which computer science also has a name:
<a href="https://en.wikipedia.org/wiki/Thrashing_(computer_science)">Thrashing Phenomenon</a></p>
<p>But that is not all, the time in which we are rethinking to create the plan
must also be part of the plan, which is where it gets complicated.
In many cases, no perfect plan exists because whenever a human or a machine
waits for external events to happen, they have to deal with uncertainty and
in between do what’s possible, which in turn brings new problems:</p>
<blockquote>
<p>What makes real-time scheduling so complex and interesting is that it is
fundamentally a negotiation between two principles that aren’t fully
compatible.
These two principles are called responsiveness and throughput:
How quickly you can respond to things, and how much you can get done overall.</p>
</blockquote>
<p>Most computer scientists already know this example from real-time scheduling
lectures at university, but I think that this is one of the most interesting
examples in this chapter:</p>
<blockquote>
<p>For the first time ever, a rover was navigating the surface of Mars. The $150
million Mars Pathfinder spacecraft had accelerated to a speed of 16,000 miles
per hour, traveled across 309 million miles of empty space and landed with
space-grade airbags onto the rocky red Martian surface.
And now it was procrastinating.</p>
</blockquote>
<p>By <em>procrastinating</em> the author means that the $150 million Pathfinder was not
responding to commands from the earth due to a scheduling problem called
<a href="https://en.wikipedia.org/wiki/Priority_inversion">Priority Inversion</a>.
A good solution for priority inversion is
<a href="https://en.wikipedia.org/wiki/Priority_inheritance">Priority Inheritance</a>:
If you realize that employees come late to very important meetings all the time,
do some research to find the reason and find out that the coffee machine is so
slow that employees end up in endless queues:
Increase the importance of high-quality coffee machine maintenance to the same
level like the most important meetings.</p>
<p>The main message is:</p>
<blockquote>
<p>As business writer and coder Jason Fried says, “Feel like you can’t proceed
until you have a bulletproof plan in place? Replace ‘plan’ with ‘guess’ and
take it easy.” Scheduling theory bears this out.</p>
</blockquote>
<h3 id="bayess-rule---predicting-the-future">6. Bayes’s Rule - Predicting the Future</h3>
<p>This chapter begins with a problem that, if it was solved, would make scheduling
much easier: Predicting the future.
Statistics and stochastic theory are typically used to model the certainty of
the timing and quantity of events or things.
The whole chapter starts with historic developments on this matter and tries to
make it entertaining a bit, but statistics are still notoriously hard to make
look interesting.</p>
<p>The biggest part of the chapter educates (in easy-to-understand ways) about
<a href="https://en.wikipedia.org/wiki/Bayes%27_theorem">Bayes’ Rule</a>,
<a href="https://en.wikipedia.org/wiki/Rule_of_succession">Laplace’s Law</a>,
the <a href="https://en.wikipedia.org/wiki/Copernican_principle">Copernican Principle</a>,
<a href="https://en.wikipedia.org/wiki/Normal_distribution">normal distribution</a>
vs.
<a href="https://en.wikipedia.org/wiki/Power_law">power-law distribution</a>, and many
others, which is relatively boring.
After we read through that part (or skipped it), we reach my favorite example:</p>
<div class="floating-image-right">
<figure>
<img src="/images/books/algorithms-to-live-by-marshmallow.webp" alt="Marshmallow Torture" />
<figcaption aria-hidden="true">Marshmallow Torture</figcaption>
</figure>
</div>
<p>The
<a href="https://www.simplypsychology.org/marshmallow-test.html">Marshmallow experiment</a>
is widely known:</p>
<blockquote>
<p>Each child would be shown a delicious treat, such as a marshmallow, and told
that the adult running the experiment was about to leave the room for a while.
If they wanted to, they could eat the treat right away.
But if they waited until the experimenter came back, they would get two
treats.
Unable to resist, some of the children ate the treat immediately.
And some of them stuck it out for the full fifteen minutes or so until the
experimenter returned, and got two treats as promised.</p>
</blockquote>
<p>Everyone who knows about this experiment also knows that long-time observation
of these kids suggested that the ones who are patient enough to wait to get
both marshmallows are also generally more successful in their later life (which
has to be questioned because the study has been repeated to find out that the
statistical significance is too weak).
The chapter however continues with an interesting twist, which is by far not as
widely known:</p>
<blockquote>
<p>[…] the most interesting group comprised the ones in between — the ones
who managed to wait a little while, but then surrendered and ate the treat.</p>
</blockquote>
<p>The researchers tried to find out why kids would behave so irrationally - is it
a sheer lack of discipline?
They found out that it is more about trust in authorities than discipline:</p>
<blockquote>
<p>[…], the kids in the experiment embarked on an art project.
The experimenter gave them some mediocre supplies and promised to be back
with better options soon.
But, unbeknownst to them, the children were divided into two groups.
In one group, the experimenter was reliable and came back with the better art
supplies as promised.
In the other, she was unreliable, coming back with nothing but apologies.</p>
</blockquote>
<p>When the marshmallow experiment was repeated with children who first went
through this experiment, the results showed that the children which were
disappointed by the experimenter would more likely give up in the middle of the
marshmallow experiment.
I thought about this a little longer - This is an interesting data point for
potential disadvantages that many (poor/less successful) people might suffer
from:
Some may have grown up in environments where they have been disappointed by
their parents/authorities too often and ended up trusting less in such
investments.</p>
<h3 id="overfitting---when-to-think-less">7. Overfitting - When to Think Less</h3>
<p>This chapter was very interesting and captivating read:
The phenomenon of <a href="https://en.wikipedia.org/wiki/Overfitting">overfitting</a>
is a known problem in the domain of artificial intelligence/machine learning.
Most explanations are extremely abstract and hard to grasp for outsiders.
But actually, overfitting is very easy to understand when explained through
real-life situations:</p>
<blockquote>
<p>In the military and in law enforcement, for example, repetitive, rote training
is considered a key means for instilling line-of-fire skills.
The goal is to drill certain motions and tactics to the point that they become
totally automatic.
But when overfitting creeps in, it can prove disastrous.
There are stories of police officers who find themselves, for instance, taking
time out during a gunfight to put their spent casings in their pockets — good
etiquette on a firing range.</p>
</blockquote>
<div class="floating-image-right">
<figure>
<img src="/images/books/algorithms-to-live-by-training.gif" alt="You become what you train" />
<figcaption aria-hidden="true">You become what you train</figcaption>
</figure>
</div>
<p>The effect of this case of overfitting was an unnecessary increase in dead
officers:</p>
<blockquote>
<p>On several occasions, dead cops were found with brass in their hands, dying in
the middle of an administrative procedure that had been drilled into them.</p>
</blockquote>
<p>Another example from the same domain goes like this:</p>
<blockquote>
<p>[…] the FBI was forced to change its training after agents were found
reflexively firing two shots and then holstering their weapon—a standard
cadence in training — regardless of whether their shots had hit the target
and whether there was still a threat.
Mistakes like these are known in law enforcement and the military as
“training scars,” and they reflect the fact that it’s possible to overfit
one’s own preparation.</p>
</blockquote>
<p>Overfitting and the difficulty to set incentives in a way that they don’t end
up being counter-effective have a lot of overlap:</p>
<blockquote>
<p>[…] focusing on production metrics led supervisors to neglect maintenance
and repairs, setting up future catastrophe.
Such problems can’t simply be dismissed as a failure to achieve management
goals.
Rather, they are the opposite:
The ruthless and clever optimization of the wrong thing.</p>
</blockquote>
<p>The presented examples were my highlights, but the chapter has some more good
ones.
Out of all the theory and real-life examples, the authors extract one piece of
good advice against overthinking:</p>
<blockquote>
<p>The greater the uncertainty, the bigger the gap between what you can measure
and what matters, the more you should watch out for overfitting — that is, the
more you should prefer simplicity, and the earlier you should stop.</p>
</blockquote>
<h3 id="relaxation---let-it-slide">8. Relaxation - Let It Slide</h3>
<p>At university in group assignments, but also later at work while discussing with
colleagues, I often experienced that
<a href="https://en.wikipedia.org/wiki/Perfect_is_the_enemy_of_good">perfect is the enemy of the good</a>:
The group of students or colleagues would rather discuss forever while
ditching one 80-90% idea after the other, instead of simply deciding for one and
live with a “good” result.
(After having the last chapter also discussing the difficulty of setting good
incentives: Often company culture makes employees want to avoid making mistakes
to not damage their career, so it seems better to discuss perfect solutions
forever.)</p>
<div class="floating-image-right">
<figure>
<img src="/images/books/algorithms-to-live-by-relax.webp" alt="Relaxation helps solve hard problems" />
<figcaption aria-hidden="true">Relaxation helps solve hard problems</figcaption>
</figure>
</div>
<p>This is irrational, but what’s the rational way if a problem looks too hard to
solve?
In computer science, problems are considered “too hard” when the runtime and/or
memory complexity of finding the solution has exponential growth (instead of
polynomial, which is considered “easy”).
The chapter contains strategies and algorithms that do
<a href="https://en.wikipedia.org/wiki/Relaxation_(approximation)">Constraint Relaxation</a>:</p>
<blockquote>
<p>But [computer scientists] don’t relax themselves; they relax the problem.</p>
</blockquote>
<p>The first example that can be solved faster with this strategy is the
<a href="https://en.wikipedia.org/wiki/Travelling_salesman_problem">Traveling Salesman Problem</a>:
If you want to visit many places, what is the right order to visit them that at
the same time gives you the shortest overall travel distance?
To really find out, one would have to sum up the travel distances of
<em>all</em> possible paths and then take the shortest one out of the huge list.
Constraint relaxing algorithms make shortcuts and are hence faster, but don’t
guarantee you the correct result - instead, you get a “good” answer
that’s most probably better than following your gut feeling or just trying
randomly.
The message is clear:</p>
<blockquote>
<p>If we’re willing to accept solutions that
are close enough, then even some of the hairiest problems around can be tamed
with the right techniques.</p>
</blockquote>
<p>This chapter is really short and less technical than the following ones which
will pick up on relaxation again,
but it leaves another very interesting life-philosophic inspiration:</p>
<blockquote>
<p>One day as a child, Brian was complaining to his mother about all the things
he had to do: his homework, his chores…
“Technically, you don’t have to do anything,” his mother replied.
“You don’t have to do what your teachers tell you.
You don’t have to do what I tell you.
You don’t even have to obey the law.
There are consequences to everything, and you get to decide whether you want
to face those consequences.”
Brian’s kid-mind was blown.
It was a powerful message, an awakening of a sense of agency, responsibility,
moral judgment.</p>
</blockquote>
<p>It was probably not clear to both at that moment, but she taught him
<a href="https://en.wikipedia.org/wiki/Lagrangian_relaxation">Lagrangian Relaxation</a>:
Take rules (constraints) and transform them into costs which means taking the
<em>impossible</em> and downgrading it to <em>costly</em>.
Sometimes the consequences of breaking some rules are less bad than not solving
some bigger problem.</p>
<h3 id="randomness---when-to-leave-it-to-chance">9. Randomness - When to Leave It to Chance</h3>
<p>We usually only leave important things to chance (if at all) when we exhausted
all other strategies, and they did not work out.
This chapter illuminates some use cases where introducing randomness into
algorithms makes them perform better than deterministic algorithms would.
Again, let us skip over the rich details and background stories that are shared
about the
<a href="https://en.wikipedia.org/wiki/Monte_Carlo_method">Monte Carlo Method</a>,
<a href="https://en.wikipedia.org/wiki/Bloom_filter">Bloom Filters</a>,
<a href="https://en.wikipedia.org/wiki/Hill_climbing">Hill Climbing</a>,
<a href="https://en.wikipedia.org/wiki/Metropolis%E2%80%93Hastings_algorithm">Metropolis Algorithm</a>,
and
<a href="https://en.wikipedia.org/wiki/Simulated_annealing">Simulated Annealing</a>.
Instead, let’s have a look at the
<a href="https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test">Miller-Rabin Primality Test</a>
and its significance to the majority of private communication on this planet:</p>
<div class="floating-image-right">
<figure>
<img src="/images/books/algorithms-to-live-by-simulated-annealing.gif" alt="Animated solution of the Traveling Salesman Problem with Simulated Annealing source" />
<figcaption aria-hidden="true">Animated solution of the Traveling Salesman Problem with Simulated Annealing <a href="https://en.wikipedia.org/wiki/Simulated_annealing">source</a></figcaption>
</figure>
</div>
<p>When encrypting messages before sending and decrypting after receiving them,
we typically rely on
<a href="https://en.wikipedia.org/wiki/Public-key_cryptography">asymmetric cryptography</a>.
For the user, this means that encryption and decryption are done with <em>different
keys</em>.
Having different keys has the advantage that the key for encryption can be
publicly shared, enabling anyone to send us an encrypted message that only we
can read.
The decryption key is stored and protected in private.
Without going too deep into detail, such algorithms rely on the fact that there
are no “fast” (following the notion of fast from the earlier chapters)
mathematical algorithms that can reverse multiplication or exponentiation of
very large numbers if not all variables are known (i.e. the key that is part of
the calculation).
A simple example with small numbers is the question “What are the two prime
factors of the number <code>15</code>?”.
The answer is: <code>3 * 5</code> equals <code>15</code> as both <code>3</code> and <code>5</code> are prime and there
is no other combination of prime numbers for which this works, so this
is the correct answer.
For small numbers, this is very easy, but for huge numbers, computers would need
centuries - so the designers of algorithms like
<a href="https://en.wikipedia.org/wiki/Pretty_Good_Privacy">PGP</a> decided to rely on the
security of messages on this fact:
The user’s private key for decryption consists of two huge prime numbers and
must be kept secret.
The public key that the user can freely send around consists of … the
<em>product</em> of these numbers. (So if the combination of <code>3</code> and <code>5</code> would be the
user’s private key, the product <code>15</code> would be the public one!)
This means that everyone actually <em>has</em> access to the secret private key.
It is nonetheless safe from being misused because no one can extract the
two individual prime numbers from it.
This might sound like a wonky foundation for security for everyone who thought
that messages are only secure if third parties cannot decrypt
them, but such a perfect algorithm does not exist:
The best we can get is that it’s only <em>too hard</em> to decrypt a message within the
same century.</p>
<p>It does not stop there:
Let’s see how the user selects the prime numbers.
When running a mail program or secure messenger for the first time, the laptop
or cell phone would automatically generate a key for the user
(Often hidden from the user’s sight to improve the user experience).
To get two huge prime numbers, the program rolls the dice to get
two huge numbers and then tests if they are prime.
If they are not, it rolls the dice again and again, until it has two huge prime
numbers.
Testing if a number is a prime number is typically done with the
<a href="https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test">Miller-Rabin Primality Test</a>.
This test consists of a formula that is cheap to compute.
Its result tells if the number is a <em>strong probable prime</em> or not - it can’t
say if it <em>is</em> a prime, but only if it is likely one.
To get to <code>99.999999...%</code> (and many more nines) probability of being
correct, the algorithm is repeated a lot.
Now we (or our messenger application) know that we have two prime numbers that
are most probably prime, and unlikely to have been chosen by someone else for
their keys, so we can now happily encrypt our most secret and important
messages with them.
This might again sound like a wonky foundation, but it’s more probable to end up
with insecure keys due to
<a href="https://en.wikinews.org/wiki/Predictable_random_number_generator_discovered_in_the_Debian_version_of_OpenSSL">broken random number generators</a>
than due to trusting the probabilities from the encryption algorithms.
I learned about these things at university in multiple cryptography lectures,
but we were too busy learning how they work to have a look at the history
and real-life stories, so reading about it again from some fresh perspective in
this book was enlightening.</p>
<p>The main message of this chapter is:</p>
<blockquote>
<p>There is a deep message in the fact that on certain problems, randomized
approaches can outperform even the best deterministic ones.
Sometimes the best solution to a problem is to turn to chance rather than
trying to fully reason out an answer.</p>
</blockquote>
<h3 id="networking---how-we-connect">10. Networking - How We Connect</h3>
<p>After beginning with a historic tour of the content of the first telegraph,
first phone call, first <em>mobile</em> phone call, and first text message over the
internet, the first subsection finds an elegant conclusion:</p>
<blockquote>
<p>The foundation of human connection is protocol — a shared convention of
procedures and expectations, from handshakes and hellos to etiquette,
politesse, and the full gamut of social norms.
Machine connection is no different.
Protocol is how we get on the same page; in fact, the word is rooted in the
<a href="https://en.wikipedia.org/wiki/Protocol_(diplomacy)">Greek <em>protokollon</em></a>,
“first glue,” which referred to the outer page attached
to a book or manuscript.</p>
</blockquote>
<p>Most of the chapter goes into explaining how switched packet networking works
because all the digital communication on the planet relies on it.
The interesting bit of switched networking is that there is no such thing as
a <em>connection</em> like telephone calls used to have, although video meeting apps
tell you the opposite.
Ditching dedicated connections gives more flexibility because computers
don’t maintain only a few connections that are used all the time, but instead
maintain many connections which are only used in bursts.
The book shares the amount of technical detail about
<a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol">TCP</a>,
<a href="https://en.wikipedia.org/wiki/Network_congestion#Congestion_control">Congestion Control</a>,
the <a href="https://en.wikipedia.org/wiki/Two_Generals%27_Problem">Byzantine Generals Problem</a>,
and <a href="https://en.wikipedia.org/wiki/Exponential_backoff">Exponential Backoff</a>
that is needed to bridge the ideas behind them with real-life scenarios that
most readers know.</p>
<div class="floating-image-right">
<figure>
<img src="/images/books/algorithms-to-live-by-squirrel.gif" alt="Approach carefully, withdraw quickly (source)" />
<figcaption aria-hidden="true">Approach carefully, withdraw quickly (<a href="https://www.reddit.com/r/gifs/comments/2p38by/squirrel_fighting_with_a_bag/">source</a>)</figcaption>
</figure>
</div>
<p>I liked how the authors found something in nature that makes TCP’s flow
control strategy look very natural:</p>
<blockquote>
<p>Other animal behavior also evokes TCP flow control, with its characteristic
sawtooth.
Squirrels and pigeons going after human food scraps will creep forward a step
at a time, occasionally leap back, then steadily creep forward again.</p>
</blockquote>
<p>This strategy is also called
<a href="https://en.wikipedia.org/wiki/Additive_increase/multiplicative_decrease">Additive Increase/Multiplicative Decrease</a>
due to its nature to increment the send rate in small steps while the
transmission of packets is successful but drop the rate drastically in case of
transmission errors.
This way messages are often sent at a slower rate than possible, but
transmission errors are kept to a minimum.</p>
<p>The book suggests the application of the AIMD strategy during the onboarding of
new employees:
If it’s unclear how much they will perform in their new environment, increase
their workload in small steps, and as soon as they appear overloaded and make
too many mistakes due to stress, drastically reduce the number again.
Midterm, the employee would work slightly below their maximum and not be
over-stressed, which is good for all participants.</p>
<p>Application of this strategy would also have a positive long-term impact
if applied as a countermeasure against the bad effects of the
<a href="https://en.wikipedia.org/wiki/Peter_principle">Peter principle</a>:
Employees are promoted based on their success in previous jobs until they reach
a level at which they are no longer competent, as skills in one job do not
necessarily translate to another.
The AIMD strategy suggests that we should be able to demote people again if
their last promotion decreased the overall organization’s strength (it does not
appear useful in this case to demote the person <em>multiple</em> levels lower although
AIMD works like that, depending on the metrics).</p>
<p>Two other interesting messages can be extracted from this chapter:</p>
<blockquote>
<p>In 2014, for instance, UC Santa Cruz’s Jackson Tolins and Jean Fox Tree
demonstrated that those inconspicuous “uh-huhs” and “yeahs” and “hmms” and
“ohs” that pepper our speech perform distinct, precise roles in regulating the
flow of information from speaker to listener—both its rate and level of
detail.
Indeed, they are every bit as critical as ACKs are in TCP.
Says Tolins, “Really, while some people may be worse than others, ‘bad
storytellers’ can at least partly blame their audience.”</p>
</blockquote>
<p>I liked to read this because it backs something that I always felt in online
meetings:
If all or most participants are on mute with disabled webcams, it hurts
the effectiveness of online meetings.
Unfortunately, I have seen this online meeting culture a lot.
I typically also annoy the students of <a href="https://qasm.de/">my university lecture</a>
into enabling their webcams because it enables me to present them with a better
listening experience when I see the students’ faces: If they look annoyed, I
might have been talking about the same thing for too long (thinking that the
majority does not understand it yet) and if they pinch their eyes, I might have
skipped over something too quickly.
Giving some kind of talk in front of a screen without faces on it is a bad
experience and makes it harder to give the audience a good experience.</p>
<p>My last highlight of this chapter is the explanation of the technical phenomenon
in computer networks called
<a href="https://en.wikipedia.org/wiki/Bufferbloat">Buffer Bloat</a>:
When network devices that are under heavy load are configured with too large
buffers (This is typically not a configuration knob that is visible for
end-users) to queue up packets that can’t be processed yet, then this often
impacts latencies of TCP network connections negatively.
The real-life example that the authors came up with to explain this to
non-engineers is strikingly simple:</p>
<blockquote>
<p>When Tom took his daughter to a Cinco de Mayo festival in Berkeley, she set
her heart on a chocolate banana crêpe, so they got in line and waited.
Eventually — after twenty minutes — Tom got to the front of the line and
placed his order.
But after paying, they then had to wait <em>forty more minutes</em> to actually get
the crêpe.</p>
</blockquote>
<p>The solution for this problem is simple and works both on network devices and
in crêpe shops:</p>
<blockquote>
<p>Turning customers away would have made everyone better off—whether they ended
up in a shorter crêpe line or went elsewhere.
And wouldn’t have cost the crêpe stand a dime of lost sales, because either
way they can only sell as many crêpes as they can make in a day, regardless
of how long their customers are waiting.</p>
</blockquote>
<p>This might suggest finding peace with one or the other dropped packet, and
more generally in life learning to say “no”:
If you tend to accept too many requests from others to not disappoint
them, you will end up disappointing them with long wait times anyway.</p>
<h3 id="game-theory---the-minds-of-others">11. Game Theory - The Minds of Others</h3>
<p><a href="https://en.wikipedia.org/wiki/Game_theory">Game Theory</a> is all about studying
the rules of games and the strategies that players can follow to get the best
results for them.
This chapter explains the so-called
<a href="https://en.wikipedia.org/wiki/Nash_equilibrium">Nash Equilibrium</a>, which is
a state of any game where all players found the strategy that gives them the
best result from their perspective and everyone sticks to theirs.
Depending on the design of the game, this means anything between good and bad
results for all players.</p>
<div class="floating-image-right">
<figure>
<img src="/images/books/algorithms-to-live-by-prisoners-dilemma.png" width="600" alt="All possible outcomes of the Prisoner’s Dilemma Game for each player’s action" />
<figcaption aria-hidden="true">All possible outcomes of the Prisoner’s Dilemma Game for each player’s action</figcaption>
</figure>
</div>
<p>The best example of a nash equilibrium that brings bad results for the players
is the <a href="https://en.wikipedia.org/wiki/Prisoner%27s_dilemma">Prisoner’s Dilemma</a>:
Imagine two collaborators of a crime are caught but the police do not have
enough evidence to convict them on the principal charge.
During the interrogation, each collaborator has the choice to remain silent or
cooperate with the police, which means betraying their collaborator but getting
out of jail immediately.
If both collaborators betray each other they will however both end up in jail
for long.</p>
<p>The only good way out of this game for both participants is if they really can
trust each other, but the individual player will get the best “score” for them
if they do the betrayal (going out of jail is still better than sitting for just
a few years).
The message of the prisoner’s dilemma is that if you set up a game like this,
the mainstream of participants will converge on the bad behavior because this
is the rational choice resulting from understanding the game.
At this point, it’s easy to blame the players, but the book suggests blaming the
game author for setting up the rules like this in the first place.</p>
<p>While the prisoner’s dilemma will most likely be familiar to most readers
already, the book comes up with two other nice and intriguing examples:</p>
<blockquote>
<p>Imagine two shopkeepers in a small town.
Each of them can choose either to stay open seven days a week or to be open
only six days a week, taking Sunday off to relax with their friends and
family.
If both of them take a day off, they’ll retain their existing market share and
experience less stress.
However, if one shopkeeper decides to open his shop seven days a week, he’ll
draw extra customers</p>
</blockquote>
<p>The Nash equilibrium of this game is a market where all shops are under pressure
to have open all the time.
Depending on the question if this is a good thing for all participants, it might
be necessary to change the rules to relieve the players from pressure.</p>
<p>As intuitive as the market example is, the next example seems counter-intuitive
and surprising at first glance.
What would happen, if a company gave every one of their employees unlimited
vacation time?</p>
<blockquote>
<p>All employees want, in theory, to take as much vacation as possible.
But they also all want to take just slightly less vacation than each other,
to be perceived as more loyal, more committed, and more dedicated (hence more
promotion-worthy).
Everyone looks to the others for a baseline, and will take just slightly less
than that.
The Nash equilibrium of this game is zero.</p>
</blockquote>
<p>This is shocking because it shows how quickly bad scores can result from
initially well-intended rules.
The authors call this the
<a href="https://en.wikipedia.org/wiki/Tragedy_of_the_commons">Tragedy of the Commons</a>.
Stock markets close at defined times as otherwise traders would lose money if
they went to bed, leading to many burned-out traders.</p>
<p><a href="https://en.wikipedia.org/wiki/Mechanism_design">Mechanism Design</a> is then
presented as the solution:
Game theory asks what behavior will result from a given set of rules and
mechanism design asks what set of rules should be given for the desired
behavior.
Mechanism design can help make the game moves that would otherwise be
irrational, rational.
Revenge, for example, is a very natural behavior in animals and humans, but it
is irrational because it just increases the damage and does not bring
anything back to anyone.
Still, it seems to be helpful, because the sheer <em>likelihood</em> that someone
would take vengeance if someone else did them badly models a counterincentive.</p>
<div class="floating-image-right">
<figure>
<img src="/images/books/algorithms-to-live-by-doc-brown.webp" width="400" alt="The problem is not the other drivers - it’s the number of cars" />
<figcaption aria-hidden="true">The problem is not the other drivers - it’s the number of cars</figcaption>
</figure>
</div>
<p>The next interesting principle from game theory research is
<a href="https://en.wikipedia.org/wiki/Price_of_anarchy">the price of anarchy</a>, which
measures how much worse the average outcome of a game gets for everyone due to
selfish behavior.
Games with a high price of anarchy are hence worthy of being redesigned to
reduce the effect of the tragedy of the commons.
Calculating the price of anarchy can even show that some games don’t necessarily
need a redesign, although one would intuitively think so:
The price of anarchy shows that human traffic with egoistic drivers is only
33% worse than a perfect centrally planned traffic of computer drivers (not
including the reduced number of accidents with injuries/deaths).
There are arguments against individual car traffic, but they originate more from
the scaling perspective than from game theory.</p>
<h3 id="conclusion---computational-kindness">Conclusion - Computational Kindness</h3>
<p>My favorite main message of this concluding chapter is, that mathematics and
algorithms show us that we can stop stressing ourselves over always improving in
all areas, because even with optimal strategies, the results are not always
optimal, and accepting that is just rational.
This does not mean that one should not try if science says that the probability
of success is too low - but that one should try and simply adjust their
expectations.</p>
<div class="floating-image-right">
<figure>
<img src="/images/books/algorithms-to-live-by-math-child.webp" width="250" alt="Overly polite and modest answers can leave overwhelmingly many options to the enquirer" />
<figcaption aria-hidden="true">Overly polite and modest answers can leave overwhelmingly many options to the enquirer</figcaption>
</figure>
</div>
<p>This chapter also cultivates the principle of being “computationally kind” to
others:</p>
<blockquote>
<p>We can be “computationally kind” to others by framing issues in terms that
make the underlying computational problem easier.
This matters because many problems—especially social ones, as we’ve seen—are
intrinsically and inextricably hard.
[…]
Politely withholding your preferences puts the computational problem of
inferring them on the rest of the group.
In contrast, politely asserting your preferences (“Personally, I’m inclined
toward x. What do you think?”) helps shoulder the cognitive load of moving the
group toward resolution.</p>
</blockquote>
<p>Life is complicated and full of decisions with no upfront clear outcome, so
relax and follow the final advice:</p>
<blockquote>
<p>In the hard cases, the best algorithms are all about doing what makes the most
sense in the least amount of time, which by no means involves giving careful
consideration to every factor and pursuing every computation to the end.
Life is just too complicated for that.</p>
</blockquote>
<h2 id="summary">Summary</h2>
<p>I think that the people who profit most from reading this book are curious
non-technical people, people who work with (software) engineers (e.g. their
managers), and early students:
The examples and anecdotes are interesting and vivid, as they back otherwise
boring theory with relevant and partly entertaining real-life scenarios that
have strong potential to motivate further study.
Computer scientists will appreciate the examples and anecdotes because they are
entertaining, but also because they help to explain tricky technical situations
to non-technical colleagues with good comparisons when it matters.</p>
<p>While reading about algorithms and strategies and their application to social
situations, I remembered many situations at work where the whole team rendered
trapped in escaping local maximums because solutions worked “well enough” to
not change them, although there were problems that could have been solved by
shaking everything up a little (as suggested by e.g. the simulated annealing
algorithm).
These were situations where people would use all their engineering skills to
solve technical challenges, but would not use the same knowledge to challenge
their feelings and comfort zone - but that is the game changer that would help
many to be more innovative.
A good part of the messages in this book converges to “stop overthinking, even
science says that it’s more rational to try something new”.</p>
<p>This book is a bridge between the technical and the non-technical worlds.
It is not a must-read but a very good book for everyone who likes a mixture of
slight entertainment, story-telling, and a closer but not too technical look at
interdisciplinary connections of life with mathematics and computer science.
If you don’t read it, you might be missing out on some of the most interesting
details of the inner workings of the modern world.</p>]]></summary>
</entry>
<entry>
    <title>Book Review: The Phoenix Project</title>
    <link href="https://blog.galowicz.de/2022/12/19/book-review-the-phoenix-project" />
    <id>https://blog.galowicz.de/2022/12/19/book-review-the-phoenix-project</id>
    <published>2022-12-19T00:00:00Z</published>
    <updated>2022-12-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!-- cSpell:words Behr ITPI Spafford Eliyahu Goldratt Miyagi Kanban Andon -->
<!-- cSpell:words Behr Jidōka Autonomation Kaizen culting rebranding -->
<!-- cSpell:words overcommitted incentivized Beyoncé CISO Pesche -->
<!-- cSpell:words Taiichi Ohno Zuckerberg rebranded -->
<!-- cSpell:ignore -->
<p><a href="https://amzn.to/3hcHGpf">The Phoenix Project</a> is a novel that has been declared
a must-read by many IT executives.
It provides smart solutions to the problems that most IT companies struggle with
and is at the same time educating to read.
What principles does it teach, and where does it fall short?</p>
<!--more-->
<div class="book-cover">
<figure>
<img src="/images/books/the-phoenix-project.jpg" alt="Book Cover of “The Phoenix Project”" />
<figcaption aria-hidden="true">Book Cover of “The Phoenix Project”</figcaption>
</figure>
</div>
<h2 id="book-authors">Book &amp; Authors</h2>
<p><a href="https://amzn.to/3hcHGpf">Link to the Amazon Store Page</a></p>
<p>The first edition of this book is from 2013, its second version is from 2014,
and the third version, which is called <em>the 5th-anniversary edition</em>, was
released in 2018.
This version of the book is ~350 pages for the main story but contains
additional ~70 pages for an excerpt of
<a href="https://amzn.to/3iXmzHW">The DevOps Handbook</a>.</p>
<p><a href="http://www.realgenekim.me/">Gene Kim</a> is a multi-award-winning CTO, researcher,
and author.
His books include <a href="https://amzn.to/3iXmzHW">The DevOps Handbook</a>,
<a href="https://amzn.to/3W5QGf3">The Visible Ops Handbook</a>, and
<a href="https://amzn.to/3uEkxPz">Visible Ops Security</a>.</p>
<p><a href="https://www.linkedin.com/in/kevinbehr/">Kevin Behr</a> is the founder of the
<a href="https://itpi.org/">Information Technology Process Institute (ITPI)</a> and the
general manager and chief science officer of
<a href="https://www.praxisflow.com/">Praxis Flow LLC</a>.
He is also the co-author of <a href="https://amzn.to/3W5QGf3">The Visible Ops Handbook</a>.</p>
<p><a href="https://www.linkedin.com/in/gspafford/">George Spafford</a> is a
<a href="https://www.gartner.com/analyst/38065">research director for Gartner</a>.
His publications include articles and books on IT service improvement, as well
as co-authorship of <a href="https://amzn.to/3W5QGf3">The Visible Ops Handbook</a>, and
<a href="https://amzn.to/3uEkxPz">Visible Ops Security</a>.</p>
<h2 id="content-and-structure">Content and Structure</h2>
<div class="floating-image-right black-border-image">
<figure>
<img src="/images/books/the-phoenix-project-bill.jpg" alt="Main Protagonist Bill Palmer" />
<figcaption aria-hidden="true">Main Protagonist Bill Palmer</figcaption>
</figure>
</div>
<p>In this novel, the three gentlemen tell a story about DevOps and organizational
change.
Practically everyone who works in IT will recognize the situations depicted in
the book.
In 1984, <a href="https://en.wikipedia.org/wiki/Eliyahu_M._Goldratt">Dr. Eliyahu M. Goldratt</a>
published the book <a href="https://en.wikipedia.org/wiki/The_Goal_(novel)">The Goal</a>,
which is a novel about bottlenecks in old-school manufacturing processes.
It seems like the Phoenix Project as a book is strongly inspired by this one:
<em>The Goal</em> was about optimizing production plants and <em>The Phoenix Project</em> is
about optimizing IT “plants”, so to say.</p>
<p>I will introduce only the from my point of view most important three figures
out of twelve from the book:</p>
<p>The story is told from the perspective of the protagonist
<u>Bill Palmer</u> and begins like this:</p>
<blockquote>
<p>Bill is an IT manager at Parts Unlimited.
It’s Tuesday morning, and on his drive into the office, Bill gets a call from
the CEO.
The company’s new IT initiative, code named <em>Phoenix Project</em> is critical to
the future of Parts Unlimited, but the project is massively over budget and
very late.
The CEO wants Bill to report directly to him and fix the mess in ninety days
or else Bill’s entire department will be outsourced.</p>
</blockquote>
<div class="floating-image-right black-border-image">
<figure>
<img src="/images/books/the-phoenix-project-erik.jpg" alt="Board Candidate Erik Reid" />
<figcaption aria-hidden="true">Board Candidate Erik Reid</figcaption>
</figure>
</div>
<p>In the middle of all the turmoil that Bill experiences, he is asked to take time
to meet <u>Erik Reid</u>, who is also described by other figures in the
book as a mysterious <em>tech hotshot</em>.
At first, Erik seems forced upon the protagonist, with no obvious specialty
other than forgetting everyone’s names all the time.
Bill does not get why Erik is invited to become a board member.
Their interaction begins with strange homework that Erik gives Bill, like
finding out what “the four types of work” are and calling him afterward.
Erik seemingly knows a lot about optimizing IT organizations,
but he lets Bill find out most of it by himself instead of just explaining it.
This way he initially comes across as some complacent and self-imposed version
of <a href="https://en.wikipedia.org/wiki/Mr._Miyagi">Mr. Miyagi</a>.
Over the rest of the book, he proves to be a helpful genius and a great mentor
to Bill.
With Erik’s help, he learns to use his new to get the chaos under control.</p>
<p><u>Brent Geller</u> is mentioned in the second chapter when some
huge infrastructure outage occupies a whole department.
Bill describes Brent to the reader:</p>
<div class="floating-image-right black-border-image">
<figure>
<img src="/images/books/the-phoenix-project-brent.jpg" alt="Super 10X Engineer Brent Geller" />
<figcaption aria-hidden="true">Super 10X Engineer Brent Geller</figcaption>
</figure>
</div>
<blockquote>
<p>He’s always in the middle of the important projects that IT is working on.
I’ve worked with him many times.
He’s definitely a smart guy but can be intimidating because of how much he
knows. What makes it worse is that he’s right most of the time.</p>
</blockquote>
<p>Throughout the story, Brent presents himself as the bottleneck of the entire
organization.
Due to his outstanding competence and knowledge of the company’s software and
systems, practically nothing gets done without him.
This did not happen intentionally - it just ended up like this.</p>
<p>On the one hand, you want to have employees like Brent, because they are
enormously productive.
On the other hand, you don’t want to depend too much on individual employees
like that, because this drives up your
<a href="https://en.wikipedia.org/wiki/Bus_factor">bus factor</a>.
As multiple bosses have direct “access” to Brent, he seems like a shared
resource.
The organizational problem with this is that he is seriously overcommitted
because there is no overarching plan/control of his time availability.
It even gets worse over time as he is pulled into every new emergency that
happens over time, which involuntarily makes him a full-time firefighter.
But he also never says <em>no</em>, because he is not the boss and may be too nice a
person.</p>
<p>The problem with Brents in companies has a striking similarity to the <em>priority
inversion problem</em> that brought down the
<a href="https://en.wikipedia.org/wiki/Mars_Pathfinder">Mars Pathfinder</a> project.
(Which is also mentioned in the
<a href="/2022/12/26/book-review-algorithms-to-live-by">next book review</a>)
Throughout the book’s story, <em>the Brent Problem</em> is solved by meticulously
controlling Brent’s schedule and protecting it and him from unauthorized
external influences.</p>
<p>While Bill and Erik form the team that conveys the book’s main principles to
the reader, Brent embodies all the firefighting in IT companies.
Their interplay with all the other characters (which also are very original
and recognizable from what you know from other IT organizations, especially the
CISO John Pesche) is exciting to read, but let’s continue with the principles
that the book teaches.</p>
<h3 id="the-four-types-of-work">The Four Types of Work</h3>
<p>The <em>four types of work</em> that Erik teaches Bill are inspired by Dr. Eliyahu M.
Goldratt’s
<a href="https://en.wikipedia.org/wiki/Theory_of_constraints">Theory of Constraints</a>.
This theory’s main point is that to increase the throughput of a
system, its constraints (bottlenecks) need to be identified, and then everything
needs to be subordinated to the task of removing them.
All other efforts that don’t concentrate on removing actual constraints are
futile.</p>
<p>The book slightly deviates from this school that stems from manufacturing to fit
its learnings into the world of modern IT organizations, which share some but
not all problems, or not the same way, with manufacturing organizations (storage
costs are for example not something that a software organization must optimize
away).
It takes nearly the first half of the book for Bill to identify the four types
of work that Erik asked him for.
The four types as presented in the story are:</p>
<dl>
<dt>Business Projects</dt>
<dd>
<p>Business initiatives, most of the development work.
The main reason for companies to even exist.</p>
</dd>
<dt>IT Operations Projects</dt>
<dd>
<p>IT Operations exist to support the Business.
They are not an end in itself, but end up being so complex that they make
practically every big company an IT company compared to how many employees
are hired to operate IT infrastructure and projects.</p>
</dd>
</dl>
<p>The exact amount of business and IT operations projects is often not properly
tracked.</p>
<dl>
<dt>Changes</dt>
<dd>
<p><em>Changing</em> and updating processes and (infra)structure is another type of work.
The tasks of maintaining the normal business of some big infrastructure and
the task of changing something in it are most of the time contradictory
because it is hard to find ways how to do both at the same time.
Changes are typically strategic and proactive.</p>
</dd>
<dt>Unplanned Work</dt>
<dd>
<p>Unplanned work is urgent firefighting that keeps organizations from reaching
their goals.
Technical debt is the main driver behind it.
Unplanned work hinders employees from keeping up with planned work, because of
the exceptional urgency that it has, e.g. before release deadlines.
Erik mentions <em>anti-work</em> as another synonym.
Unplanned work is tactical and reactive.</p>
</dd>
</dl>
<p>In chapter 19, Eric Reid explains the impact of unplanned work:</p>
<blockquote>
<p>“Unplanned work has another side effect.
When you spend all your time firefighting, there’s little time or energy
left for planning.
When all you do is react, there’s not enough time to do the hard mental work
of figuring out whether you can accept new work.
So, more projects are crammed onto the plate, with fewer cycles available to
each one, which means more bad multitasking, more escalations from poor code,
which mean more shortcuts.
As Bill said, ‘around and around we go.’ It’s the IT capacity death spiral.”</p>
</blockquote>
<p>This categorization is simple to follow and to adapt your organization to.
If we look at a snapshot of an organization in good times, we would just need
business projects because these earn the money, and the IT projects
enable/support the business.
When everything goes well, no changes are needed because there is no unplanned
work.
But of course, times change, markets change, etc., and after some scaling up and
down structures cease to work correctly which creates unplanned work and the
need for change.</p>
<h3 id="the-three-ways">The Three Ways</h3>
<p>The three ways reminded me a lot of the ideals and principles that I learned
earlier from reading the
<a href="https://amzn.to/3VSudBY">Toyota Production System (TPS) Book by Taiichi Ohno</a>.
This is not completely surprising as Toyota developed its ideas of optimized
manufacturing after world war 2.
In the 80s, they were so efficient that the world started copying their ideas.
I will add some insights from the TPS to the learnings from the book to
show the overlap and practicality of the ideas.</p>
<p>Erik’s adaption of how to adapt the constraint theory on IT in three ways
(/steps) looks like the following:</p>
<dl>
<dt>1.) Flow</dt>
<dd>
<p>By <em>flow</em>, the book means the flow of <em>value</em> produced by the software, which
originates in development and “moves” to operations.
Customers wish for new features and bug/security fixes all the time.
Maximizing this flow means increasing the <em>throughput</em> and decreasing the
<em>wait times</em> (latencies) for such.
This flow is increased by making work in progress (WIP) visible and then
reducing batch sizes and work intervals, and enhancing the quality and defect
prevention.
With this global goal in mind, every value-adding stage that passes
deliverables downstream to the next stage has to perform such optimizations.</p>
</dd>
</dl>
<p>At this point, this reads like a description of
<a href="https://en.wikipedia.org/wiki/Kanban">Kanban</a>:
Supervisors write work packages on cards and move them between columns that
indicate that something is planned, work in progress (WIP), or done.
At the same time, the amount of cards in the WIP stage is kept at a minimum.</p>
<figure>
<img src="/images/books/the-phoenix-project-kanban-board.jpg" alt="A Kanban Board to visualize WIP at a Toyota production plant (source)" />
<figcaption aria-hidden="true">A Kanban Board to visualize WIP at a Toyota production plant (<a href="https://www.toyota-global.com/company/history_of_toyota/75years/text/entering_the_automotive_business/chapter1/section4/item4.html">source</a>)</figcaption>
</figure>
<dl>
<dt>2.) Feedback</dt>
<dd>
<p>The second way is all about the <em>defect prevention</em> that was mentioned in the
first way, and the resolving of bottlenecks/constraints.
The earlier defects are detected, the faster and cheaper they can be fixed.
(Ever heard of <a href="https://en.wikipedia.org/wiki/Shift-left_testing">Shift-Left</a>?)
For this reason, the organization must be built in a way that enables early
defect detection.
As soon as a defect is detected, instead of finding the one to blame, the
organization must concentrate on the opportunity to learn from the defect and
optimize the flow to prevent it from happening again.</p>
</dd>
</dl>
<p>In Toyota production facilities, this is called
<a href="https://en.wikipedia.org/wiki/Andon_(manufacturing)">Andon</a>:
Whenever a defect is found (or an accident happens), workers would pull the
<em>Andon Cord</em> which immediately stops the assembly line and signals one of many
numbered light indicators on an <em>Andon board</em>.
A supervisor would then rush for assistance to find out how to resolve the
problem and prevent it in the future.
(Which sometimes results in small fixes, sometimes in going up the organization
hierarchy to find more involved solutions)</p>
<figure>
<img src="/images/books/the-phoenix-project-andon-board.jpg" alt="An Andon board at a Toyota production plant (source)" />
<figcaption aria-hidden="true">An Andon board at a Toyota production plant (<a href="https://www.toyota-global.com/company/history_of_toyota/75years/text/entering_the_automotive_business/chapter1/section4/item4.html">source</a>)</figcaption>
</figure>
<p>Workers are typically incentivized to keep the throughput of their assembly line
maximized.
At first sight, this incentive contradicts the other incentive to keep the
quality high if this means stopping the assembly line from time to time.
This might be reminiscent of programmers who are encouraged to create as many
“green” (finished) JIRA tickets as possible per sprint in a hurry, which keeps
them from stopping from time to time what these are actually used for and how to
think better in terms of quality increase and defect avoidance.</p>
<p>When automatic production machines/robots are enhanced with automatic quality
checks, this is called
<a href="https://en.wikipedia.org/wiki/Autonomation">Jidōka (Autonomation)</a>.
The equivalent of this in software engineering is unit- and integration tests
that are executed after <em>every little change</em>.
These can (but in many companies don’t) act as quality gates that need before
some code change is merged into a release-relevant branch.</p>
<p>Creating fast feedback is critical to achieving quality, reliability, and safety
in the technology value stream.
The challenge is to balance the seemingly contradictive mix of incentives:
On the one hand, workers shall work quickly to produce high throughput.
On the other hand, they shall take some time to look out for defects and
interrupt production if they find any.
This combination is achieved by distributing responsibility for quality over
<em>all</em> the links in the production chain.</p>
<p>At Google, you can find this principle embodied by
<a href="https://www.oreilly.com/library/view/software-engineering-at/9781492082781/ch01.html">The Beyoncé Rule</a>,
which says <em>“If you liked it, you should have put a CI test on it”</em> -
or more formally:</p>
<blockquote>
<p>“If a product experiences outages or other problems as a result of
infrastructure changes, but the issue wasn’t surfaced by tests in our Continuous
Integration (CI) system, it is not the fault of the infrastructure change.”</p>
</blockquote>
<p>The comparison with production facilities lags a little bit because the
factory optimization theory does not directly map to how software engineering
works:
The output of a factory worker is assembled parts, while the output of a
software developer is changed software (which resembles blueprints).</p>
<dl>
<dt>3.) Continual Learning and Experimentation</dt>
<dd>
<p>The third way is about creating an organization with a culture of continual
learning and experimentation.
The book argues that high-performing operations require and actively promote
learning, with workers performing experiments in their daily work to generate
new improvements. (Remember the <a href="/2022/12/05/book-review-a-philosophy-of-software-design/">review of John Ousterhout’s book
“A Philosophy of Software Design”</a>
that says that code should be designed twice?)
The third way can only be achieved by companies that create an atmosphere
in which workers feel safe to experiment, speak up, and suggest changes.</p>
</dd>
</dl>
<p>In the Toyota Production System, continuous improvement culture throughout the
whole company from the CEO to the line worker is called
<a href="https://en.wikipedia.org/wiki/Kaizen">Kaizen</a>.
As an electrical engineer, this way of looking at an organization reminded me of
the <a href="https://en.wikipedia.org/wiki/Systems_theory">Systems Theory</a> lectures at
university and <a href="https://en.wikipedia.org/wiki/Cybernetics">Cybernetics</a>
literature.</p>
<h2 id="interpretation-and-opinion">Interpretation and Opinion</h2>
<p>During my career, I felt intrigued by ideas/schools like
<a href="https://en.wikipedia.org/wiki/Scrum_(software_development)">Scrum</a>,
<a href="https://en.wikipedia.org/wiki/Agile_software_development">agile</a>,
<a href="https://en.wikipedia.org/wiki/Kanban_(development)">Kanban</a>,
<a href="https://en.wikipedia.org/wiki/Extreme_programming">Extreme Programming</a>, etc.
because they promise a cure for many problems that IT companies have, but the
real-life adaptions that I have seen in most companies were rather
underwhelming.
It does not seem like you can get a few employees a Scrum certification, use
Kanban boards in JIRA and that’s it.
For that reason, I decided to delve deeper into this topic, and find the
original literature behind it, which ultimately led me to read the book about
<a href="https://amzn.to/3BxYPAt">The Toyota Production System</a>.
That was an eye-opening experience because reading the original literature
empowers one to assess the value behind all the structures and processes better
in relation to the big-picture outcome that they shall achieve.
Today I know that most companies simply do it wrong, mostly by
<a href="https://en.wikipedia.org/wiki/Cargo_cult_programming">cargo-culting</a>
what the latest books say without having understood completely what they are
aiming for.</p>
<p>Much later, I read the Phoenix project and got to know the Theory of Constraints
that it refers to.
Due to this order, I got the impression that the theory of constraints is kind
of a <em>rebranding</em> of the learnings from the TPS, as they are so strikingly
similar.</p>
<p>However, no one in IT companies ever reads TPS, but the Phoenix Project has been
a confirmed must-read by many in the IT industry.
Being an impactful book that motivated many professionals to change things for
the better, it proved its value in the book market to me.
Not to forget that it was so much fun to read because it’s a novel and not a
boring textbook (which is another reason for its popularity)!
The fact that it is a novel that explains it at a high level also brought many
managers and deciders to read it, and finally adopt the right mindset on how to
tackle IT.</p>
<p>Looking at the <strong>four kinds of work</strong>, I experienced that many employees confuse
<em>change control</em> with <em>unplanned work</em>.
In the last few years, I have seen Phoenix-Project-educated employees fighting
some <em>change</em> work because they were clogged with <em>unplanned work</em>, claiming
that the change project is unplanned work.
Many employees would jump on piles of unplanned work without reflecting that
<em>this</em> is the thing they need to fight (or believing that it’s hopeless to try)
- this is priority inversion at work.
It seems like it is not trivial for many to change perspectives just by reading
a novel.</p>
<p>This confusion was sometimes due to the fact that you can’t ask someone to
change something without reducing the burden of meeting deadlines from them at
some other point.
It happens a lot that managers try to keep the machine running and don’t dare to
relieve some resources from firefighting to make them available for strategic
change.
But even if they do,
<a href="https://lsaglobal.com/blog/how-top-leaders-combat-the-7-most-common-reasons-employees-fight-change/">organization structures often defend against change</a>.
Just handing out the Phoenix Project to people without further moderation is not
enough, with all the misunderstandings that I have seen.</p>
<p>Looking at the <strong>three ways</strong>, it’s clear that the first two are mostly
technical challenges.
Most companies do not keep up well, but fixing that is “just” a technological
challenge that a company can put their smartest employees and best managers on.
It is a matter of priority, resources, and the right technology.
Throw away your waterfall planning and stateful asynchronous testing pipelines.
Replace it with proper processes and synchronous quality barriers.
I am happy to help:
<a href="https://calendly.com/jacek-galowicz/60-minute-meeting">Let’s schedule a meeting and look at it together</a>.</p>
<p>The third way seems to be the hardest one because it is not technical but
purely about the social part of organizations:
Organizations consist of humans which sometimes hoard information, withhold it
for political reasons, and/or distort it to look better.
Some feel insecure (Especially among IT jobs, the impostor syndrome seems
widespread) and just try to keep their job.
The majority of employees are not bursting with motivation for performance and
desire for change, but are happy to find a defined list of tasks that they can
complete every week and in return feed their family and pay off their house
mortgage.
Many just want to secure their jobs and income by showing up in the morning,
following all the rules, signing off in the late afternoon, and making sure that
they did not do anything wrong.
There is nothing wrong with such an attitude - but it also does not model the
self-reflective and improvement-hungry worker that the Toyota Production System
and Theory of Constraints are asking for.</p>
<p>On the other side, organizations are often managed by strict processes and
rules, and trying to change them can result in punishment.
In many companies, the best way to make a career is to not do anything wrong.
So in between all the average employees, the ones who stand up for change might
be trimmed down by the org.</p>
<p>Both the TPS and the third way envision an organization that consists of a
majority of self-thinking and motivated workers who like to experiment -
but without experimentation being an explicit task and instead more an implicit
part of every workday.
(This sounds like the
<a href="/2022/12/05/book-review-a-philosophy-of-software-design"><em>strategic programmer</em> from John Ousterhout’s book</a>)</p>
<p>The majority of humans are not like this.
After looking at our school system, it’s not surprising:
People spend ten to twenty years of their early life in school and university
(For me it was 13 years of school, three for the Bachelor’s and two for
the Master’s degree - close to 20 years!).
At school, you learn that you are successful when you say what the teacher wants
to hear, and your answers must fit in the boxes of the exam paper (or worse, you
must check one of the four options given in a multiple-choice test).
If you had some teachers that were not like this - good for you - but it’s not
the experience of the majority.
It does not get much better at university, which is more difficult but success
still equals giving the right answers and results in exam papers.
Trying something new and doing it differently than others did before is not part
of the education system, which teaches conformity above everything else.
(In the next book review, we will see what this has to do with the
<a href="/2022/12/26/book-review-algorithms-to-live-by">Overfitting Problem</a>.)
To put it bluntly: Our school systems produce employees who expect their tasks
to be given in tickets that are presented like exam questions and which are not
to be questioned themselves regarding the task, the deliverable, or the method.
This way to look at it is especially interesting when looking at famous
college/university dropouts who were successful because they did <em>not</em> walk the
intended paths (Bill Gates, Mark Zuckerberg, Steve Jobs, etc.).</p>
<p>The remaining challenge for IT leaders of organizations is to find out how to
<em>empower the minority</em> of employees that show motivation for change,
experimentation and improvement before they are trimmed down by the rest of the
organization, or before they quit to launch their own business.
All the TPS/Theory of Constraints ideas need to be taken on by those.
The organization (and the part of the org which does not care about change or
even fights it) must give them enough room.</p>
<h2 id="summary">Summary</h2>
<p>Although I typically don’t read novels, I was not able to put this one down
until I finished it!
The characters and the development around them are very relatable.
It was exciting to see the protagonist go through a lot of trouble and
frustration but then finally pick up on a great success path.
The name <em>Brent</em> has become a synonym for human constraints in the company I
worked at in the last few years.</p>
<p>The idea to model a business with the three ways and divide the different
kinds of work into four categories makes sense.
It is just a model, and no model is ever a silver bullet that fits everywhere,
but I found this way to look at the structures and processes of an IT company
very convincing.
The underlying ideas are very old but they are rebranded in a way that helps IT
specialists apply them in their world.
The vocabulary also helps in convincing others.</p>
<p>This book is another must-read, but only for those who haven’t read the primary
TPS literature, or for those who simply prefer fun-to-read novels.</p>]]></summary>
</entry>
<entry>
    <title>Book Review: The Culture Map</title>
    <link href="https://blog.galowicz.de/2022/12/12/book-review-the-culture-map" />
    <id>https://blog.galowicz.de/2022/12/12/book-review-the-culture-map</id>
    <published>2022-12-12T00:00:00Z</published>
    <updated>2022-12-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!-- cSpell:words INSEAD Ringi -->
<!-- cSpell:ignore erinmeyer -->
<p>Why do American coworkers always communicate so clearly and directly, but at the
same time criticize rather indirectly and cushioned?
When do Asian coworkers finally jump in and say something in a meeting?
How do German coworkers get done <em>anything</em> innovative in their fixated planning
madness?
After having experienced many strange situations in projects with people from
around the world, I found Erin Meyer’s book
<a href="https://amzn.to/3h7RAZ6">The Culture Map</a> to be so insightful that I would
declare it a must-read for any software professional who works with or in
international teams.</p>
<!--more-->
<div class="book-cover">
<figure>
<img src="/images/books/the-culture-map.jpg" alt="Book Cover of “The Culture Map”" />
<figcaption aria-hidden="true">Book Cover of “The Culture Map”</figcaption>
</figure>
</div>
<h2 id="book-author">Book &amp; Author</h2>
<p><a href="https://amzn.to/3h7RAZ6">Link to the Amazon Store Page</a></p>
<p>The book is originally from 2014 but got its new yellow cover in 2016, which
is still called the first edition.
It presents 8 handy chapters distributed over ~290 pages.</p>
<p><a href="https://erinmeyer.com">Erin Meyer</a> is a professor at
<a href="https://www.insead.edu/faculty-research/faculty/erin-meyer">INSEAD</a>, one of the
world’s leading business schools.
After having lived in many parts of the world and having helped global leaders
to manage the complexities of cultural differences, she presents this amazing
book that explains the cultural differences that she studied in striking
clarity.</p>
<h2 id="content-and-structure">Content and Structure</h2>
<p>There are plenty of articles out there that discuss the differences between
work cultures <em>per country</em> and also give handy tips about what to do and not to
do in different cultures at work to not commit a blunder.</p>
<p>What this book makes different is that it does not simply explain
“Colleagues from country A are like this and colleagues from country B are like
that”.
Instead, it categorizes certain <em>traits</em> which are common among all humans, and
puts each work culture in relation to each other on one scale for each trait.</p>
<h3 id="the-eight-scales">The Eight Scales</h3>
<p>Erin argues that there are eight different traits that can be projected onto
one scale each.
Every scale’s extremes on the left and right describe opposing behavior/rules
in certain scenarios:</p>
<figure>
<img src="/images/books/erin_meyer_multicultural_characteristics_chart.jpg" alt="Cultural Traits on the 8 scales. (source: erinmeyer.com)" />
<figcaption aria-hidden="true">Cultural Traits on the 8 scales. (<a href="https://erinmeyer.com/mapping-out-cultural-differences-on-teams/">source: erinmeyer.com</a>)</figcaption>
</figure>
<p>Each chapter of the book explains one of the scales.
The advantage of the approach to looking at these traits in isolation and then
putting them together for each culture is that each chapter is short,
comprehensible, and easy to memorize.
On top of that, it is relatively simple to assess cultures that are not treated
in this book on this map of scales.</p>
<p>Apart from per-country culture, many companies have developed their own work
culture which may be different from companies in the same country, but can be
explained quickly and efficiently to outsiders.</p>
<p>Let’s get to these traits.
I will briefly summarize them and maybe give some highlights, but apart from a
few highlights, won’t cover the long list of practicable advice from the full
book.
Every trait is also presented with a scale that positions each country according
to its culture.</p>
<dl>
<dt>1.) Communicating: Low-Context vs. High-Context</dt>
<dd>
<p>Different cultures have a different perspectives on what <em>good communication</em>
means:</p>
</dd>
</dl>
<ul>
<li><u>Low-Context</u>:
<ul>
<li>Precise, simple, clear.</li>
<li>Messages are expressed and understood at face value.</li>
<li>Repetition is appreciated if it helps clarify the communication.</li>
</ul></li>
<li><u>High-Context</u>:
<ul>
<li>Sophisticated, nuanced, and layered.</li>
<li>Messages are both spoken and read between the lines.</li>
<li>Messages are often implied but not plainly expressed.</li>
</ul></li>
</ul>
<p>An interesting perspective covering this scale is that the low-context
communication style could be taken as an affront to high-context people
because it can make them feel “This simple and redundant language gives me the
feeling that they think I am stupid.” – while the other way around might be
like “This layered language gives me the feeling that I am not trustworthy,
otherwise they would just speak straight.”, or “If the matter was important to
them, they would be more direct about it.”</p>
<p>A rule of thumb is that humans from countries with very old history and to
some extent isolation share a lot of context in their language, giving them
the possibility to say more with less. People with very different backgrounds
don’t have as much common context, hence the need for more precise
communication.</p>
<dl>
<dt>2.) Evaluating: Direct Negative Feedback vs. Indirect Negative Feedback</dt>
<dd>
<p>This scale is about different ways to give <em>negative</em> feedback:</p>
</dd>
</dl>
<ul>
<li><u>Direct</u>
<ul>
<li>Negative feedback to a colleague is provided frankly, bluntly, and
honestly.</li>
<li>Negative messages stand alone, not softened by positive ones.</li>
<li>Absolute descriptors are often used when criticizing.
(e.g. “totally inappropriate”, “completely unprofessional”)</li>
<li>Criticism may be given to an individual in front of a <em>group</em>.</li>
</ul></li>
<li><u>Indirect</u>
<ul>
<li>Negative feedback to a colleague is provided softly, subtly,
and diplomatically.</li>
<li>Positive messages are used to wrap negative ones.</li>
<li>Qualifying descriptors are often used when criticizing.
(e.g. “sort of inappropriate”, “slightly unprofessional”)</li>
<li>Criticism is given only in private</li>
</ul></li>
</ul>
<p>Especially cultures that are at the same time low-context and
direct-negative-feedback, like the US and UK, at first sight, seem like a
strange combination but are well explained in this chapter.</p>
<p>What is more important when giving <em>good criticism</em>? Making sure that it is
conveyed politely at the price of maybe being overlooked or not
understood to the full extent – or conveying it in its clearest form, which
also emphasizes a form of trust on the strength of the (work) relation?</p>
<dl>
<dt>3.) Persuading: Principles-First vs. Applications-First</dt>
<dd>
<p>Here, it is about how new ideas and approaches are explained to an audience:</p>
</dd>
</dl>
<ul>
<li><u>Principles First</u>
<ul>
<li>Individuals have been trained to first develop the theory or complex
concept before presenting a fact, statement, or opinion.</li>
<li>The preference is to begin a message or report by building up a
theoretical argument before moving on to a conclusion.</li>
<li>The conceptual principles underlying each situation are valued.</li>
</ul></li>
<li><u>Applications First</u>
<ul>
<li>Individuals are trained to begin with a fact, statement, or opinion and
later add concepts to back up or explain the conclusion as necessary.</li>
<li>The preference is to begin a message or report with an executive summary
or bullet points.</li>
<li>Discussions are approached in a practical, concrete manner.</li>
<li>Theoretical or philosophical discussions are avoided in a business
environment.</li>
</ul></li>
</ul>
<p>I found this distinction not only to be valid when talking to humans of
different cultures but also when talking to professionals from different
departments.</p>
<p>This part of the model does not fully apply to Asian cultures, to which the
chapter devotes another subsection.</p>
<dl>
<dt>4.) Leading: Egalitarian vs. Hierarchical</dt>
<dd>
<p>Different cultures prefer different leading styles:</p>
</dd>
</dl>
<ul>
<li><u>Egalitarian</u>
<ul>
<li>The ideal distance between a boss and a subordinate is low.</li>
<li>The best boss is a facilitator among equals.</li>
<li>Organizational structures are <em>flat</em>.</li>
<li>Communication often skips hierarchical lines.</li>
</ul></li>
<li><u>Hierarchical</u>
<ul>
<li>The ideal distance between a boss and a subordinate is high.</li>
<li>The best boss is a strong director who leads from the front.</li>
<li><em>Status</em> is important.</li>
<li>Organizational structures are <em>multilayered and fixed</em>.</li>
<li>Communication follows set hierarchical lines.</li>
</ul></li>
</ul>
<p>This chapter is especially interesting for the reason that it is easy to
accidentally undermine someone’s feeling of authority by e.g. skipping the
hierarchy when mailing questions to people etc.
Also, in hierarchical cultures, it may be pointless to ask about peoples’
opinions in the presence of their boss.
This chapter is full of examples and advice.</p>
<dl>
<dt>5.) Deciding: Consensual vs. Top-Down</dt>
<dd>
<p>How are decisions formed in organizations?</p>
</dd>
</dl>
<ul>
<li><u>Consensual</u>: Decisions are made in groups through unanimous agreement.</li>
<li><u>Top-Down</u>: Decisions are made by individuals (usually the boss).</li>
</ul>
<p>The principle is straightforward but the most interesting case are cultures
that combine strict hierarchy with consensual decision-making.
The strongest example of this is Japan with its <a href="https://en.wikipedia.org/wiki/Japanese_management_culture#Managerial_style">Ringi-Process</a>, but this is only the strongest
example of many (Germany also cultivates a bit of this mixture).</p>
<p>My highlight of this chapter is the <u>big D vs. little d</u> model that
helps explain to people from cultures that are at opposite ends of this scale,
what kind of decision is needed or made when.
When a <em>big D</em> decision is made, then it is to be seen as strict, while a
<em>little d</em> decision allows for flexibility even after the decision was made.
This distinction helps set expectations of groups that appear
chaotic or inflexible to each other.
The big D vs. little d model helped in the collaboration between US-American
and German teams in one of the book’s examples.
I really felt this one.</p>
<dl>
<dt>6.) Trusting: Task-Based vs. Relationship-Based</dt>
<dd>
<p>How do people build trust?</p>
</dd>
</dl>
<ul>
<li><u>Task-Based</u>
<ul>
<li>Trust is built through business-related activities.</li>
<li>Work relationships are built and dropped easily, based on the practicality
of the situation.</li>
<li>“You do good work consistently, you are reliable, I enjoy working with
you, I trust you.”</li>
</ul></li>
<li><u>Relationship-Based</u>
<ul>
<li>Trust is built through sharing meals, evening drinks, and visits to the
coffee machine.</li>
<li>Work relationships build up slowly over the long term.</li>
<li>“I’ve seen who you are at a deep level, I’ve shared personal time with
you, I know others well who trust you, I trust you.”</li>
</ul></li>
</ul>
<p>I felt this difference myself while working for US-American companies that
also have for example Indian offices.
Collaborating with my Indian colleagues got much better after getting to
know them in person at dinner, while I got to know my American colleagues only
at office times.
The book also explains that especially in Asian cultures it can be beneficial
to drink together:
Having seen each other with guards down increases trust on a personal level.</p>
<p>Another highlight of this chapter is the <u>Peach vs. Coconut</u> principle:
People from different cultures might misinterpret friendliness as too much of
an invitation for a personal connection or an offer of friendship, which might
look “fake” to them.
In that regard, <em>peach</em> cultures are friendly and soft with people they have
just met, but the real self stays protected professionally. <em>Coconut</em> cultures
in contrast present a hard protecting shell at first but an even softer core
inside (once you got through the shell).</p>
<dl>
<dt>7.) Disagreeing: Confrontational vs. Avoids Confrontation</dt>
<dd>
<p>How do colleagues disagree?</p>
</dd>
</dl>
<ul>
<li><u>Confrontational</u>
<ul>
<li>Disagreement and debate are positive for the team or organization.</li>
<li>Open confrontation is appropriate and will not negatively impact the
relationship.</li>
</ul></li>
<li><u>Avoids Confrontation</u>
<ul>
<li>Disagreement and debate are negative for the team or organization.</li>
<li>Open confrontation is inappropriate and will break group harmony or
negatively impact the relationship.</li>
</ul></li>
</ul>
<p>Confrontational cultures are also emotionally more expressive, which can be
overwhelming for people of different cultures – what looks like a normal
discussion to one can seem to another like a fight that is about to break out.</p>
<p>As the styles of disagreeing and decision-making can cause incompatibilities,
especially in big international companies, the chapter explains how to deal
with this on large scale, and how to present decisions/discussions to a mixed
audience.</p>
<dl>
<dt>8.) Scheduling: Linear-Time vs. Flexible-Time</dt>
<dd>
<p>How do cultures approach plans, projects, and appointments?</p>
</dd>
</dl>
<ul>
<li><u>Linear Time</u>
<ul>
<li>Project steps are approached sequentially, completing one task
before beginning the next.</li>
<li>One thing at a time. No interruptions.</li>
<li>The focus is on the deadline and sticking to the schedule.</li>
<li>Emphasis is on promptness and good organization over flexibility.</li>
</ul></li>
<li><u>Flexible Time</u>
<ul>
<li>Project steps are approached fluidly, changing tasks as opportunities
arise.</li>
<li>Many things are dealt with at once and interruptions are accepted.</li>
<li>The focus is on adaptability, and flexibility is valued over organization.</li>
</ul></li>
</ul>
<p>Living in Germany, I regularly see two different kinds of linear planning
extremes:</p>
<ul>
<li>Planning everything down to the smallest detail.</li>
<li>Sticking to a plan no matter what, even if the circumstances that led to
this plan, changed.</li>
</ul>
<p>Planning has advantages, but flexibility has advantages (hello lean and
scrum), too, and different cultures picked their favorite.
It seems that the political history of countries has affected the planning
mentality of their citizens.</p>
<p>This chapter puts some effort into giving tips on how to combine both in
multicultural companies.</p>
<h3 id="arent-stereotypes-racist">Aren’t Stereotypes Racist?</h3>
<p>For some, the book may trigger the question, of whether books like this may
propagate a school of thought that facilitates box-thinking or even racism.
Erin addresses these worries in the introductory chapter:</p>
<blockquote>
<p>After I published an online article on the differences among Asian cultures
[…], one reader commented, “Speaking of cultural differences leads us to
stereotype and therefore put individuals in boxes with ‘general traits’.
Instead of talking about culture, it is important to judge people as
individuals, not just products of their environment.”</p>
</blockquote>
<p>This is indeed a good point, but her answer puts it in a great perspective:</p>
<blockquote>
<p>If you go into every interaction assuming that culture doesn’t matter, your
default mechanism will be to view others through <em>your</em> cultural lens
and to judge or misjudge them accordingly.</p>
</blockquote>
<h2 id="summary">Summary</h2>
<p>As so often with books about culture and psychology, there are no big surprises
in it, or nothing <em>completely</em> new.
The value I took out of this book is that it puts everything in a structured
perspective that I would not have come up with myself.
After reading through it, I felt inspired and empowered on how to deal with
cultural differences in the future, and get more out of intercultural
collaboration!</p>
<p>Apart from cultural differences, many people within the same/your country
show different traits that can be found on the presented scales, too.
It helps make sense of behavior that could otherwise be considered
strange.
It is easier to show empathy when you understand where people are coming from.</p>
<p>I declare this book a must-read for every (not only) software engineer
professional who works internationally.</p>]]></summary>
</entry>
<entry>
    <title>Book Review: A Philosophy of Software Design</title>
    <link href="https://blog.galowicz.de/2022/12/05/book-review-a-philosophy-of-software-design" />
    <id>https://blog.galowicz.de/2022/12/05/book-review-a-philosophy-of-software-design</id>
    <published>2022-12-05T00:00:00Z</published>
    <updated>2022-12-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>What separates the truly great software developers from the average ones?
People have lots of opinions about this, but it’s often hard to describe what
makes the code of a great engineer so good - and what part of it novice
programmers should really try to learn from.
John Ousterhout’s book <a href="https://amzn.to/3B8ufgM">A philosophy of Software Design</a>
aims to answer this question and actually introduces some extraordinarily
appropriate vocabulary for <em>your</em> next discussion about software quality.</p>
<!--more-->
<div class="book-cover">
<figure>
<img src="/images/books/a-philosophy-of-software-design.png" alt="Book Cover of “A Philosophy of Software Design”" />
<figcaption aria-hidden="true">Book Cover of “A Philosophy of Software Design”</figcaption>
</figure>
</div>
<h2 id="book-author">Book &amp; Author</h2>
<p><a href="https://amzn.to/3B8ufgM">Link to the Amazon Store Page</a></p>
<p>The book is originally from 2018 and its second edition was released in 2021.
It it ~180 pages, so it should be a very quick read.</p>
<p><a href="https://en.wikipedia.org/wiki/John_Ousterhout">John Ousterhout</a> is a computer
science professor for computer science at <a href="https://web.stanford.edu/~ouster">Stanford</a>
who has worked on all kinds of software related topics, but also spent a lot of
time teaching how to <em>design</em> software in general - or more precisely, looking
at the design itself of software as the underlying challenge.</p>
<p>In his university lectures, as he also describes in this book, he lets his
students exercise the design of different kinds of software solutions for small
systems.
While doing that, he tried to find ways to explain the pitfalls that novice
programmers fall into, and what exactly experienced programmers do differently
so that the software they create not only works, but stays maintainable.</p>
<p>The experiences and insights he describes, were not new to me.
Most of the time I thought “Yeah I know this situation, and it’s also clear to
me how to do it differently - but the problem is always <em>explaining</em> it to
programmers who don’t think this way (yet)!”
But for all the principles and strategies that experienced developers follow
with their gut-feel that they developed over time, John found awesome vocabulary
and ways to explain them to programmers who don’t know them yet.</p>
<h2 id="content-and-structure">Content and Structure</h2>
<p>I experienced the book like a journey over two main topics, which shall get
their own subsection each.
As the book is already relatively short and every programmer should read it
anyway, I won’t go much into detail and instead just state the most important
points and principles.</p>
<h3 id="symptoms-and-causes-of-complexity-abstraction-modules-and-interfaces">Symptoms and Causes of Complexity, Abstraction, Modules, and Interfaces</h3>
<p>The preface of the book begins with an observation that is frustratingly apt:</p>
<blockquote>
<p>People have been writing programs for electronic computers for more than 80
years, but there has been surprisingly little conversation about how to design
those programs or what good programs should look like.</p>
</blockquote>
<p>Apart from all the computer languages with their different specialties,
agile or non-agile development methodologies, tooling as debuggers, linters,
version control systems, and techniques such as object-oriented/functional
programs, schools, universities and developers’ book shelves typically lack
material about how software should generally be <em>designed</em>.</p>
<p>The average developer just changes their code until the tooling stops emitting
errors/warnings and the code actually does what it is written for.
In some cases, the rules from <em>clean code</em> literature are over-applied,
resulting in short but entangled code.
While doing that, the program’s complexity increases.
Complexity is like a currency of programming: For more features, you give up
your program’s initial simplicity.
This typically ends in programs of huge complexity that cannot be maintained
easily any longer.</p>
<p>Complexity never comes with big leaps but always with a stepwise increase.
The three main <strong>symptoms</strong> of complexity are:</p>
<dl>
<dt>Change Amplification</dt>
<dd>
<p>Seemingly simple changes require modifications in many different places.</p>
</dd>
<dt>Cognitive Load</dt>
<dd>
<p>The amount of project-knowledge that a developer needs to know in order to
complete a task.</p>
</dd>
<dt>Unknown Unknowns</dt>
<dd>
<p>It is not obvious which pieces of code must be modified to complete a task.</p>
</dd>
</dl>
<p>The two main <strong>causes</strong> of complexity are:</p>
<dl>
<dt>Dependencies</dt>
<dd>
<p>A dependency exists when a given piece of code cannot be understood and
modified in isolation. They can’t be eliminated, but designed carefully.
(This is a definition for the discussions in the book.
Software dependencies like installable libraries mean something different.)</p>
</dd>
<dt>Obscurity</dt>
<dd>
<p>Obscurity occurs when important information is not obvious.</p>
</dd>
</dl>
<p>In order to keep complexity under control (i.e. to reach sustainable tradeoffs)
developers need the right mindset.
John distinguishes between two of them:</p>
<dl>
<dt>Tactical Programmers</dt>
<dd>
<p>The main focus of the tactical programmer is to <em>get something working</em>, such
as new features or bug fixes.</p>
</dd>
<dt>Strategic Programmers</dt>
<dd>
<p>The strategic programmer does not think of “working code” as their primary
goal (although accepting that delivered code must always be working).
Their primary goal is a <em>great design</em>.</p>
</dd>
</dl>
<p>Most real companies’ work culture and deadline pressure facilitates the rise of
tactical programmers (also called <em>tactical tornados</em>), which typically write
code with uncontrollable complexity.
Strategical programming requires an <strong>investment mindset</strong> for trading initial
upfront slowdown against long-term improvements.
The fight against continuously increasing complexity is fought with continuous
investments.
Discussions between strategic and tactical programmers are often frustrating.</p>
<p>The next topic is the organization of code into modules (as in classes,
subsystems, or services) that communicate via interfaces.
Modules encapsulate the complexity of systems into domain-specific units.
John coins terms for two different qualities of modules:</p>
<dl>
<dt>Deep Modules</dt>
<dd>
<p>The best modules provide powerful functionality over simple interfaces.
They provide good abstraction by providing complex functionality but only
exposing a small fraction of their internal complexity.
One example are the five basic system calls for I/O in UNIX operating systems.</p>
</dd>
<dt>Shallow Modules</dt>
<dd>
<p>In contrast to deep modules, shallow ones have relatively complex interfaces,
compared to the functionality they provide.
Many shallow interfaces do not even provide much keystroke saving when used,
compared to their reimplementation.</p>
</dd>
</dl>
<p>Shallow modules are often a result of <em>classitis</em>.
Students at university, or readers of <em>clean code</em> lecture are often advised to
break code into small units.
If this advise is followed without much strategy, it often results in shallow
modules which are not much more than leaking abstractions.</p>
<p>Another interesting word that John introduces in this context is <em>temporal
decomposition</em>:
Developers often structure code modules according to the order
in which operations occur.
This does often lead to code that shares knowledge, but at different places in
the code, leading to change amplification, higher cognitive load, and unknown
unknowns again.</p>
<p>A good rule of thumb in module design that John comes up with is:</p>
<blockquote>
<p>It is more important for a module to have a simple interface than a simple
implementation.</p>
</blockquote>
<p>If a module ends up being too complex, but its interface is very simple, then
this means that it can easily be substituted by a better one.
Also, changes on such a module do not increase change amplification.</p>
<p>Another great principle is to <em>define errors out of existence</em>:
John argues that error handling and exceptions make programs much more complex,
and a good way to reduce such complexity is representing data, interfaces, and
semantics in ways that make it impossible to encode erratic cases that need
special handling.</p>
<h3 id="how-to-write-code">How to Write Code</h3>
<p>The second half is about the act of designing and writing code.
John argues that interfaces and modules should be designed twice:
Implementing a design for the first time often exposes new insights that would
lead to a different design in a second approach.
I myself often designed things not only twice but tried three or four different
approaches, in order to come up with the one that leads to the best result.
It’s a game changer for complexity.</p>
<p>Working hard on the first design attempt, just to throw it away because it was
just a vehicle for learning how to do it right:
This is clearly not the mindset of the average programmer.
At first glance, it also looks like it would waste a lot of time, especially
from the point of view of a tactical programmer.</p>
<p>The next chapters are about comments, naming, modifying existing code,
consistency (of style/documentation/etc. across the project), performance,
and contain a lot of fine-grained advise that should not be unknown to the
working programmer.
Because it can’t be summarized by few principles, i will just drop some
interesting highlights:
(These read like rules, but they are not and should never be over-applied in a
dogmatic fashion)</p>
<ul>
<li>If an interface <em>comment</em> describes its implementation, it indicates that
the interface is shallow.</li>
<li>If a variable or type <em>name</em> is inherently <em>hard to pick</em>, it indicates a
bad abstraction.</li>
<li>When <em>modifying</em> code:
<ul>
<li>After each change, the system should have the structure that it would have
if you had designed it from the start with that change in mind.</li>
<li>If you’re not making the design better, you are probably making it worse.</li>
</ul></li>
<li>Software should be designed for <em>ease of reading</em>, not ease of writing.</li>
<li>Test-driven development focuses attention on getting specific features
working, rather than finding the best design.
In other words, it facilitates tactical work more than strategic work.</li>
</ul>
<p>John summarizes in his book’s conclusion:</p>
<blockquote>
<p>The reward for being a good designer is that you get to spend a larger
fraction of your time in the design phase, which is fun.
Poor designers spend most of their time chasing bugs in complicated and
brittle code.</p>
</blockquote>
<h2 id="summary">Summary</h2>
<p>I really enjoyed this book because it gave me an effective new vocabulary in the
epic fight against complexity, which is often more social than technical when
arguing with tactical programmers.</p>
<p>Read it - as early as possible - in your developer career.</p>]]></summary>
</entry>
<entry>
    <title>NixOS Community Oceansprint late 2022 Report</title>
    <link href="https://blog.galowicz.de/2022/11/26/nix-community-oceansprint3-report" />
    <id>https://blog.galowicz.de/2022/11/26/nix-community-oceansprint3-report</id>
    <published>2022-11-26T00:00:00Z</published>
    <updated>2022-11-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!--
  cSpell:words Domen Kozar Neyts Zupan Raito Bezarius Niklas Sturm Noogle
  cSpell:words Florian Friesdorf Lanzarote Kirschbauer strandings kiosko
  cSpell:words Stecklina lanzaboote Hauer
-->
<p>This is my trip report from the late 2022 Oceansprint hackathon on Lanzarote.
For more information please also have a look on the website:
<a href="https://oceansprint.org">https://oceansprint.org</a></p>
<!--more-->
<h1 id="oceansprint">Oceansprint</h1>
<p><a href="https://oceansprint.org">Oceansprint</a> is a regular hackathon event in the
NixOS community (i wrote a bit about the community and event location
<a href="/2021/12/12/nix-community-oceansprint-report">in the last article</a>)
that is planned to happen twice a year.
From 21.11. to 25.11.2022 it happened for the third time.
This time we were roughly ~20 participants.</p>
<p>After i was at the first oceansprint, skipped the second, and participated in
the third one again, i have experienced quite an increment in the overall
event’s quality and the group activities.
Big kudos to Neyts Zupan, Domen Kozar and Florian Friesdorf for the great
organization!</p>
<figure>
<img src="/images/2021-12-oceansprint-location.jpg" alt="The Oceansprint location" />
<figcaption aria-hidden="true">The Oceansprint location</figcaption>
</figure>
<h1 id="socializing">Socializing</h1>
<p>During the hacking sessions over the day, we all typically sat in groups based
on who worked together on something.
At breakfast and lunch there was typically some random regrouping involved,
and over the day there were also many sporadic discussions at the coffee
machine.
This, combined with the fact that 99% of the time everyone was disciplined in
speaking english, it was very nice to catch some interesting insights in
random topics when walking by.</p>
<figure>
<img src="/images/2022-oceansprint3-buffet.jpg" alt="The catering Original Tweet" />
<figcaption aria-hidden="true">The catering <a href="https://twitter.com/nzupan/status/1594653961419644932">Original Tweet</a></figcaption>
</figure>
<p>Events that really lifted the interaction to a more fun level away from just
work-related discussions were the big grill party and the catamaran sailing
event (there was also wind surfing and hiking), as well as the regular
strandings at the cocktail bar “el kiosko”.
We even went into the sauna together that Domen has on his balcony.
This way it was possible to get to talk to <em>everyone</em> in more detail over the
week without any hassle and simply having a great time.</p>
<h1 id="sprint-projects">Sprint Projects</h1>
<p>I will only describe the topics where i either participated or that i followed
more closely out of personal interest.
There were many more projects, and i am pretty sure they are covered by other
blog articles.</p>
<h2 id="secure-boot-on-nixos">Secure Boot on NixOS</h2>
<p><a href="https://twitter.com/blitzclone">Julian Stecklina</a> (works at <a href="https://cyberus-technology.de/">Cyberus
Technology</a>), Niklas Sturm (works at
<a href="https://www.secunet.com/">Secunet</a>), and
<a href="https://twitter.com/Ra1t0_Bezar1us">Raito Bezarius</a> worked together to support
Secure Boot on NixOS.
They were very successful this week: We have seen laptops booting with activated
Secureboot and the Gnome Device Security dialogue displaying a green
Secureboot entry:</p>
<figure>
<img src="/images/2022-oceansprint3-secureboot.png" alt="Activated Secureboot on NixOS Original Tweet" />
<figcaption aria-hidden="true">Activated Secureboot on NixOS <a href="https://twitter.com/blitzclone/status/1596108176914493440">Original Tweet</a></figcaption>
</figure>
<p>There is already a pull request on github that introduces this work for at least
developer setups.
For secure and easy production use, some work on key management etc. is still
left to be done.
See the code and more details on github:
<a href="https://github.com/blitz/lanzaboote">github.com/blitz/lanzaboote</a></p>
<p>Multiple aspects of this make this project remarkable:</p>
<ul>
<li>Niklas and Julian did not know Raito before. The collaboration was a
spontaneous result of talking about their project plans on the first evening.</li>
<li>On every ocean sprint so far, we sent different Cyberus co-workers, and this
is the first sprint with Secunet co-workers. So far, every co-worker who
returned learned about new ways how to use nix and NixOS productively for both
personal profit and also company goals.</li>
<li>Both companies Cyberus Technology and Secunet are working with or evaluating
NixOS internally. Getting Secureboot working in NixOS is an important mile
stone.</li>
<li>This is a great example of how the sponsorship money of both companies, which
initially was a donation to support events of this kind, also turned out to be
an investment with immediate return.</li>
</ul>
<h2 id="dream2nix-enhancements">Dream2nix enhancements</h2>
<p><a href="https://github.com/hsjobeki">Johannes Kirschbauer</a> and
<a href="https://github.com/davhau">David Hauer</a> worked together on improving the
<a href="https://nix-community.github.io/dream2nix/">dream2nix</a> project.</p>
<p>From my perspective this is another remarkable collaboration between open source
maintainers and companies, as Johannes aims to push nix for frontend/UI projects
at secunet.
The Oceansprint has been the perfect chance to talk to David about how to get
the most value out of this for all parties over a beer in person.</p>
<h2 id="noogle">Noogle</h2>
<p>Another thing that Johannes and David came up with, is Noogle:
A search machine for nix and nixpkgs library functions.</p>
<figure>
<img src="/images/2022-oceansprint3-noogle.jpg" alt="Noogle Alpha Original Tweet" />
<figcaption aria-hidden="true">Noogle Alpha <a href="https://twitter.com/domenkozar/status/1596168388195545088">Original Tweet</a></figcaption>
</figure>
<p>All Haskellers immediately cheered for this as this is like
<a href="https://hoogle.haskell.org/">hoogle</a>, a great tool for finding the right
function in all available packages.</p>
<h1 id="sponsors">Sponsors</h1>
<p>The sponsors are a very important topic, as such events would not be possible
without them.</p>
<figure>
<img src="/images/2022-oceansprint3-shirt.jpg" alt="The sponsored Oceansprint Shirt Original Tweet" />
<figcaption aria-hidden="true">The sponsored Oceansprint Shirt <a href="https://twitter.com/domenkozar/status/1595004457653309440">Original Tweet</a></figcaption>
</figure>
<p>As one of the founders of Cyberus, i was interested in the company growing
into the Nix(OS) open source community, hence it was natural to become a sponsor
of this event.
In addition to that, i put some effort into convincing secunet to sponsor the
oceansprint, too, as we do work together with this awesome technology and they
are also interested having their colleagues to grow into the community.</p>
<p>After having spoken with the organizers <a href="https://twitter.com/nzupan">Neyts</a> and
<a href="https://twitter.com/domenkozar">Domen</a> at the
<a href="https://2022.nixcon.org/">NixCon 2022 in Paris</a> about the topic of sponsoring,
i learned that they found it easier to motivate small businesses to participate
in sponsoring than the very big ones.</p>
<p>It seems like the pressure to be able to explain the value proposition of a
sponsoring is bigger for large company management.
So far i personally see the following reasons why companies should
sponsor/invest in conferences and hackathons like this:</p>
<ul>
<li>Sponsoring is a good way to reserve seats for your employees at such events.
While attending, they will extend their network and as soon as some open
source library or tool has a problem that needs to be fixed, discussing how
to fix it quickly will be just a phone call with the maintainer away.
I experienced the profit of such short communication channels at work very
often already.</li>
<li>The exposure to long-year community members helps a lot understanding the
used technology better. Especially less experienced colleagues come back with
a lot of enlightenment, which is why we try to send different colleagues every
time.</li>
<li>Having your own employees hack together on things with people that are not on
your payroll is a very efficient way to get work done for all participating
sides.</li>
<li>Events like this in the sun with great social activities are a great way to
support the efforts of your most motivated co-workers. The overall motivation
at such events is infectious.</li>
<li>Most big companies use lots and lots of open source technology.
Often, employees do not get enough time due to project constraints, or are
legally not allowed to share code back.
Sponsoring such events is a great way to give back.</li>
</ul>]]></summary>
</entry>
<entry>
    <title>Filtering Unique Items from Heterogeneous Lists at Compile Time</title>
    <link href="https://blog.galowicz.de/2022/03/20/unique-heterogeneous-typelists" />
    <id>https://blog.galowicz.de/2022/03/20/unique-heterogeneous-typelists</id>
    <published>2022-03-20T00:00:00Z</published>
    <updated>2022-03-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!-- cSpell:words Hengchu Zhang Maguire Lemmer HList -->
<!-- cSpell:ignore ababca dontCare -->
<p>This article is about how to filter unique items from heterogeneous lists on
the type level in Haskell.
This example, without further context, might look a bit esoteric by itself,
but I learned a lot writing it and wanted to share the experience.</p>
<!--more-->
<p>In the last years I’ve been programming more in Haskell than in C++.
I find Haskell is super fascinating because of its mighty type system.
C++ already makes it possible to lift a lot of computation from compile time to run time (using <code>constexpr</code> and template meta programming) with the positive effect of resulting in less code in your binaries.
Less code in your binaries is great, because this means a <a href="https://en.wikipedia.org/wiki/Shift-left_testing">“shift left”</a> of bug potential on the time axis from run time to compile time.
Now Haskell makes this much more interesting because its type system is much more intelligent than the one of C++ or comparable languages.
There are many libraries that show off what’s possible.
My current favorite example because I have been using it a lot is the <a href="https://docs.servant.dev"><code>servant</code></a> library.</p>
<p>I found learning C++ template meta programming very hard in the beginning because it’s completely different than <em>normal</em> programming. But once you get there, it’s really enlightening and helps in cleaner thinking about and designing of what your programs are actually supposed to do.
Trying to do the same things and even more in Haskell, I found the following books and blog articles extremely helpful:</p>
<ul>
<li>Book: <a href="https://leanpub.com/thinking-with-types"><strong>“Thinking with Types”</strong> by Sandy Maguire</a></li>
<li>Book: <a href="https://www.packtpub.com/product/haskell-design-patterns/9781783988723"><strong>“Haskell Design Patterns”</strong> by Ryan Lemmer</a></li>
<li>Blog: <a href="https://hengchu.github.io/posts/2018-05-09-type-lists-and-type-classes.lhs.html"><strong>“Taming Heterogeneous Lists in Haskell”</strong> by Hengchu Zhang</a></li>
</ul>
<p>However, after getting some inspiration what fascinating things some libraries do at the type level, I wanted to give it a try myself and came up with some private hobby challenge that I wanted to try myself.
While trying to hack on the type level, I found the available books and blogs super helpful.
But as so often the case, books/articles often tend to explain the simple things simple, then switch to much more complicated examples, but there is quite some gap between the simple and the (maybe too) advanced examples.
I got lost there unfortunately and came up with a solution to a sub-problem of my hobby challenge that I wanted to share to fill up that gap.</p>
<p>This blog article shows how to:</p>
<ul>
<li>Define a heterogeneous list and print it (looks exactly as known from books/articles)</li>
<li>How to reverse such lists</li>
<li>How to filter out unique type items from them
<ul>
<li>both at type-level and run time because we need both</li>
</ul></li>
</ul>
<p>Let’s start with some includes and GHC extensions that we need.
The full code of this article is <a href="https://gist.github.com/tfc/a525ef630abe215d1ec1d3c50609a340">here</a>.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE AllowAmbiguousTypes    #-}</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE DataKinds              #-}</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE FlexibleContexts       #-}</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE FlexibleInstances      #-}</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE FunctionalDependencies #-}</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE GADTs                  #-}</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE PolyKinds              #-}</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE RankNTypes             #-}</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE ScopedTypeVariables    #-}</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE TypeApplications       #-}</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE TypeFamilies           #-}</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE TypeOperators          #-}</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE UndecidableInstances   #-}</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Data.Kind</span>    (<span class="dt">Type</span>)</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">GHC.TypeLits</span> (<span class="dt">ErrorMessage</span> (<span class="dt">Text</span>), <span class="dt">TypeError</span>)</span></code></pre></div>
<h2 id="heterogeneous-lists">Heterogeneous Lists</h2>
<p>First, we need a way to create a way to describe lists of items that have different types (without polymorphy).</p>
<!-- cSpell:disable -->
<p>So let’s create the type <code>HList</code> (as in “<strong>H</strong>eterogeneous <strong>List</strong>”) whose GADT
<!-- cSpell:enable -->
constructors help us constructing a list at compile time:</p>
<!-- cSpell:ignore infixr -->
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">HList</span><span class="ot"> ::</span> [<span class="dt">Type</span>] <span class="ot">-&gt;</span> <span class="dt">Type</span> <span class="kw">where</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">HNil</span><span class="ot"> ::</span> <span class="dt">HList</span> &#39;[]</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ot">  (:#) ::</span> x <span class="ot">-&gt;</span> <span class="dt">HList</span> xs <span class="ot">-&gt;</span> <span class="dt">HList</span> (x &#39;<span class="op">:</span> xs)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">5</span> <span class="op">:#</span></span></code></pre></div>
<p>Creating such a hlist now looks like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">A</span> <span class="ot">=</span> <span class="dt">A</span> <span class="dt">Int</span> <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">B</span> <span class="ot">=</span> <span class="dt">B</span> <span class="dt">Int</span> <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">C</span> <span class="ot">=</span> <span class="dt">C</span> <span class="dt">Int</span> <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>abc <span class="ot">=</span> <span class="dt">A</span> <span class="dv">1</span> <span class="op">:#</span> <span class="dt">B</span> <span class="dv">2</span> <span class="op">:#</span> <span class="dt">C</span> <span class="dv">3</span> <span class="op">:#</span> <span class="dt">HNil</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="op">:</span><span class="kw">type</span> abc</span></code></pre></div>
<!-- cSpell:disable -->
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<p><span class="get-type">abc :: HList ’[A, B, C]</span>
<!-- cSpell:enable --></p>
<p>Although other tutorials and books cover this topic already, let us also create at least the <code>Show</code> instance for our <code>HList</code> in order to be able to print not only their types but also their values:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Show</span> (<span class="dt">HList</span> &#39;[]) <span class="kw">where</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="fu">show</span> <span class="dt">HNil</span> <span class="ot">=</span> <span class="st">&quot;HNil&quot;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> (<span class="dt">Show</span> x, <span class="dt">Show</span> (<span class="dt">HList</span> xs))</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=&gt;</span> <span class="dt">Show</span> (<span class="dt">HList</span> (x &#39;<span class="op">:</span> xs)) <span class="kw">where</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="fu">show</span> (x <span class="op">:#</span> xs) <span class="ot">=</span> <span class="fu">show</span> x <span class="op">++</span> <span class="st">&quot; :# &quot;</span> <span class="op">++</span> <span class="fu">show</span> xs</span></code></pre></div>
<p>The implementation is much simpler than the following stuff, because the return type of <code>show</code> is just <code>String</code> and that is easy to assemble from our list construction.</p>
<p>Let’s try it out:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>abc</span></code></pre></div>
<pre><code>A 1 :# B 2 :# C 3 :# HNil</code></pre>
<p>Fine. Off to the more complicated things now.</p>
<h2 id="reversing-hlists">Reversing HLists</h2>
<p>All the examples on the internet first show how to write functions on HLists:
First, implement a type class and then all the relevant instances for them.
These are usually not too hard to understand and write, because the output type
does not really depend on the inputs - just like our <code>Show</code> instance from
before.</p>
<p>Having understood that, the next thing that I found hard to achieve was <em>reversing</em> a heterogeneous list.
The reason is, that the return type of a reverse function would completely depend on the input:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">aReverserFunction ::</span> <span class="dt">Hlist</span> &#39;[ <span class="dt">A</span>, <span class="dt">B</span>, <span class="dt">C</span> ] <span class="ot">-&gt;</span> <span class="dt">HList</span> &#39;[ <span class="dt">C</span>, <span class="dt">B</span>, <span class="dt">A</span> ]</span></code></pre></div>
<p>But how to express that programmatically? Implementing the type class would be easy, but I would need to programmatically calculate the output type from the input type.
Without knowing the resulting return type in advance, the type class would be of no use.
Afterward, we can implement the type class that uses this calculated type.</p>
<p>A function on the <em>type level</em> that creates a new type from some input type can be implemented in terms of a <em>type family</em>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">Reverse&#39;</span> (<span class="ot">inputList ::</span> [<span class="dt">Type</span>])</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>                     (<span class="ot">accumulator ::</span> [<span class="dt">Type</span>])</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="ot">                     ::</span> [<span class="dt">Type</span>]</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>                     <span class="kw">where</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Reverse&#39;</span> &#39;[] accumulator <span class="ot">=</span> accumulator</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Reverse&#39;</span> (i &#39;<span class="op">:</span> is) accumulator <span class="ot">=</span> <span class="dt">Reverse&#39;</span> is (i &#39;<span class="op">:</span> accumulator)</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Reverse</span> a <span class="ot">=</span> <span class="dt">Reverse&#39;</span> a &#39;[]</span></code></pre></div>
<p>This function takes an input type list and accumulates the reverse of the list, item by item, on the accumulator argument.
As soon as the input list contains no items any longer, the accumulator is returned.</p>
<p>As it would be otherwise uncomfortable to provide the input list <em>and</em> the accumulator, let’s call this type-level function <code>Reverse'</code> and define a type alias <code>Reverse</code> which just accepts the input list and hides the rest of the interface for us.</p>
<p>This works as expected:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="op">:</span>kind<span class="op">!</span> <span class="dt">Reverse</span> &#39;[ <span class="dt">A</span>, <span class="dt">B</span>, <span class="dt">C</span> ]</span></code></pre></div>
<p><span class="get-type">Reverse ‘[ A, B, C ] :: [*]
=’[C, B, A]</span></p>
<p>The type class <code>ReversedHList</code> will provide us a <code>rev'</code> function with just the same interface but at normal function level.
In order to hide this input-and-accumulator interface, we will later define function <code>rev</code> which hides this implementation detail from the user.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">ReversedHList</span> (<span class="ot">inputList ::</span> [<span class="dt">Type</span>])</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>                    (<span class="ot">accumulator ::</span> [<span class="dt">Type</span>])</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>                    (<span class="ot">reversedList ::</span> [<span class="dt">Type</span>])</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">where</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="ot">  rev&#39; ::</span> <span class="dt">HList</span> inputList</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>       <span class="ot">-&gt;</span> <span class="dt">HList</span> accumulator</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>       <span class="ot">-&gt;</span> <span class="dt">HList</span> reversedList</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">ReversedHList</span> &#39;[] a a <span class="kw">where</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>  rev&#39; _ a <span class="ot">=</span> a</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">ReversedHList</span> is (i &#39;<span class="op">:</span> as) rs</span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=&gt;</span> <span class="dt">ReversedHList</span> (i &#39;<span class="op">:</span> is) as rs <span class="kw">where</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>    rev&#39; (i <span class="op">:#</span> is) as <span class="ot">=</span> rev&#39; is (i <span class="op">:#</span> as)</span></code></pre></div>
<p>What’s most interesting here is that <code>reversedList</code> is a type that remains completely unchanged over the instances that are called one after the other.
This is the final return type that needs to be calculated before, and we have not done that, yet.</p>
<p>Our <code>rev</code> function does both hide the accumulator from the user and calculate the result type using our previously implemented <code>Reverse</code> type-level function:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ot">rev ::</span> <span class="kw">forall</span> inputList<span class="op">.</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>       <span class="dt">ReversedHList</span> inputList &#39;[] (<span class="dt">Reverse</span> inputList)</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=&gt;</span> <span class="dt">HList</span> inputList</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="dt">HList</span> (<span class="dt">Reverse</span> inputList)</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>rev i <span class="ot">=</span> rev&#39; <span class="op">@</span>inputList <span class="op">@</span>&#39;[] <span class="op">@</span>(<span class="dt">Reverse</span> inputList) i <span class="dt">HNil</span></span></code></pre></div>
<p>The strange <code>@inputList</code> notation is called <a href="https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/type_applications.html"><em>type application</em></a> and makes it easier to see which instance of function <code>rev'</code> we are calling.
Often enough such hints are not needed (in this specific case the code will compile without), but they also make it easier to read the code due to its explicitness.</p>
<p>That the output type is <code>HList (Reverse inputList)</code> is the simpler part of this function.
But that I have to write down the <code>ReversedHList inputList '[] (Reverse inputList)</code> class constraint is something that I didn’t get for a long time.
If you leave that away, the compiler will give you the following feedback:</p>
<pre><code>&lt;interactive&gt;:3:9: error:
    • No instance for (Rev inputList &#39;[] (Reverse&#39; inputList &#39;[])) arising from a use of ‘rev&#39;’
    • In the expression: rev&#39; @inputList @&#39;[] @(Reverse inputList) i HNil
      In an equation for ‘rev’: rev i = rev&#39; @inputList @&#39;[] @(Reverse inputList) i HNil</code></pre>
<p>I understand this as “Just because you’re using <code>rev'</code> does not mean that I can automatically require the user’s input types to be instances of this class. Please write down this requirement explicitly.”
Thinking about it a bit longer, it does help reading the rest of the code because it explains which type instance it will select first.</p>
<p>After all, the function works just as expected:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="op">:</span><span class="kw">type</span> rev abc</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>rev abc</span></code></pre></div>
<p><span class="get-type">rev abc :: HList ’[C, B, A]</span></p>
<pre><code>C 3 :# B 2 :# A 1 :# HNil</code></pre>
<p>Thanks to the <code>Show</code> instance we can nicely inspect our reversed list both at the type- and value-level.</p>
<p>Now, let’s look at the next challenge.</p>
<h2 id="type-level-helper-functions">Type-Level Helper Functions</h2>
<p>In the end we are going to remove duplicate types from heterogeneous lists, but before we arrive there we need to implement some helper functions.</p>
<p>The first helper type-level function tells us if a list already contains some type:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">Contains</span> (<span class="ot">inputList ::</span> [<span class="dt">Type</span>]) (<span class="ot">inputType ::</span> <span class="dt">Type</span>)<span class="ot"> ::</span> <span class="dt">Bool</span> <span class="kw">where</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- head of the list equals the input type</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Contains</span> (x &#39;<span class="op">:</span> _) x <span class="ot">=</span> <span class="dt">&#39;True</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- recursion terminator: list didn&#39;t contain it</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Contains</span> &#39;[] _ <span class="ot">=</span> <span class="dt">&#39;False</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- current head does not equal the input type, so recurse to the next one</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Contains</span> (_ &#39;<span class="op">:</span> xs) x <span class="ot">=</span> <span class="dt">Contains</span> xs x</span></code></pre></div>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="op">:</span>kind<span class="op">!</span> <span class="dt">Contains</span> &#39;[<span class="dt">A</span>, <span class="dt">B</span>, <span class="dt">C</span>] <span class="dt">A</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="op">:</span>kind<span class="op">!</span> <span class="dt">Contains</span> &#39;[<span class="dt">B</span>, <span class="dt">C</span>] <span class="dt">A</span></span></code></pre></div>
<p><span class="get-type">Contains ’[A, B, C] A :: Bool
= ’True</span></p>
<p><span class="get-type">Contains ’[B, C] A :: Bool
= ’False</span></p>
<p>This works great.</p>
<p>The next helper that we are going to need later is a type-level if function.
It accepts a bool value on the type-level, and two types of which one is returned back, depending on the boolean condition input:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">If</span> (<span class="ot">condition ::</span> <span class="dt">Bool</span>) (<span class="ot">thenCase ::</span> k) (<span class="ot">elseCase ::</span> k)<span class="ot"> ::</span> k <span class="kw">where</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">If</span> <span class="dt">&#39;True</span>  a _ <span class="ot">=</span> a</span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">If</span> <span class="dt">&#39;False</span> _ b <span class="ot">=</span> b</span></code></pre></div>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="op">:</span>kind<span class="op">!</span> <span class="dt">If</span> <span class="dt">&#39;True</span>  <span class="dt">A</span> <span class="dt">B</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="op">:</span>kind<span class="op">!</span> <span class="dt">If</span> <span class="dt">&#39;False</span> <span class="dt">A</span> <span class="dt">B</span></span></code></pre></div>
<p><span class='get-type'>If ’True A B :: *
= A</span></p>
<p><span class='get-type'>If ’False A B :: *
= B</span></p>
<h2 id="filtering-only-unique-items-from-a-list">Filtering Only Unique Items from a List</h2>
<p>The type-level function that immediately puts to use our new <code>Contains</code> and <code>If</code> function shall recursively traverse through an input list and return an output list that only contains the unique types of the input list:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">Uniques</span> (<span class="ot">xs ::</span> [<span class="dt">Type</span>])<span class="ot"> ::</span> [<span class="dt">Type</span>] <span class="kw">where</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Uniques</span> (x &#39;<span class="op">:</span> xs) <span class="ot">=</span> <span class="dt">If</span> (<span class="dt">Contains</span> xs x) (<span class="dt">Uniques</span> xs) (x &#39;<span class="op">:</span> <span class="dt">Uniques</span> xs)</span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Uniques</span> &#39;[] <span class="ot">=</span> &#39;[]</span></code></pre></div>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="op">:</span>kind<span class="op">!</span> <span class="dt">Uniques</span> &#39;[<span class="dt">A</span>, <span class="dt">B</span>, <span class="dt">A</span>, <span class="dt">C</span>]</span></code></pre></div>
<p><span class="get-type">Uniques ‘[A, B, A, C] :: [*]
=’[B, A, C]</span></p>
<p>A helper that is going to be handy in the following is the type-level function <code>ContainsHead</code>:
It accepts two type lists as arguments and tests if the first list contains the head element of the second list.</p>
<p>We are later feeding this function into a type class parameter that then helps us selecting the right type class.
In the special case that the second list is <em>empty</em>, we return a comprehensible error message.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">ContainsHead</span> (<span class="ot">listToCheckAgainst ::</span> [<span class="dt">Type</span>])</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>                         (<span class="ot">listToCheck ::</span> [<span class="dt">Type</span>])</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="ot">                         ::</span> <span class="dt">Bool</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>                         <span class="kw">where</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">ContainsHead</span> as (b &#39;<span class="op">:</span> bs) <span class="ot">=</span> <span class="dt">Contains</span> as b</span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">ContainsHead</span> _ &#39;[] <span class="ot">=</span></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a>      <span class="dt">TypeError</span> (<span class="dt">&#39;Text</span> <span class="st">&quot;ContainsHead can&#39;t take off the head of an empty list&quot;</span>)</span></code></pre></div>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="op">:</span>kind<span class="op">!</span> <span class="dt">ContainsHead</span> &#39;[ <span class="dt">A</span>, <span class="dt">B</span>, <span class="dt">C</span> ] &#39;[ <span class="dt">B</span>, <span class="dt">C</span> ]</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="op">:</span>kind<span class="op">!</span> <span class="dt">ContainsHead</span> &#39;[ <span class="dt">A</span> ] &#39;[ <span class="dt">B</span>, <span class="dt">C</span> ]</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="op">:</span>kind<span class="op">!</span> <span class="dt">ContainsHead</span> &#39;[ <span class="dt">A</span>, <span class="dt">B</span>, <span class="dt">C</span> ] &#39;[ ]</span></code></pre></div>
<p><span class="get-type">ContainsHead ‘[ A, B, C ]’[ B, C ] :: Bool
= ’True</span></p>
<p><span class="get-type">ContainsHead ‘[ A ]’[ B, C ] :: Bool
= ’False</span></p>
<p><span class="get-type">ContainsHead ‘[ A, B, C ]’[ ] :: Bool
= (TypeError …)</span></p>
<p>Now we get to the part that turned out to look really complicated:
The class <code>UniqueHList</code> provides us a function <code>ul'</code> that has a similar accumulator based interface like the reverse function.
A given input list is consumed step by step, and if the current item is already in the accumulator list, we drop it.
Otherwise, we put it into the accumulator.
After fully consuming the input list, we can return the accumulator.
The type <code>uniqueList</code> can be forecasted using our <code>Uniques</code> type-level function. It doesn’t change throughout all the instances ass they call each other and pass it from the first call to the last.</p>
<p>The most interesting addition to this interface is the <code>nextElementIsContainedAlready</code> boolean argument.
As the name suggests, one instance fills it out for the next instance so they can decide what to do with the current input list head item, as we will see in the following.</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">UniqueHList</span> (<span class="ot">inList ::</span> [<span class="dt">Type</span>])</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>                  (<span class="ot">accumulator ::</span> [<span class="dt">Type</span>])</span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a>                  (<span class="ot">uniqueList ::</span> [<span class="dt">Type</span>])</span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a>                  (<span class="ot">nextElementIsContainedAlready ::</span> <span class="dt">Bool</span>)</span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a>                  <span class="kw">where</span></span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a><span class="ot">  ulr&#39; ::</span> <span class="dt">HList</span> inList</span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a>       <span class="ot">-&gt;</span> <span class="dt">HList</span> accumulator</span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a>       <span class="ot">-&gt;</span> <span class="dt">HList</span> uniqueList</span></code></pre></div>
<p>The recursion terminal instance is the one where the input list is empty.
In this case we simply return the accumulator.
It is not interesting what the value of the bool argument is in this special case.</p>
<!-- cSpell:disable -->
<p>I named the class function <code>ulr'</code> as in “<strong>u</strong>nique <strong>l</strong>ist <strong>reversed</strong>”,
<!-- cSpell:enable -->
because due to the accumulator interface of this function, the accumulator will
contain all the items in reversed order when we consumed the input list.
We will turn it around later.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">UniqueHList</span> &#39;[] uniqueList uniqueList dontCare <span class="kw">where</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>  ulr&#39; _ x <span class="ot">=</span> x</span></code></pre></div>
<p>In all of the following instances, I used some very much abbreviated type
variable names:
<!-- cSpell:disable -->
<code>is</code> stands for <strong>i</strong>nput item<strong>s</strong>”, <code>as</code> for “<strong>a</strong>ccumulator item<strong>s</strong>”, and
<code>us</code> for “<strong>u</strong>nique item<strong>s</strong>”.
<!-- cSpell:enable --></p>
<p>The <code>'False</code> value in the <code>nextElementIsContainedAlready</code> argument says that this instance is for the cases where the next input list item is not yet contained by the accumulator.
So by removing it from the input list and prepending it to the accumulator, we do the right thing.</p>
<p>The many type application <code>@</code> things here are a bit noisy, but this time the compiler needs them as a hint.
They basically replicate the class constraint that described what the next instance is.</p>
<p><code>(ContainsHead (i ': as) is)</code> is the next bool value that is put into the next class instance:
The new state of our accumulator will be <code>i ': as</code> in that next instance, so we need to check if the head of the rest of the input list is already contained in that new accumulator.
That is practically the essence of the complicated-looking <code>UniqueHList</code> instance unfolding logic.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">UniqueHList</span> is (i &#39;<span class="op">:</span> as) us (<span class="dt">ContainsHead</span> (i &#39;<span class="op">:</span> as) is)</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=&gt;</span> <span class="dt">UniqueHList</span> (i &#39;<span class="op">:</span> is) as us <span class="dt">&#39;False</span> <span class="kw">where</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>    ulr&#39; (i <span class="op">:#</span> is) as <span class="ot">=</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a>        ulr&#39; <span class="op">@</span>is <span class="op">@</span>(i &#39;<span class="op">:</span> as) <span class="op">@</span>us <span class="op">@</span>(<span class="dt">ContainsHead</span> (i &#39;<span class="op">:</span> as) is) is (i <span class="op">:#</span> as)</span></code></pre></div>
<p>In the cases where the next item from the input list is already contained by the accumulator, we need to drop it and then call the next instance.</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">UniqueHList</span> is as us (<span class="dt">ContainsHead</span> as is)</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=&gt;</span> <span class="dt">UniqueHList</span> (i &#39;<span class="op">:</span> is) as us <span class="dt">&#39;True</span> <span class="kw">where</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a>    ulr&#39; (_ <span class="op">:#</span> is) as <span class="ot">=</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>        ulr&#39; <span class="op">@</span>is <span class="op">@</span>as <span class="op">@</span>us <span class="op">@</span>(<span class="dt">ContainsHead</span> as is) is as</span></code></pre></div>
<p>We can already call it for a quick test:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a>ulr&#39; <span class="op">@</span>&#39;[<span class="dt">A</span>, <span class="dt">B</span>, <span class="dt">A</span>, <span class="dt">C</span>] <span class="op">@</span>&#39;[] <span class="op">@</span>(<span class="dt">Uniques</span> (<span class="dt">Reverse</span> &#39;[<span class="dt">A</span>, <span class="dt">B</span>, <span class="dt">A</span>, <span class="dt">C</span>])) <span class="op">@</span><span class="dt">&#39;False</span> (<span class="dt">A</span> <span class="dv">1</span> <span class="op">:#</span> <span class="dt">B</span> <span class="dv">2</span> <span class="op">:#</span> <span class="dt">A</span> <span class="dv">3</span> <span class="op">:#</span> <span class="dt">C</span> <span class="dv">4</span> <span class="op">:#</span> <span class="dt">HNil</span>) <span class="dt">HNil</span></span></code></pre></div>
<pre><code>C 4 :# B 2 :# A 1 :# HNil</code></pre>
<p>It works, but what struck me was the fact that the output is the unique list of the reverse input list.
I am pretty sure that if I was smarter, I could construct the whole thing to work more intuitively.
After playing around with the implementation trying to make it nicer without nice results, I concluded that this may be a quest for another day.
I was already happy that it works at all, so let’s continue describing the working state.</p>
<p>Building on the working example input, the function <code>ulr</code> hides all the type hints from the user and calls our class function with the right arguments:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="ot">ulr ::</span> <span class="kw">forall</span> inputList<span class="op">.</span></span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a>       <span class="dt">UniqueHList</span> inputList &#39;[] (<span class="dt">Uniques</span> (<span class="dt">Reverse</span> inputList)) <span class="dt">&#39;False</span></span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a>   <span class="ot">=&gt;</span> <span class="dt">HList</span> inputList</span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true" tabindex="-1"></a>   <span class="ot">-&gt;</span> <span class="dt">HList</span> (<span class="dt">Uniques</span> (<span class="dt">Reverse</span> inputList))</span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true" tabindex="-1"></a>ulr x <span class="ot">=</span> ulr&#39; <span class="op">@</span>inputList <span class="op">@</span>&#39;[] <span class="op">@</span>(<span class="dt">Uniques</span> (<span class="dt">Reverse</span> inputList)) <span class="op">@</span><span class="dt">&#39;False</span> x <span class="dt">HNil</span></span></code></pre></div>
<p>As the user would not expect a reversed output list, let’s concatenate our <code>rev</code> function with the new <code>ulr</code> function to provide the expected results.</p>
<p>The implementation is really simple but writing down the types turned out a bit ugly.
It is surely somehow possible to tell the compiler that <code>Reverse (Uniques (Reverse x))</code> is really the same as <code>Uniques x</code>, but at this time I don’t know how to do it.</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="ot">ul ::</span> <span class="kw">forall</span> inputList<span class="op">.</span></span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a>    ( <span class="dt">ReversedHList</span> (<span class="dt">Uniques</span> (<span class="dt">Reverse</span> inputList))</span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a>                    &#39;[]</span>
<span id="cb30-4"><a href="#cb30-4" aria-hidden="true" tabindex="-1"></a>                    (<span class="dt">Reverse</span> (<span class="dt">Uniques</span> (<span class="dt">Reverse</span> inputList)))</span>
<span id="cb30-5"><a href="#cb30-5" aria-hidden="true" tabindex="-1"></a>    , <span class="dt">UniqueHList</span> inputList &#39;[] (<span class="dt">Uniques</span> (<span class="dt">Reverse</span> inputList)) <span class="dt">&#39;False</span></span>
<span id="cb30-6"><a href="#cb30-6" aria-hidden="true" tabindex="-1"></a>    )</span>
<span id="cb30-7"><a href="#cb30-7" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=&gt;</span> <span class="dt">HList</span> inputList</span>
<span id="cb30-8"><a href="#cb30-8" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="dt">HList</span> (<span class="dt">Reverse</span> (<span class="dt">Uniques</span> (<span class="dt">Reverse</span> inputList)))</span>
<span id="cb30-9"><a href="#cb30-9" aria-hidden="true" tabindex="-1"></a>ul <span class="ot">=</span> rev <span class="op">.</span> ulr</span></code></pre></div>
<h2 id="the-moment-of-truth">The Moment of Truth</h2>
<p>That should be it. The moment of truth - does it work?</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a>abc</span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a>ul abc</span></code></pre></div>
<pre><code>A 1 :# B 2 :# C 3 :# HNil
A 1 :# B 2 :# C 3 :# HNil</code></pre>
<p>It doesn’t destroy a list that is already unique. Actually, it doesn’t do anything on a unique list and that’s good.</p>
<p>Let’s roll out a more complicated case:</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a>ababca <span class="ot">=</span> <span class="dt">A</span> <span class="dv">1</span> <span class="op">:#</span> <span class="dt">B</span> <span class="dv">2</span> <span class="op">:#</span> <span class="dt">A</span> <span class="dv">3</span> <span class="op">:#</span> <span class="dt">B</span> <span class="dv">4</span> <span class="op">:#</span> <span class="dt">C</span> <span class="dv">5</span> <span class="op">:#</span> <span class="dt">A</span> <span class="dv">6</span> <span class="op">:#</span> <span class="dt">HNil</span></span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a>ababca</span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true" tabindex="-1"></a>ul ababca</span></code></pre></div>
<pre><code>A 1 :# B 2 :# A 3 :# B 4 :# C 5 :# A 6 :# HNil
A 1 :# B 2 :# C 5 :# HNil</code></pre>
<p>Happiness.</p>
<h2 id="summary">Summary</h2>
<p>This is now a big bunch of special purpose code that reinvents multiple wheels, but it really helped my personal understanding, and I hope it also helps yours.
The next step would be to use libraries which do all of this better, so we don’t need so much code.
There is for example <a href="https://hackage.haskell.org/package/HList"><code>HList</code></a> which is really elegant and is so much more comprehensible once we understand more type-level programming.</p>
<p>I’ve done a type-level programming in C++ before (have a look at the older articles in this blog) and I find it very interesting how similar it really is.
In Haskell, it is more frustrating in the beginning because the kind system is complicated.
As soon as the basic mechanisms are understood, it is nice to see that Haskell’s type system is much more intelligent than C++ templates and there’s much more control over everything.</p>]]></summary>
</entry>
<entry>
    <title>NixOS Community Oceansprint 2021 Report</title>
    <link href="https://blog.galowicz.de/2021/12/12/nix-community-oceansprint-report" />
    <id>https://blog.galowicz.de/2021/12/12/nix-community-oceansprint-report</id>
    <published>2021-12-12T00:00:00Z</published>
    <updated>2021-12-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!-- cSpell:disable -->
<p>This is my trip report from the awesome NixOS community hackathon on Lanzarote.
For more information please also have a look on the website:
<a href="https://oceansprint.org">https://oceansprint.org</a></p>
<!--more-->
<h1 id="the-sprint-announcement">The Sprint announcement</h1>
<p><a href="https://twitter.com/domenkozar/status/1403409126173126664">Domen Kožar</a>
organized a hackathon for the Nix(OS) community on Lanzarote:</p>
<figure>
<img src="/images/2021-12-oceansprint-announcement.png" alt="Oceansprint Announcement on Twitter" />
<figcaption aria-hidden="true">Oceansprint Announcement on Twitter</figcaption>
</figure>
<p>This was totally amazing news for me and i really wanted to participate
immediately.
I realized that i need to be quick because there were only ~15 slots.
Two days later the next announcement said:</p>
<figure>
<img src="/images/2021-12-oceansprint-full.png" alt="The Oceansprint was booked out 2 days later" />
<figcaption aria-hidden="true">The Oceansprint was booked out 2 days later</figcaption>
</figure>
<h1 id="the-nixos-community">The NixOS Community</h1>
<p>There is an open source <a href="https://nixos.org">package manager called (nix)</a>
(which is a ridiculously understated description) and a
<a href="https://nixos.org">GNU/Linux distrubtion called NixOS</a>
that is based on top of nix.
This is all organized in the
<a href="https://github.com/nixos">NixOS github organization</a> and mostly revolves around
the git repository <a href="https://github.com/nixos/nixpkgs">nixpkgs</a> because this is
where most of the value is concentrated because this repository represents the
largest and most current collection of all Linux package distributions out there:</p>
<figure>
<img src="/images/2021-12-repology.png" alt="repology.org graph showing the most vs. the most fresh package collections" />
<figcaption aria-hidden="true">repology.org graph showing the most vs. the most fresh package collections</figcaption>
</figure>
<p>Apart from that, the repository also contains a lot of NixOS module descriptions
that are used to compose a full NixOS system.</p>
<p>A description of all the value that i pull out of this open source project for
myself and my company is worth multiple blog articles alone, so please refer
to their homepage if you like to read more.</p>
<p>It’s an unbelievable project.
If you are interested in contributing to the largest most-current free software
package collection in the world and/or an amazing GNU/Linux distribution on top
of that within a very nice and inclusive community, then this project is
definitely for you.</p>
<h1 id="corona">Corona</h1>
<p>The sprint has been cancelled roughly 2 weeks before its start due to the latest
Corona related warning level increase in Lanzarote/Spain.
Most of the participants travelled to Lanzarote anyway as it was still allowed
to meet in smaller groups.
Luckily, a few days before the sprint the warning level was decreased based on
the latest infection numbers, so we were again able to perform the sprint like
initially planned.</p>
<p>All participants have their vaccination. On monday and thursday everyone tested
themselves under supervision of each other before joining the group.</p>
<h1 id="participants-of-the-sprint">Participants of the sprint</h1>
<p>The participants who showed up over the week were the following ones:</p>
<p>Real name (nickname), Company</p>
<ul>
<li>Amon Stopinšek (<code>am-on</code>), Niteo, https://niteo.co</li>
<li>Andreas Schrägle (<code>ajs124</code>), Helsinki Systems, https://helsinki-systems.de/</li>
<li>Bernardo Meurer Costa (<code>lovesegfault</code>), Google</li>
<li>Dario Bertini (<code>berdario</code>), Google</li>
<li>Domen Kožar (<code>domenkozar</code>), Cachix Founder (Sponsor), https://www.cachix.org</li>
<li>Florian Klink (<code>flokli</code>), Freelancer, https://flokli.de</li>
<li>Jacek Galowicz (<code>tfc</code>/<code>jonge</code>), Cyberus Technology (Sponsor), https://cyberus-technology.de</li>
<li>Janne Heß (<code>dasJ</code>), Helsinki Systems, https://helsinki-systems.de/</li>
<li>Jonas Chevalier (<code>zimbatm</code>), Numtide Founder (Sponsor), https://numtide.com</li>
<li>Marijan Petričević (<code>marijanp</code>), Freelancer, http://epilentio.hr</li>
<li>Nejc Zupan (<code>zupo</code>), Niteo Founder (Sponsor), https://niteo.co</li>
<li>Robert Hensing (<code>roberth</code>), Hercules Founder (Sponsor), https://hercules-ci.com</li>
<li>Vo Minh Thu (<code>noteed</code>), Hypered CTO (Sponsor), https://hypered.io</li>
</ul>
<h1 id="location">Location</h1>
<p>The sprint location was Nejc’s Villa at in Costa Teguise on the Spanish island
Lanzarote.</p>
<figure>
<img src="/images/2021-12-oceansprint-location.jpg" alt="The Oceansprint location" />
<figcaption aria-hidden="true">The Oceansprint location</figcaption>
</figure>
<h1 id="daily-schedule">Daily Schedule</h1>
<p>The official sprint day schedule began at 9:00 and ended at 17:00.
Every day ended with a brief standup meeting where everyone explained what
they achieved/struggled with.</p>
<p>The gold sponsor <a href="https://serokell.io/">Serokell</a> also gave us a brief overview
of job opportunities in a dedicated talk slot.
The sprint found a good balance between giving the sponsors enough attention and
thankfulness but at the same time not distract any efforts.</p>
<h1 id="socializing">Socializing</h1>
<p>Every day we had breakfast and lunch provided in form of a professional buffet.
After every productive day, the whole group went out for dinner, trying out
several local restaurants.
This way we really sticked together the whole week, which facilitated
easy get-to-know and socializing a lot:
The atmosphere was nice and relaxed!</p>
<p>During the work phases inbetween, everyone either worked alone or in teams
depending on their projects. While the great location allowed for sitting
outside around the big table, near the pool, on the balcony or inside the living
room for concentration phases, it was also very easy to sporadically group up
and discuss things. Or to just hang around at the pool and lament together how
hard life in the sun is.</p>
<p>Apart from work and food, Nejc also organized several activities like
swimming/surfing/hiking trips for whoever wanted to participate.
Another group went to surf school together on the weekend.</p>
<h1 id="sprint-projects">Sprint Projects</h1>
<h2 id="nix.dev-ux-enhancements">nix.dev UX enhancements</h2>
<p>Nejc Zupan started to port the tutorials of https://nix.dev from
reStructuredText to Markdown.
The goal of this change is to lower the barrier for external
contributors, as markdown is simpler and better known than reStructuredText.</p>
<p>Another useful effort that he started is to get all code excerpts on the
website automatically tested by the CI. This will avoid frustration for
newcomers who might want to start to use nix for its reproducibility, so they
don’t run into unreproducible tutorials.</p>
<h2 id="nix-casync">nix-casync</h2>
<p>Florian Klink implemented <a href="https://github.com/flokli/nix-casync">nix-casync</a>,
a HTTP binary cache using the casync mechanism internally to efficiently store
NAR files in a deduplicated fashion, and provides an outlook on how to use it to
speed up substitution.</p>
<p>Blog article about this: https://flokli.de/posts/2021-12-10-nix-casync-intro/</p>
<h2 id="nixos-composability-optimizations">NixOS Composability Optimizations</h2>
<p>Robert Hensing, Jonas Chevalier, and Vo Minh Thu experimented with and worked on
how to make NixOS systems smaller and more composable.
There are different reasons for this:</p>
<ul>
<li>Reduction of the nix expression evaluation time of whole system builds</li>
<li>Reduction of overall system size</li>
<li>Composability for better selection of what actually goes into the system,
which is not only interesting for disk/mem usage reasons but also for reducing
the trusted computing base</li>
<li>Another interesting reason is getting towards interpreterless systems, as
inspired by some company needs that Jacek described from some internal
projects that use nix and NixOS</li>
</ul>
<p>There were basically two approaches:</p>
<p>Robert created a
<a href="https://github.com/NixOS/nixpkgs/pull/148456">pull request with a POC</a> that
shows how to whitelist NixOS modules into a system. This is different from the
usual approach because the NixOS function that evaluates a config imports <em>all</em>
the NixOS modules and then lets the user activate/deactivate things at will, but
has a lot of things already activated by default. “Blacklisting” features by
disabling them one by one in order to arrive at a minimal system is very
uncomfortable becasue you end up searching for which nix file enables what.
Some things also cannot be (easily) disabled this way.
Robert’s approach is creating a function that does not work with a default
list of imports. He also added unit tests to facilitate regression-free
maintenance and extension of this effort.</p>
<p>Jonas and Thu experimented with <a href="https://github.com/cleverca22/not-os">not-os</a>,
which is a set of custom NixOS modules that remove systemd and create system
initialization scripts from scratch in order to reach a minimal system.
They resulted in an impressive written overview of what would need to be done
to minimize the system further and even reach systems without interpreters.
(Blog article coming on <a href="https://zimbatm.com/">Jonas’s blog</a>)</p>
<p>Both approaches seem like they could be combined upstream with some amount of
work.</p>
<h2 id="makebinarywrapper">MakeBinaryWrapper</h2>
<p>Pointed at an existing
<a href="https://github.com/NixOS/nixpkgs/pull/124556">pull request from user <code>bergkvist</code></a>
by Robert, Jacek Galowicz stopped participating in the discussion about
minimizing NixOS systems and started helping improving and testing an
application wrapper that is called <code>makeBinaryWrapper</code>.
There is an existing tool called
<a href="https://nixos.org/manual/nixpkgs/stable/#fun-makeWrapper"><code>makeWrapper</code></a>
that can substitute any binary or
script by another script that first manipulates the shell environment in
user-specified form and then calls the original app/script, possibly with
prepended command line arguments.
The binary wrapper builds a tiny C program and compiles it instead of composing
a shellscript. This is interesting for the following reasons:</p>
<ul>
<li>MacOS’s <code>execv</code> system call cannot call scripts, so <code>makeWrapper</code> does not
work there (see more detailed description in the PR)</li>
<li>Binaries can outperform bash</li>
<li>Interpreterless systems must not have <code>makeWrapper</code> wrappers.</li>
</ul>
<p>The wrapper does generally work but must be extended if it is chosen to
completely get rid of the default wrapper on NixOS systems, because some
derivations stretch the wrapper’s capabilities so much that it’s hard to model
the same behavior in simple C programs. This can be changed to the better with
follow-up contributions.</p>
<h2 id="nixos-integration-test-driver-refactoring">NixOS Integration Test Driver Refactoring</h2>
<p>After Jacek’s porting of the NixOS integration test driver from Perl to Python
in 2019 after the NixCon in Brno, this driver implementation
<a href="https://nixos.org/manual/nixos/stable/release-notes.html#sec-release-20.03">became the standard NixOS integration test driver in Nixos 20.03</a>,
and the general interest in using and extending the driver for tests in the
community increased.
The driver code itself is growing in ways that should not happen in unmoderated
fashion, and not without giving it a proper architecture.</p>
<p>As a first step, the driver should be split up in individual files for each
of its functionality domains and put in a real Python package, in order to get
more improvements afterward.</p>
<p>Jacek introduced these ideas as a project idea for the sprint and
Marijan Petričević, Amon Stopinšek, and Vo Minh Thu jumped right into doing
this.</p>
<p>The first PR on this has already been merged:
https://github.com/NixOS/nixpkgs/pull/149329</p>
<h2 id="nixos-integration-tests-on-macos">NixOS Integration Tests on MacOS</h2>
<p>Nejc Zupan, Domen Kožar, and Marijan Petričević started working on the NixOS
integration test driver nix expression in order to enable for running the usual
integration tests with virtual networks of NixOS VMs, but on MacOS.</p>
<h2 id="nix-community-ownership-bootstrapping">Nix Community Ownership Bootstrapping</h2>
<p>Bernardo Meurer Costa pointed out that the Nix(OS) community is currently
organized in a rather anarchistic fashion. This works very well on one hand
in the sense that many contributors maintain and enhance nixpkgs and NixOS
together and at the same time keep it stable and working.</p>
<p>On the other hand, recent problems with bogging down RFCs and in general bigger
decision processes stalling in endless discussions without any resulting
decision, indicate that the governance has potential to improve.</p>
<p>Bernardo studied different voting algorithms and chose which ones to quickly
employ for having a bootstrap voting process.
The process would start with a list of well-known contributors and the sprint
participants to decide who shall be part of an anytial group of leaders who
then are able to bootstrap general decision structures and processes.
It was a pity that Eelco was not here to share his opinions on this, but he
will also be included from the beginning.</p>
<h2 id="cachix-deploy">Cachix Deploy</h2>
<p>Domen Kožar worked on and demonstrated the new cachix deploy feature, which can
be explained as “the hail service on steroids”.
The cachix website will soon show this new feature.</p>
<h2 id="nixpkgs-refactorings">nixpkgs Refactorings</h2>
<p>I don’t have a perfect overview of what was done at the sprint as there were so
many things, but i also remember:</p>
<ul>
<li>Janne: Refactor the switch-to-configuration scripts</li>
<li>Dario: Refactor Linux kernel module builds in nixpkgs</li>
<li>Andreas: Fix the MariaDB derivation and MySQL tests</li>
<li>Bernardo: Remove the perl script that merges Linux kernel configs in favor of
better tooling</li>
<li>Andreas: Substitute stage1 init scripts by proper systemd handling</li>
</ul>]]></summary>
</entry>
<entry>
    <title>Setting up a C++ project environment with nix</title>
    <link href="https://blog.galowicz.de/2019/04/17/tutorial_nix_cpp_setup" />
    <id>https://blog.galowicz.de/2019/04/17/tutorial_nix_cpp_setup</id>
    <published>2019-04-17T00:00:00Z</published>
    <updated>2019-04-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!-- cSpell:disable -->
<p>This article explains how to quickly set up a C++ project environment with
complete toolchain- and dependency management with <code>nix</code>.
<a href="https://nixos.org/nix/"><code>nix</code></a> is a powerful package manager for Linux and
other Unix systems (It is indeed a more powerful alternative to <a href="https://conan.io/"><code>conan</code></a> and <a href="https://www.docker.com/"><code>docker</code></a>) that makes package
management reliable and reproducible.
After setting up the project and playing around with it, we will <strong>parametrize</strong>
the project description in order to automatically build it with different
compilers and dependency library versions (GCC 7 &amp; 8, Clang 7 &amp; 8, lib <code>boost</code>
1.6.6 - 1.6.9, lib <code>poco</code> 1.9.0 &amp; 1.9.1).</p>
<!--more-->
<p>Let’s start with a fresh system where no C++ compiler and no development
libraries are installed.
The only tool that we require to be installed is <code>nix</code> (see the <a href="https://nixos.org/nix/download.html">installation
guide on nixos.org</a> for installation
instructions), because we are going to use it to perform the toolchain and
dependency setup.</p>
<h2 id="creating-a-little-example-c-project">Creating a little example C++ Project</h2>
<p>Let’s write a C++ program with the following dependencies:</p>
<ul>
<li>C++ compiler, of course. That might be GCC or Clang.</li>
<li><code>boost</code> library (<a href="https://www.boost.org" class="uri">https://www.boost.org</a>)</li>
<li><code>poco</code> library (<a href="https://pocoproject.org" class="uri">https://pocoproject.org</a>)</li>
</ul>
<p>For the sake of having a simple example app, the program does nothing more than
printing what compiler it was built with and which versions of <code>boost</code> and
<code>poco</code> it is linked against.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">#include &lt;boost/lexical_cast.hpp&gt;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="co">#include &lt;Poco/Environment.h&gt;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="co">#include &lt;iostream&gt;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="co">#if defined(__clang__)</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="co">#define CC &quot;clang++&quot;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="co">#elif defined (__GNUC__)</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="co">#define CC &quot;g++&quot;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="co">#else</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="co">#define CC &quot;&lt;unknown compiler&gt;&quot;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="co">#endif</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="ex">int</span> main<span class="er">(</span><span class="kw">)</span> <span class="kw">{</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>  <span class="ex">std::cout</span> <span class="op">&lt;&lt; &quot;Hello World!\n&quot;</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="st">    &lt;&lt; &quot;Compiler: &quot; &lt;&lt; CC &lt;&lt; &quot; &quot; &lt;&lt; __VERSION__ &lt;&lt; &#39;\n&#39;</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="st">    &lt;&lt; &quot;Boost: &quot; &lt;&lt; (BOOST_VERSION / 100000) &lt;&lt; &#39;.&#39;</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="st">                 &lt;&lt; (BOOST_VERSION / 100 % 1000) &lt;&lt; &#39;.&#39;</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="st">                 &lt;&lt; (BOOST_VERSION % 100) &lt;&lt; &#39;\n&#39;</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="st">    &lt;&lt; &quot;POCO: &quot; &lt;&lt; (Poco::Environment::libraryVersion() &gt;&gt; 24) &lt;&lt; &#39;.&#39;</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="st">                &lt;&lt; (Poco::Environment::libraryVersion() &gt;&gt; 16 &amp; 0xff) &lt;&lt; &#39;.&#39;</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="st">                &lt;&lt; (Poco::Environment::libraryVersion() &gt;&gt; 8 &amp; 0xff)</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="st">                &lt;&lt; &#39;\n&#39;;</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a><span class="st">}</span></span></code></pre></div>
<p>We can either <em>install</em> a C++ compiler by running <code>nix-env</code> with the
appropriate arguments, or just run a shell that exposes a C++ compiler in its
<code>PATH</code> environment.
Let us not clutter the system’s <code>PATH</code> environment with compilers from the
beginning, because often people would use different compilers for each project
anyway.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">-p</span> gcc</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell:~]$</span> c++ <span class="at">--version</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ex">g++</span> <span class="er">(</span><span class="ex">GCC</span><span class="kw">)</span> <span class="ex">7.4.0</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ex">Copyright</span> <span class="er">(</span><span class="ex">C</span><span class="kw">)</span> <span class="ex">2017</span> Free Software Foundation, Inc.</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="ex">This</span> is free software<span class="kw">;</span> <span class="ex">see</span> the source for copying conditions.  There is NO</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="ex">warranty</span><span class="kw">;</span> <span class="ex">not</span> even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></code></pre></div>
<p>We are now in a shell that includes GCC’s C++ compiler in its <code>PATH</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell:~/src/nix_cmake_example]$</span> echo <span class="va">$PATH</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ex">...:/nix/store/ghzg4kg0sjif58smj2lfm2bdvjwim85y-gcc-wrapper-7.4.0/bin:...</span></span></code></pre></div>
<p>I trimmed the rest of the path list.
What’s important here: The path list is full of paths that begin with
<code>/nix/store/...</code>.
Each of them could be considered what one would call a <em>package</em> on typical
Linux distributions.
We can easily install multiple compilers with different versions, or even
the same version with different sets of patches applied, next to each other
in <code>/nix/store</code> and not have any of them collide during a project’s build,
because <code>nix</code> does simply only map the packages into the current <code>PATH</code> that
are needed.</p>
<blockquote>
<p><code>nix</code> does even more than just exposing packages via the <code>PATH</code> to the
executing shell: For a running build process it does also hide all paths
that are <em>not</em> listed in the dependencies of a package in order to avoid
unknown dependencies lurking into the project.
In order to achieve that, it uses <a href="https://en.wikipedia.org/wiki/Linux_namespaces"><em>namespaces</em></a>, similar to <a href="https://www.docker.com/">Docker</a>.
See also: <a href="https://nixos.wiki/wiki/Nix#Sandboxing">nixos.wiki about <strong>sandboxing</strong></a>, and <a href="https://nixos.org/nix/manual/#conf-sandbox">nix manual: <code>sandbox</code> setting</a></p>
</blockquote>
<p>The full procedure of using <code>nix-shell</code> to setup the environment and building
and running the app looks like this:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">-p</span> gcc boost poco</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> c++ <span class="at">-o</span> main main.cpp <span class="at">-lPocoFoundation</span> <span class="at">-lboost_system</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> ./main</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 7.4.0</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.67.0</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span></code></pre></div>
<blockquote>
<p>Running the compiled binary can of course be done without <code>nix-shell</code>.</p>
</blockquote>
<p>One would typically add a file called <code>default.nix</code> to the project folder:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">with</span> <span class="bu">import</span> &lt;nixpkgs&gt; <span class="op">{};</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>stdenv.mkDerivation <span class="op">{</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;my-app&quot;</span><span class="op">;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">src</span> <span class="op">=</span> <span class="ss">./.</span><span class="op">;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">buildInputs</span> <span class="op">=</span> <span class="op">[</span> boost poco <span class="op">];</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>  <span class="va">buildPhase</span> <span class="op">=</span> <span class="st">&quot;c++ -o main main.cpp -lPocoFoundation -lboost_system&quot;</span><span class="op">;</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>  <span class="va">installPhase</span> <span class="op">=</span> <span class="st">&#39;&#39;</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="st">    mkdir -p $out/bin</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a><span class="st">    cp main $out/bin/</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="st">  &#39;&#39;</span><span class="op">;</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This buys us that we can simply run <code>nix-build</code> to configure, build and package
the project into the nix store with a single command.
Developers would still use <code>nix-shell</code> for incremental builds between source
modifications.
<code>nix-shell</code> does also consult <code>default.nix</code> in order to setup the dependencies
right, so we don’t need the <code>-p</code> parameter list any longer.</p>
<p>Very short overview over the most important lines:</p>
<ul>
<li><code>stdenv</code> is an object in the nix expression language that is imported from
<code>&lt;nixpkgs&gt;</code>. <code>nixpkgs</code> is a globally available nix expression with all the
packages. <code>stdenv</code> contains the compiler and other things needed to compile
projects.</li>
<li><code>buildInputs</code> lists compile time and run time dependencies of the project.</li>
<li><code>buildPhase</code> is a shell hook that describes how to build the program.</li>
<li><code>installPhase</code> describes what files should be copied into the nix store.</li>
</ul>
<p>We’re covering how this works in detail only in minimal depth.
More information about nix derivations:</p>
<ul>
<li><a href="https://nixos.org/nix/manual/#ssec-derivation"><code>nix</code> manual section about derivations</a></li>
<li><a href="https://nixos.wiki/wiki/C" class="uri">https://nixos.wiki/wiki/C</a></li>
</ul>
<blockquote>
<p>It looks like we’re using <code>nix</code> as a build system now - in fact,
<code>mkDerivation</code> is a function that creates a so called “builder script” that
is able to detect if we are using a Makefile based project (with or without
autoconf), a CMake project, or a set of other build systems, and then
executes the right steps according to the build system.
One cool detail is that we would typically not touch <code>CMakeFile</code> or other
files in order to use <code>nix</code> - this way users who do not want to or cannot
use <code>nix</code> are able to use their own tools for dependency management.</p>
<p><code>mkDerivation</code> is a very versatile and complex helper: See the <a href="https://nixos.org/nix/manual/#ssec-derivation"><code>nix</code> manual
section about derivations</a></p>
</blockquote>
<p>In this example we use no build system, hence need to use the <code>buildPhase</code>
hook to define how our little application is compiled and linked.</p>
<p>Someone else who checks out this project and who has installed <code>nix</code> can
now simply run:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-build</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="ex">these</span> derivations will be built:</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/dw9d2r7rykym08fzmdgf6v0ia2sn6hq9-my-app.drv</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="ex">building</span> <span class="st">&#39;/nix/store/dw9d2r7rykym08fzmdgf6v0ia2sn6hq9-my-app.drv&#39;</span>...</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="ex">unpacking</span> sources</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="ex">unpacking</span> source archive /nix/store/8zwsvxdkpjnyxnm9qs33qw3bi12h9gbm-nix_simple</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="bu">source</span> root is nix_simple</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="ex">patching</span> sources</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="ex">configuring</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="ex">no</span> configure script, doing nothing</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="ex">building</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a><span class="ex">installing</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="ex">post-installation</span> fixup</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a><span class="ex">shrinking</span> RPATHs of ELF executables and libraries in /nix/store/5ldpivphfbya4xw6kcss9vcdvp1mzrcf-my-app</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="ex">shrinking</span> /nix/store/5ldpivphfbya4xw6kcss9vcdvp1mzrcf-my-app/bin/main</span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a><span class="fu">strip</span> is /nix/store/0y7jmqnj48ikjh37n3dl9kqw9hnn68nq-binutils-2.31.1/bin/strip</span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="ex">stripping</span> <span class="er">(</span><span class="ex">with</span> command strip and flags <span class="at">-S</span><span class="kw">)</span> <span class="er">in</span> <span class="ex">/nix/store/5ldpivphfbya4xw6kcss9vcdvp1mzrcf-my-app/bin</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a><span class="ex">patching</span> script interpreter paths in /nix/store/5ldpivphfbya4xw6kcss9vcdvp1mzrcf-my-app</span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a><span class="ex">checking</span> for references to /tmp/nix-build-my-app.drv-0/ in /nix/store/5ldpivphfbya4xw6kcss9vcdvp1mzrcf-my-app...</span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/5ldpivphfbya4xw6kcss9vcdvp1mzrcf-my-app</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> ./result/bin/main</span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 7.4.0</span>
<span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.67.0</span>
<span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span></code></pre></div>
<p>The compiler, all libraries etc. are automatically downloaded and put into
action.
Much simpler than with <a href="https://conan.io/">conan</a>!</p>
<p>That is basically it: If the program grows, we will certainly switch
to some build system - <code>nix</code> supports that without having to add nix-specific
stuff into the build files (GNUMake, CMake, meson, etc. are supported.
Have a look into the <a href="https://github.com/NixOS/nixpkgs/tree/master/pkgs/development/tools/build-managers"><code>nixpkgs</code> git repository folder for supported build
systems</a>).
If the number of dependencies grows, be that libraries or compile time tools,
we can simply add them to the nix expression.</p>
<h2 id="building-the-code-with-different-dependency-versions">Building the code with different dependency versions</h2>
<p>The <code>default.nix</code> expression results in one so-called <em>derivation</em> that <code>nix</code>
can materialize into a binary package in the nix storage.
Let us now write another nix expression that takes multiple <code>boost</code> library
versions, multiple <code>poco</code> library versions and multiple compilers, and
that results in a <em>set</em> of derivations that nix can materialize using those.</p>
<p>We will use the following variety of dependency versions:</p>
<ul>
<li>GCC 7 &amp; 8</li>
<li>Clang 7 &amp; 8</li>
<li>lib <code>poco</code> 1.9.0 &amp; 1.9.1</li>
<li>lib <code>boost</code> 1.6.6 - 1.6.9</li>
</ul>
<p>…which results in <span class="math inline">(2+2) * 2 * 4 = 32</span> different binaries.</p>
<p>Quick spoiler: The result of the nix expression that we are going to write
will allow us to build and execute these 32 binaries with a single <code>nix-build release.nix</code> command.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> for path in <span class="va">$(</span><span class="ex">nix-build</span> release.nix<span class="va">)</span><span class="kw">;</span> <span class="cf">do</span> <span class="dt">\</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span>   echo <span class="st">&quot;====&quot;</span><span class="kw">;</span> <span class="dt">\</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span>   echo <span class="st">&quot;Output of </span><span class="va">$path</span><span class="st">/bin/main:&quot;</span><span class="kw">;</span> <span class="dt">\</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span>   <span class="va">$path</span>/bin/main<span class="kw">;</span> <span class="dt">\</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> done</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="co"># trimmed a lot of build output...</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/246an1m3rwwgz58qc8hfwvqh28899ckm-my-app-clang7-poco190-boost166/bin/main:</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 7.0.1 <span class="er">(</span><span class="ex">tags/RELEASE_701/final</span><span class="kw">)</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.66.0</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/cfh1cy03kly9wq6x6dzlza4d9kads6cd-my-app-clang7-poco190-boost167/bin/main:</span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 7.0.1 <span class="er">(</span><span class="ex">tags/RELEASE_701/final</span><span class="kw">)</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.67.0</span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/jjbpj24x4gp2vpn355j0qsy117yrkhrd-my-app-clang7-poco190-boost168/bin/main:</span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 7.0.1 <span class="er">(</span><span class="ex">tags/RELEASE_701/final</span><span class="kw">)</span></span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.68.0</span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-26"><a href="#cb7-26" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/f9fgwzpq9gn85abx9h1zr5c6j3bs4ks2-my-app-clang7-poco190-boost169/bin/main:</span>
<span id="cb7-27"><a href="#cb7-27" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-28"><a href="#cb7-28" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 7.0.1 <span class="er">(</span><span class="ex">tags/RELEASE_701/final</span><span class="kw">)</span></span>
<span id="cb7-29"><a href="#cb7-29" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.69.0</span>
<span id="cb7-30"><a href="#cb7-30" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-31"><a href="#cb7-31" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-32"><a href="#cb7-32" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/1wwff8p5rxjqjkhqifvhy833bl3mf8l3-my-app-clang7-poco191-boost166/bin/main:</span>
<span id="cb7-33"><a href="#cb7-33" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-34"><a href="#cb7-34" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 7.0.1 <span class="er">(</span><span class="ex">tags/RELEASE_701/final</span><span class="kw">)</span></span>
<span id="cb7-35"><a href="#cb7-35" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.66.0</span>
<span id="cb7-36"><a href="#cb7-36" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-37"><a href="#cb7-37" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-38"><a href="#cb7-38" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/3jdv2l0gp3za4q5rj8s4859bpiyscg0m-my-app-clang7-poco191-boost167/bin/main:</span>
<span id="cb7-39"><a href="#cb7-39" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-40"><a href="#cb7-40" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 7.0.1 <span class="er">(</span><span class="ex">tags/RELEASE_701/final</span><span class="kw">)</span></span>
<span id="cb7-41"><a href="#cb7-41" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.67.0</span>
<span id="cb7-42"><a href="#cb7-42" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-43"><a href="#cb7-43" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-44"><a href="#cb7-44" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/fcbypavfzrw8ajngaim7srvn9fylj7b3-my-app-clang7-poco191-boost168/bin/main:</span>
<span id="cb7-45"><a href="#cb7-45" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-46"><a href="#cb7-46" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 7.0.1 <span class="er">(</span><span class="ex">tags/RELEASE_701/final</span><span class="kw">)</span></span>
<span id="cb7-47"><a href="#cb7-47" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.68.0</span>
<span id="cb7-48"><a href="#cb7-48" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-49"><a href="#cb7-49" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-50"><a href="#cb7-50" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/a8d1mwqiay3qx60fzp6m70q89s0mpcwx-my-app-clang7-poco191-boost169/bin/main:</span>
<span id="cb7-51"><a href="#cb7-51" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-52"><a href="#cb7-52" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 7.0.1 <span class="er">(</span><span class="ex">tags/RELEASE_701/final</span><span class="kw">)</span></span>
<span id="cb7-53"><a href="#cb7-53" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.69.0</span>
<span id="cb7-54"><a href="#cb7-54" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-55"><a href="#cb7-55" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-56"><a href="#cb7-56" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/lhxdhmi9ficg9v9mkxv4zz9s4759r5z6-my-app-clang8-poco190-boost166/bin/main:</span>
<span id="cb7-57"><a href="#cb7-57" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-58"><a href="#cb7-58" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 8.0.0 <span class="er">(</span><span class="ex">tags/RELEASE_800/final</span><span class="kw">)</span></span>
<span id="cb7-59"><a href="#cb7-59" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.66.0</span>
<span id="cb7-60"><a href="#cb7-60" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-61"><a href="#cb7-61" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-62"><a href="#cb7-62" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/x4f34gi6p6ipa8lvqx2aj36nzipk2yv1-my-app-clang8-poco190-boost167/bin/main:</span>
<span id="cb7-63"><a href="#cb7-63" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-64"><a href="#cb7-64" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 8.0.0 <span class="er">(</span><span class="ex">tags/RELEASE_800/final</span><span class="kw">)</span></span>
<span id="cb7-65"><a href="#cb7-65" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.67.0</span>
<span id="cb7-66"><a href="#cb7-66" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-67"><a href="#cb7-67" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-68"><a href="#cb7-68" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/dqmy8gmkshi8glg2ldidpclzq2mrqbvw-my-app-clang8-poco190-boost168/bin/main:</span>
<span id="cb7-69"><a href="#cb7-69" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-70"><a href="#cb7-70" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 8.0.0 <span class="er">(</span><span class="ex">tags/RELEASE_800/final</span><span class="kw">)</span></span>
<span id="cb7-71"><a href="#cb7-71" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.68.0</span>
<span id="cb7-72"><a href="#cb7-72" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-73"><a href="#cb7-73" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-74"><a href="#cb7-74" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/s5qw1ff2qbx2aswnlvd7l7d60fdfyr0y-my-app-clang8-poco190-boost169/bin/main:</span>
<span id="cb7-75"><a href="#cb7-75" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-76"><a href="#cb7-76" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 8.0.0 <span class="er">(</span><span class="ex">tags/RELEASE_800/final</span><span class="kw">)</span></span>
<span id="cb7-77"><a href="#cb7-77" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.69.0</span>
<span id="cb7-78"><a href="#cb7-78" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-79"><a href="#cb7-79" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-80"><a href="#cb7-80" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/wf4ygk9lhkmfv98f9g05pndv4a0320j1-my-app-clang8-poco191-boost166/bin/main:</span>
<span id="cb7-81"><a href="#cb7-81" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-82"><a href="#cb7-82" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 8.0.0 <span class="er">(</span><span class="ex">tags/RELEASE_800/final</span><span class="kw">)</span></span>
<span id="cb7-83"><a href="#cb7-83" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.66.0</span>
<span id="cb7-84"><a href="#cb7-84" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-85"><a href="#cb7-85" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-86"><a href="#cb7-86" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/xg34s1bzr2h57hsbj6z0g93mwni7jcgk-my-app-clang8-poco191-boost167/bin/main:</span>
<span id="cb7-87"><a href="#cb7-87" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-88"><a href="#cb7-88" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 8.0.0 <span class="er">(</span><span class="ex">tags/RELEASE_800/final</span><span class="kw">)</span></span>
<span id="cb7-89"><a href="#cb7-89" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.67.0</span>
<span id="cb7-90"><a href="#cb7-90" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-91"><a href="#cb7-91" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-92"><a href="#cb7-92" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/bhjzyxr1wpjnkdr1wm72142l0hlndsnz-my-app-clang8-poco191-boost168/bin/main:</span>
<span id="cb7-93"><a href="#cb7-93" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-94"><a href="#cb7-94" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 8.0.0 <span class="er">(</span><span class="ex">tags/RELEASE_800/final</span><span class="kw">)</span></span>
<span id="cb7-95"><a href="#cb7-95" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.68.0</span>
<span id="cb7-96"><a href="#cb7-96" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-97"><a href="#cb7-97" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-98"><a href="#cb7-98" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/r1nd2gb7r45vpldnbiprdnyg7y29k08f-my-app-clang8-poco191-boost169/bin/main:</span>
<span id="cb7-99"><a href="#cb7-99" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-100"><a href="#cb7-100" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 8.0.0 <span class="er">(</span><span class="ex">tags/RELEASE_800/final</span><span class="kw">)</span></span>
<span id="cb7-101"><a href="#cb7-101" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.69.0</span>
<span id="cb7-102"><a href="#cb7-102" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-103"><a href="#cb7-103" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-104"><a href="#cb7-104" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/3jfbck6mcrgjfpya8p8x293sfkqi0w5b-my-app-gcc7-poco190-boost166/bin/main:</span>
<span id="cb7-105"><a href="#cb7-105" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-106"><a href="#cb7-106" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 7.4.0</span>
<span id="cb7-107"><a href="#cb7-107" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.66.0</span>
<span id="cb7-108"><a href="#cb7-108" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-109"><a href="#cb7-109" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-110"><a href="#cb7-110" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/cvlxdps8k666dgim3xp04xkm4qzbvkby-my-app-gcc7-poco190-boost167/bin/main:</span>
<span id="cb7-111"><a href="#cb7-111" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-112"><a href="#cb7-112" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 7.4.0</span>
<span id="cb7-113"><a href="#cb7-113" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.67.0</span>
<span id="cb7-114"><a href="#cb7-114" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-115"><a href="#cb7-115" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-116"><a href="#cb7-116" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/ipk381rlahkv6wbwccmv7pibwghdbw7c-my-app-gcc7-poco190-boost168/bin/main:</span>
<span id="cb7-117"><a href="#cb7-117" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-118"><a href="#cb7-118" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 7.4.0</span>
<span id="cb7-119"><a href="#cb7-119" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.68.0</span>
<span id="cb7-120"><a href="#cb7-120" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-121"><a href="#cb7-121" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-122"><a href="#cb7-122" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/pl9y9njmyc2ws4i4mgfnhdxxsbrzasj3-my-app-gcc7-poco190-boost169/bin/main:</span>
<span id="cb7-123"><a href="#cb7-123" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-124"><a href="#cb7-124" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 7.4.0</span>
<span id="cb7-125"><a href="#cb7-125" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.69.0</span>
<span id="cb7-126"><a href="#cb7-126" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-127"><a href="#cb7-127" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-128"><a href="#cb7-128" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/svxr6826wm0sx9mm8sgy1v2aq2v1nx2p-my-app-gcc7-poco191-boost166/bin/main:</span>
<span id="cb7-129"><a href="#cb7-129" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-130"><a href="#cb7-130" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 7.4.0</span>
<span id="cb7-131"><a href="#cb7-131" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.66.0</span>
<span id="cb7-132"><a href="#cb7-132" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-133"><a href="#cb7-133" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-134"><a href="#cb7-134" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/hfwv308iaykb4ygnjpjfxwy6xf1rr0s3-my-app-gcc7-poco191-boost167/bin/main:</span>
<span id="cb7-135"><a href="#cb7-135" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-136"><a href="#cb7-136" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 7.4.0</span>
<span id="cb7-137"><a href="#cb7-137" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.67.0</span>
<span id="cb7-138"><a href="#cb7-138" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-139"><a href="#cb7-139" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-140"><a href="#cb7-140" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/2bxawcdkgjbvn756q93r65vym19b2jip-my-app-gcc7-poco191-boost168/bin/main:</span>
<span id="cb7-141"><a href="#cb7-141" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-142"><a href="#cb7-142" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 7.4.0</span>
<span id="cb7-143"><a href="#cb7-143" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.68.0</span>
<span id="cb7-144"><a href="#cb7-144" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-145"><a href="#cb7-145" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-146"><a href="#cb7-146" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/zgzw1bbx935fm209lxnn01n14sv8f9a8-my-app-gcc7-poco191-boost169/bin/main:</span>
<span id="cb7-147"><a href="#cb7-147" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-148"><a href="#cb7-148" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 7.4.0</span>
<span id="cb7-149"><a href="#cb7-149" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.69.0</span>
<span id="cb7-150"><a href="#cb7-150" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-151"><a href="#cb7-151" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-152"><a href="#cb7-152" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/jgsxmqgwmqqv2sbcmnx63abb3ymfsqc5-my-app-gcc8-poco190-boost166/bin/main:</span>
<span id="cb7-153"><a href="#cb7-153" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-154"><a href="#cb7-154" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 8.3.0</span>
<span id="cb7-155"><a href="#cb7-155" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.66.0</span>
<span id="cb7-156"><a href="#cb7-156" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-157"><a href="#cb7-157" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-158"><a href="#cb7-158" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/3j9q4bn2id2iqza44n39mzi4cqzhqlz2-my-app-gcc8-poco190-boost167/bin/main:</span>
<span id="cb7-159"><a href="#cb7-159" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-160"><a href="#cb7-160" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 8.3.0</span>
<span id="cb7-161"><a href="#cb7-161" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.67.0</span>
<span id="cb7-162"><a href="#cb7-162" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-163"><a href="#cb7-163" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-164"><a href="#cb7-164" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/7czfqh3fbjpslnar101b472kzlhxlcdc-my-app-gcc8-poco190-boost168/bin/main:</span>
<span id="cb7-165"><a href="#cb7-165" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-166"><a href="#cb7-166" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 8.3.0</span>
<span id="cb7-167"><a href="#cb7-167" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.68.0</span>
<span id="cb7-168"><a href="#cb7-168" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-169"><a href="#cb7-169" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-170"><a href="#cb7-170" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/9vmwm0zzsgxqm6v5yxzjdjkhgxqqdnqr-my-app-gcc8-poco190-boost169/bin/main:</span>
<span id="cb7-171"><a href="#cb7-171" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-172"><a href="#cb7-172" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 8.3.0</span>
<span id="cb7-173"><a href="#cb7-173" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.69.0</span>
<span id="cb7-174"><a href="#cb7-174" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-175"><a href="#cb7-175" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-176"><a href="#cb7-176" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/n34v5f23jhpcc20hyszdn270p9wyzfbz-my-app-gcc8-poco191-boost166/bin/main:</span>
<span id="cb7-177"><a href="#cb7-177" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-178"><a href="#cb7-178" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 8.3.0</span>
<span id="cb7-179"><a href="#cb7-179" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.66.0</span>
<span id="cb7-180"><a href="#cb7-180" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-181"><a href="#cb7-181" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-182"><a href="#cb7-182" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/bq9pijnw746ilp1ar8xwb7bl3v1ypy0y-my-app-gcc8-poco191-boost167/bin/main:</span>
<span id="cb7-183"><a href="#cb7-183" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-184"><a href="#cb7-184" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 8.3.0</span>
<span id="cb7-185"><a href="#cb7-185" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.67.0</span>
<span id="cb7-186"><a href="#cb7-186" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-187"><a href="#cb7-187" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-188"><a href="#cb7-188" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/pzqa2sraf1xhji9bk6namwg6x4ar9sgq-my-app-gcc8-poco191-boost168/bin/main:</span>
<span id="cb7-189"><a href="#cb7-189" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-190"><a href="#cb7-190" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 8.3.0</span>
<span id="cb7-191"><a href="#cb7-191" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.68.0</span>
<span id="cb7-192"><a href="#cb7-192" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-193"><a href="#cb7-193" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-194"><a href="#cb7-194" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/vb3ha6skwnj2h5k691jxcn7pxa8gs90i-my-app-gcc8-poco191-boost169/bin/main:</span>
<span id="cb7-195"><a href="#cb7-195" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-196"><a href="#cb7-196" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 8.3.0</span>
<span id="cb7-197"><a href="#cb7-197" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.69.0</span>
<span id="cb7-198"><a href="#cb7-198" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span></code></pre></div>
<p>As the first step, let us first decompose the <code>default.nix</code> file into a file
<code>derivation.nix</code> and another file <code>release.nix</code>.</p>
<p>The new <code>derivation.nix</code> file contains the pure package description without
knowledge about where the dependencies come from:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">boost</span><span class="op">,</span> <span class="va">poco</span><span class="op">,</span> <span class="va">stdenv</span> <span class="op">}</span>:</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>stdenv.mkDerivation <span class="op">{</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;my-app&quot;</span><span class="op">;</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">src</span> <span class="op">=</span> <span class="ss">./.</span><span class="op">;</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">buildInputs</span> <span class="op">=</span> <span class="op">[</span> boost poco <span class="op">];</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>  <span class="va">buildPhase</span> <span class="op">=</span> <span class="st">&quot;c++ -std=c++17 -o main main.cpp -lPocoFoundation -lboost_system&quot;</span><span class="op">;</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>  <span class="va">installPhase</span> <span class="op">=</span> <span class="st">&#39;&#39;</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="st">    mkdir -p $out/bin</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a><span class="st">    cp main $out/bin/</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a><span class="st">  &#39;&#39;</span><span class="op">;</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The first line states that the content of this file is a <em>function</em> that
accepts a dictionary with the keys <code>boost</code>, <code>poco</code>, and <code>stdenv</code> as input
arguments.
It does then finally return a derivation.
A derivation can be materialized into a package with the binary by <code>nix</code>.</p>
<p>This means that we can regard <code>derivation.nix</code> like a mathematical function<br />
<span class="math inline"><em>d</em><em>e</em><em>r</em><em>i</em><em>v</em>(<em>c</em><em>o</em><em>m</em><em>p</em><em>i</em><em>l</em><em>e</em><em>r</em>,<em>b</em><em>o</em><em>o</em><em>s</em><em>t</em>,<em>p</em><em>o</em><em>c</em><em>o</em>) → <em>d</em><em>e</em><em>r</em><em>i</em><em>v</em><em>a</em><em>t</em><em>i</em><em>o</em><em>n</em></span>.</p>
<p>The next step is then to use that function <span class="math inline"><em>d</em><em>e</em><em>r</em><em>i</em><em>v</em></span> and feed it with the cartesian
product of all 32 input combinations.
The file <code>release.nix</code> does just that:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode numberSource numberLines nix"><code class="sourceCode nix"><span id="cb9-1"><a href="#cb9-1"></a><span class="op">{</span></span>
<span id="cb9-2"><a href="#cb9-2"></a>  <span class="va">nixpkgs</span> <span class="op">?</span> &lt;nixpkgs&gt;<span class="op">,</span></span>
<span id="cb9-3"><a href="#cb9-3"></a>  <span class="va">pkgs</span> <span class="op">?</span> <span class="bu">import</span> nixpkgs <span class="op">{}</span></span>
<span id="cb9-4"><a href="#cb9-4"></a><span class="op">}</span>:</span>
<span id="cb9-5"><a href="#cb9-5"></a></span>
<span id="cb9-6"><a href="#cb9-6"></a><span class="kw">let</span></span>
<span id="cb9-7"><a href="#cb9-7"></a>  <span class="va">compilers</span> <span class="op">=</span> <span class="kw">with</span> pkgs<span class="op">;</span> <span class="op">{</span></span>
<span id="cb9-8"><a href="#cb9-8"></a>    <span class="va">gcc7</span> <span class="op">=</span> stdenv<span class="op">;</span></span>
<span id="cb9-9"><a href="#cb9-9"></a>    <span class="va">gcc8</span> <span class="op">=</span> overrideCC stdenv gcc8<span class="op">;</span></span>
<span id="cb9-10"><a href="#cb9-10"></a>    <span class="va">clang7</span> <span class="op">=</span> overrideCC stdenv clang_7<span class="op">;</span></span>
<span id="cb9-11"><a href="#cb9-11"></a>    <span class="va">clang8</span> <span class="op">=</span> overrideCC stdenv clang_8<span class="op">;</span></span>
<span id="cb9-12"><a href="#cb9-12"></a>  <span class="op">};</span></span>
<span id="cb9-13"><a href="#cb9-13"></a></span>
<span id="cb9-14"><a href="#cb9-14"></a>  <span class="va">pocoLibs</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb9-15"><a href="#cb9-15"></a>    <span class="va">poco190</span> <span class="op">=</span> pkgs.poco<span class="op">;</span></span>
<span id="cb9-16"><a href="#cb9-16"></a>    <span class="va">poco191</span> <span class="op">=</span> pkgs.poco.overrideAttrs <span class="op">(</span><span class="va">oldAttrs</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb9-17"><a href="#cb9-17"></a>      <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;poco-1.9.1&quot;</span><span class="op">;</span></span>
<span id="cb9-18"><a href="#cb9-18"></a>      <span class="va">src</span> <span class="op">=</span> pkgs.fetchgit <span class="op">{</span></span>
<span id="cb9-19"><a href="#cb9-19"></a>        <span class="va">url</span> <span class="op">=</span> <span class="st">&quot;https://github.com/pocoproject/poco.git&quot;</span><span class="op">;</span></span>
<span id="cb9-20"><a href="#cb9-20"></a>        <span class="va">rev</span> <span class="op">=</span> <span class="st">&quot;196540ce34bf884921ff3f9ce338e38fc938acdd&quot;</span><span class="op">;</span></span>
<span id="cb9-21"><a href="#cb9-21"></a>        <span class="va">sha256</span> <span class="op">=</span> <span class="st">&quot;0q0xihkm2z8kndx40150inq7llcyny59cv016gxsx0vbzzbdkcnd&quot;</span><span class="op">;</span></span>
<span id="cb9-22"><a href="#cb9-22"></a>      <span class="op">};</span></span>
<span id="cb9-23"><a href="#cb9-23"></a>    <span class="op">});</span></span>
<span id="cb9-24"><a href="#cb9-24"></a>  <span class="op">};</span></span>
<span id="cb9-25"><a href="#cb9-25"></a></span>
<span id="cb9-26"><a href="#cb9-26"></a>  <span class="va">boostLibs</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb9-27"><a href="#cb9-27"></a>    <span class="kw">inherit</span> <span class="op">(</span>pkgs<span class="op">)</span> boost166 boost167 boost168 boost169<span class="op">;</span></span>
<span id="cb9-28"><a href="#cb9-28"></a>  <span class="op">};</span></span>
<span id="cb9-29"><a href="#cb9-29"></a></span>
<span id="cb9-30"><a href="#cb9-30"></a>  <span class="va">originalDerivation</span> <span class="op">=</span> <span class="op">[</span> <span class="op">(</span>pkgs.callPackage <span class="op">(</span><span class="bu">import</span> <span class="ss">./derivation.nix</span><span class="op">)</span> <span class="op">{})</span> <span class="op">];</span></span>
<span id="cb9-31"><a href="#cb9-31"></a></span>
<span id="cb9-32"><a href="#cb9-32"></a>  <span class="va">f</span> <span class="op">=</span> <span class="va">libname</span><span class="op">:</span> <span class="va">libs</span><span class="op">:</span> <span class="va">derivs</span><span class="op">:</span> <span class="kw">with</span> pkgs.lib<span class="op">;</span></span>
<span id="cb9-33"><a href="#cb9-33"></a>    concatMap <span class="op">(</span><span class="va">deriv</span><span class="op">:</span></span>
<span id="cb9-34"><a href="#cb9-34"></a>      mapAttrsToList <span class="op">(</span><span class="va">libVers</span><span class="op">:</span> <span class="va">lib</span><span class="op">:</span></span>
<span id="cb9-35"><a href="#cb9-35"></a>        <span class="op">(</span>deriv.override <span class="op">{</span> <span class="st">&quot;</span><span class="sc">${</span>libname<span class="sc">}</span><span class="st">&quot;</span> <span class="op">=</span> lib<span class="op">;</span> <span class="op">})</span>.overrideAttrs</span>
<span id="cb9-36"><a href="#cb9-36"></a>          <span class="op">(</span><span class="va">old</span><span class="op">:</span> <span class="op">{</span> <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;</span><span class="sc">${</span>old.name<span class="sc">}</span><span class="st">-</span><span class="sc">${</span>libVers<span class="sc">}</span><span class="st">&quot;</span><span class="op">;</span> <span class="op">})</span></span>
<span id="cb9-37"><a href="#cb9-37"></a>      <span class="op">)</span> libs</span>
<span id="cb9-38"><a href="#cb9-38"></a>    <span class="op">)</span> derivs<span class="op">;</span></span>
<span id="cb9-39"><a href="#cb9-39"></a></span>
<span id="cb9-40"><a href="#cb9-40"></a>  <span class="va">overrides</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb9-41"><a href="#cb9-41"></a>    <span class="op">(</span>f <span class="st">&quot;stdenv&quot;</span> compilers<span class="op">)</span></span>
<span id="cb9-42"><a href="#cb9-42"></a>    <span class="op">(</span>f <span class="st">&quot;poco&quot;</span>   pocoLibs<span class="op">)</span></span>
<span id="cb9-43"><a href="#cb9-43"></a>    <span class="op">(</span>f <span class="st">&quot;boost&quot;</span>  boostLibs<span class="op">)</span></span>
<span id="cb9-44"><a href="#cb9-44"></a>  <span class="op">];</span></span>
<span id="cb9-45"><a href="#cb9-45"></a><span class="kw">in</span></span>
<span id="cb9-46"><a href="#cb9-46"></a>  pkgs.lib.foldl <span class="op">(</span><span class="va">a</span><span class="op">:</span> <span class="va">b</span><span class="op">:</span> a <span class="op">//</span> <span class="op">{</span> <span class="st">&quot;</span><span class="sc">${</span>b.name<span class="sc">}</span><span class="st">&quot;</span> <span class="op">=</span> b<span class="op">;</span> <span class="op">})</span> <span class="op">{}</span> <span class="op">(</span></span>
<span id="cb9-47"><a href="#cb9-47"></a>    pkgs.lib.foldl <span class="op">(</span><span class="va">a</span><span class="op">:</span> <span class="va">f</span><span class="op">:</span> f a<span class="op">)</span> originalDerivation overrides</span>
<span id="cb9-48"><a href="#cb9-48"></a>  <span class="op">)</span></span></code></pre></div>
<p>This code looks a bit more complicated, but it does a lot of things:</p>
<ul>
<li>It defines the variety of compilers and libraries in the variables
<code>compilers</code>, <code>pocoLibs</code>, and <code>boostLibs</code>.
<ul>
<li>note that <code>nixpkgs</code> already contains lib <code>poco</code> version 1.9.0, but not
1.9.1 - we simply override its package description to use the latest 1.9.1
source from poco’s github repository.</li>
</ul></li>
<li>Function <code>f</code> contains all the magic: It reapplies the original function
<code>deriv</code> with one library input overloaded from a library list argument!</li>
<li>The list <code>overrides</code> contains the list of function <code>f</code> applications that
shall be applied over the original derivation.</li>
<li>The last 2 lines of code apply all the transformations within a simple <code>fold</code></li>
</ul>
<p>This explanation is very brief.
The whole code might look pretty much familiar to everyone who is not used to
nix but has some experience with purely functional programming languages.
Explaining the code in detail to developers who neither know <code>nix</code> nor any
functional programming, would explode the scope of this article.</p>
<h2 id="summary">Summary</h2>
<p>We have seen how simple it is to quickly set up an ad-hoc C++ programming
environment with a compiler and libraries, without cluttering the system.</p>
<p>We have “packaged” our little project with a roughly ~10 LOC short <code>default.nix</code>
Users with solely <code>nix</code> installed can clone this project from git, run
<code>nix-build</code> and get the binary. Simple as that.</p>
<p>With less than 50 LOC we implemented a nix expression that builds our
application in 32 different variants with different compilers and library
versions.</p>
<p>There is a git repository with all project files that is available for checkout:
<a href="https://github.com/tfc/nix_cpp_cartesian_dependencies" class="uri">https://github.com/tfc/nix_cpp_cartesian_dependencies</a></p>
<h2 id="outlook">Outlook</h2>
<p>What else can be done from here? The advantages and strengths of <code>nix</code> have
<em>by far</em> not been exhausted in this example.</p>
<h3 id="maximum-reproducibility-pinning-nixpkgs">Maximum Reproducibility: Pinning <code>nixpkgs</code></h3>
<p>Whenever we referenced packages, we got them from the magical nix expression
<code>&lt;nixpkgs&gt;</code>.
This package source is a <em>channel</em> that can be updated with <code>nix-channel --update</code>, which is similar to running <code>apt-get update</code> on Debian-like Linux
distros.
Of course, an update of the channel also updates the packages and thus might
break the whole build.</p>
<p>With <code>nix</code>, we can simply <strong>pin</strong> the package list to a version that is known
to work.</p>
<p>In the github repository of this example, i did so with <a href="https://github.com/tfc/nix_cpp_cartesian_dependencies/blob/master/nixpkgs.nix">nixpkgs.nix</a>.</p>
<p>Using this technique, one can be pretty confident, that the project will
still work in all configurations in a few years, which makes our build procedure
pretty reproducible.</p>
<h3 id="nix-ci-hydra">Nix CI: Hydra</h3>
<p>Since <code>nix</code> is simply a tool that can be installed on Linux, Mac, and other UNIX
systems, it can also be run in different CIs.</p>
<p>The NixOS project does however come with its own CI:
<a href="https://nixos.org/hydra/">Hydra</a>.
I am running my own instance on <a href="https://hydra.kosmosgame.com" class="uri">https://hydra.kosmosgame.com</a> and installed
this project as a jobset on it:</p>
<p><a href="https://hydra.kosmosgame.com/jobset/github/nix_cpp_cartesian_dependencies#tabs-jobs">This article’s project in hydra</a></p>
<p>The code does a bit more than covered in this article:
I added a nix expression <a href="https://github.com/tfc/nix_cpp_cartesian_dependencies/blob/master/output.nix"><code>output.nix</code></a>
that does not only build the application in all variants, but also executes
them and stores their results in the nix store.
This way they can be looked at in the browser like here: <a href="https://hydra.kosmosgame.com/build/265">example output</a></p>
<h3 id="fully-reproducible-automatic-integration-tests">Fully Reproducible, Automatic Integration Tests</h3>
<p>Nix expressions do not only allow for simple ad-hoc packaging of binaries:
They are mighty enough to describe whole-system descriptions.
In fact, the NixOS installer ISOs, the Virtualbox NixOS demo VM image, the
Amazon AMIs, Microsoft Azure Blobs, etc. are all built from nix expressions.</p>
<p>I build a little more complicated example and put it on github:
<a href="https://github.com/tfc/nix_cmake_example" class="uri">https://github.com/tfc/nix_cmake_example</a></p>
<p>In a nutshell, this repository contains a C++ server application that uses
PostgreSQL as a database backend and a Python client application that provides
a little web server interface to the same database.
In order to test such an application one needs a host with a confiured and
running PostgreSQL instance.</p>
<p>The C++ app is built in different configurations - all configurations are
automatically tested in VMs that are automatically created, spun up, and
destroyed afterwards.</p>
<figure>
<img src="https://github.com/tfc/nix_cmake_example/raw/master/doc/hydra_nix_example.png" alt="Hydra example output" />
<figcaption aria-hidden="true">Hydra example output</figcaption>
</figure>
<p>The whole output can be inspected on
<a href="https://hydra.kosmosgame.com/jobset/github/nix_cmake_example#tabs-jobs" class="uri">https://hydra.kosmosgame.com/jobset/github/nix_cmake_example#tabs-jobs</a></p>
<h3 id="cross-compilation">Cross Compilation</h3>
<p>Just touching this topic by dropping some links</p>
<ul>
<li><a href="https://nixos.wiki/wiki/Cross_Compiling" class="uri">https://nixos.wiki/wiki/Cross_Compiling</a></li>
<li><a href="https://matthewbauer.us/blog/beginners-guide-to-cross.html" class="uri">https://matthewbauer.us/blog/beginners-guide-to-cross.html</a></li>
</ul>]]></summary>
</entry>
<entry>
    <title>Managing libraries with Nix</title>
    <link href="https://blog.galowicz.de/2018/02/27/managing_libraries_with_nix" />
    <id>https://blog.galowicz.de/2018/02/27/managing_libraries_with_nix</id>
    <published>2018-02-27T00:00:00Z</published>
    <updated>2018-02-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!-- cSpell:disable -->
<p>While learning Haskell and using its really smart library dependency management tools (<a href="https://www.haskell.org/cabal/"><code>cabal</code></a> and <a href="https://docs.haskellstack.org/en/stable/README/"><code>stack</code></a>), i realized that the C++ eco system has a problem:
There are no handy <em>established</em> tools that let the developer declare which libraries (and versions) are required for a project which can then be automatically installed in a portable way.
<a href="https://nixos.org/nix/"><code>Nix</code></a> however convinced me to be more versatile and powerful than <a href="https://www.conan.io/">Conan</a> and handier than <a href="https://www.docker.com/">Docker</a>, <a href="https://www.vagrantup.com/">Vagrant</a>, etc. (although it’s fair to say that i am mixing use cases here a little bit!)
In this article, i am going to showcase this great tool a little bit.</p>
<!--more-->
<p>This article is rather long (mostly because of many command line excerpts).
Feel free to jump to the end, where we will compile and run the same project with 3 different compilers just by changing the command line a bit.</p>
<h2 id="use-case-example">Use case example</h2>
<p>So i have been developing a little library to see if i can implement a handy parser library in C++ that models how you build parsers in Haskell using the <a href="https://hackage.haskell.org/package/parsec"><code>parsec</code> library</a>.</p>
<p>The project can be checked out on <a href="https://github.com/tfc/attoparsecpp">github.com/tfc/attoparsecpp</a>. It is however not important to look into it.
This article is not at all about parsers, Haskell, or my specific library.
My little project shall just serve as an example project that has unit tests and benchmarks.</p>
<p>For libraries it is important that they build warning-free with:</p>
<ul>
<li>different compilers</li>
<li>even different compiler versions</li>
</ul>
<p>In addition to that, it is a nice-to-have to also compare the benchmark numbers among those!</p>
<p>However, the library has the following dependencies:</p>
<ul>
<li><a href="https://github.com/catchorg/Catch2"><code>catch</code></a> for building the unit tests</li>
<li><a href="https://github.com/google/benchmark"><code>benchmark</code> (from Google)</a> for building the benchmarks</li>
</ul>
<p>That means: in order to build this project you need to install those.
Some developers just install them the oldschool way or they pull them in as git submodules and then embedd them into the <code>Makefile</code> (or <code>cmake</code> pendants etc.).
Some other developers would define Docker images (or Vagrant etc.).
There is also the Conan package manager which enables the developer to just define which libraries are needed.</p>
<h2 id="installing-nix">Installing Nix</h2>
<p>Let us now completely concentrate on Nix. What is it? <a href="https://nixos.org/nix/">The Nix homepage</a> states:</p>
<blockquote>
<p>Nix is a powerful package manager for Linux and other Unix systems that makes package management reliable and reproducible.
It provides atomic upgrades and rollbacks, side-by-side installation of multiple versions of a package, multi-user package management and easy setup of build environments.
…</p>
</blockquote>
<p>Nix can be installed on Linux, Mac, and other Unixes.
(I guess it can be installed in the Linux-Subsystem on Windows, but i am not sure as i am no Windows user).
Just as a side note: There is even a <a href="https://nixos.org/">Linux distribution called “NixOS”</a>.</p>
<p>The installation of Nix is really simple.
Please first study the content of <a href="https://nixos.org/nix/install"><code>https://nixos.org/nix/install</code></a> and then run the following command in the bash (Or run the parts of the script you like. It is interesting how about 90% of the critisizm on Nix concentrate on this shell command.):</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> curl https://nixos.org/nix/install <span class="kw">|</span> <span class="fu">sh</span></span></code></pre></div>
<p>The installation script will download and extract a large tarball into the <code>/nix</code> folder on your system.
In addition to that, it will activate a build daemon and create some user accounts in order to isolate things while building packages.
After the installation, there will never be any need to use <code>sudo</code> in combination with nix calls again.
It is generally possible to install nix on systems where even creating <code>/nix</code> is not allowed (see the <a href="https://nixos.wiki/wiki/Nix_Installation_Guide">installation guide</a> for more details).</p>
<h2 id="installing-project-dependencies">Installing project dependencies</h2>
<p>After cloning the C++ project on a mac where only <code>git</code> and <code>clang++</code>, we will have trouble building the project without installing the libraries:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> cd test <span class="kw">&amp;&amp;</span> <span class="fu">make</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="ex">c++</span> <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-c</span> main.cpp</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ex">main.cpp:2:10:</span> fatal error: <span class="st">&#39;catch/catch.hpp&#39;</span> file not found</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co">#include &lt;catch/catch.hpp&gt;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>         <span class="ex">^~~~~~~~~~~~~~~~~</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span> error generated.</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="ex">make:</span> <span class="pp">***</span> [main.o] Error 1</span></code></pre></div>
<p>For the unit tests, we only need the <code>catch</code> library.
That’s easy, as the Nix repository has that.</p>
<blockquote>
<p>Another “catch” is that the <code>make</code> call ended up invoking <code>c++</code>, which is our Mac system compiler that is not really prepared to be used with Nix-installations of packages.
This is part of some mechanics which the Nix docs cover much better.</p>
</blockquote>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-env <span class="at">-qaP</span> <span class="at">--description</span> <span class="kw">|</span> <span class="fu">grep</span> catch</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ex">nixpkgs.catch</span>               catch-1.9.6               A multi-paradigm automated test framework for C++ and Objective-C <span class="er">(</span><span class="ex">and,</span> maybe, C<span class="kw">)</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span></code></pre></div>
<p>So let’s build it with catch installed:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">-p</span> clang <span class="at">-p</span> catch</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell:~/project_dir]$</span> cd test <span class="kw">&amp;&amp;</span> <span class="fu">make</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-c</span> main.cpp</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-I..</span>/include <span class="at">-c</span> test.cpp</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="ex">test.cpp:127:46:</span> error: too many arguments provided to function-like macro invocation</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>            <span class="ex">REQUIRE</span><span class="er">(</span> <span class="ex">r-</span><span class="op">&gt;</span>first == vect_t{<span class="st">&#39;a&#39;</span>, <span class="st">&#39;b&#39;</span>, <span class="st">&#39;c&#39;</span>}<span class="kw">);</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>                                             <span class="ex">^</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/gsklw95pxb9npyqpfpczagchk8kdsgzb-catch-1.9.6/include/catch/catch.hpp:11450:9:</span> note: macro <span class="st">&#39;REQUIRE&#39;</span> defined here</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="co">#define REQUIRE( expr ) INTERNAL_CATCH_TEST( &quot;REQUIRE&quot;, Catch::ResultDisposition::Normal, expr  )</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span></code></pre></div>
<p>Ok, the compiler can find the <code>catch.hpp</code> header, but it does not compile.
The problem here is that i wrote the unit tests with <code>catch2</code> and the package in the Nix repo is a little bit too old.
I learned Nix the hard way by doing the following:</p>
<h2 id="writing-our-own-nix-expressions">Writing our own Nix expressions</h2>
<p>The Nix ecosystem provides a rich database of packages for everything which does not only include libraries, but also applications.
In this case however, the library is too old and we need a more current one.</p>
<p>While the <code>catch</code> library just consists of a single header that is really easy to download, it is also a really simple example for building a Nix derivation that automatically obtains it from github and provides it for building.
So let’s do that here. We will also install a newer google benchmark library (which is a bit more complicated as it is not header-only) this way later.</p>
<p>A Nix derivation is kind of a cooking recipe that tells where to get what and what to do with it in order to make it useful.
In order to get catch version 2.1.2, we create a file <code>catch.nix</code> in the project folder:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode numberSource numberLines"><code class="sourceCode"><span id="cb5-1"><a href="#cb5-1"></a># file: catch.nix</span>
<span id="cb5-2"><a href="#cb5-2"></a>{ stdenv, fetchurl }:</span>
<span id="cb5-3"><a href="#cb5-3"></a></span>
<span id="cb5-4"><a href="#cb5-4"></a>stdenv.mkDerivation rec {</span>
<span id="cb5-5"><a href="#cb5-5"></a>  name = &quot;catch-${version}&quot;;</span>
<span id="cb5-6"><a href="#cb5-6"></a>  version = &quot;2.1.2&quot;;</span>
<span id="cb5-7"><a href="#cb5-7"></a></span>
<span id="cb5-8"><a href="#cb5-8"></a>  src = fetchurl {</span>
<span id="cb5-9"><a href="#cb5-9"></a>      url = &quot;https://github.com/catchorg/Catch2/releases/download/v2.1.2/catch.hpp&quot;;</span>
<span id="cb5-10"><a href="#cb5-10"></a>      sha256 = &quot;e8b8f3109716891aa99b1a8e29cd0d627419bdc4a8d2eeef0d8370aaf8d5e483&quot;;</span>
<span id="cb5-11"><a href="#cb5-11"></a>  };</span>
<span id="cb5-12"><a href="#cb5-12"></a></span>
<span id="cb5-13"><a href="#cb5-13"></a>  # It is just the file. No unpacking needed. Seems like we need to create</span>
<span id="cb5-14"><a href="#cb5-14"></a>  # _some_ folder, otherwise we get errors.</span>
<span id="cb5-15"><a href="#cb5-15"></a>  unpackCmd = &quot;mkdir dummy_dir&quot;;</span>
<span id="cb5-16"><a href="#cb5-16"></a></span>
<span id="cb5-17"><a href="#cb5-17"></a>  installPhase = &#39;&#39;</span>
<span id="cb5-18"><a href="#cb5-18"></a>    mkdir -p $out/include/catch</span>
<span id="cb5-19"><a href="#cb5-19"></a>    cp ${src} $out/include/catch/catch.hpp</span>
<span id="cb5-20"><a href="#cb5-20"></a>  &#39;&#39;;</span>
<span id="cb5-21"><a href="#cb5-21"></a></span>
<span id="cb5-22"><a href="#cb5-22"></a>  meta = {</span>
<span id="cb5-23"><a href="#cb5-23"></a>    description = &quot;A modern, C++-native, header-only, test framework for unit-tests, TDD and BDD - using C++11, C++14, C++17 and later&quot;;</span>
<span id="cb5-24"><a href="#cb5-24"></a>    homepage = http://catch-lib.net;</span>
<span id="cb5-25"><a href="#cb5-25"></a>  };</span>
<span id="cb5-26"><a href="#cb5-26"></a>}</span></code></pre></div>
<p>There is a lot of <em>voodoo</em> going on here for anyone who does not know Nix.
Nix is its own scripting language (a purely functional one), that is why it that script initially looks so complicated.
The important parts are:</p>
<ul>
<li>lines 8-11, <code>fetchurl</code>:
<ul>
<li>Where to get the catch header file?</li>
<li>For control reasons we also define what hash it needs to have.</li>
</ul></li>
<li>lines 17-20, <code>installPhase</code>:
<ul>
<li>We define that <code>catch.hpp</code> needs to be installed into <code>$out/include/catch/catch.hpp</code>, wherever that is.</li>
</ul></li>
</ul>
<p>Let us bring <code>nix-shell</code> to use that file and install catch for us:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">-p</span> <span class="st">&#39;with (import &lt;nixpkgs&gt; {}); callPackage ./catch.nix {}&#39;</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="ex">these</span> derivations will be built:</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/byy8sgy8crdhzyvjxzzbq4zhg8kbvhpp-catch.hpp.drv</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/v75n72czr0vgqz4zacrzk2wsrr1jg1kc-catch-2.1.2.drv</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="ex">these</span> paths will be fetched <span class="er">(</span><span class="ex">0.82</span> MiB download, 4.50 MiB unpacked<span class="kw">)</span><span class="bu">:</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/0cs9d2ml9cql18l1vsxrdmjliiz0p0rg-bash-4.4-p12-info</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/0p2m9iz8w4551qkgzsqvl2vm2ilyb6ww-stdenv-darwin</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/2pvbzmacxfhm1akl9a5shqrk47i53cpv-libssh2-1.8.0-dev</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/cxz0drsrlbmdi1krr0n57zfcswjmrv5i-mirrors-list</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/czw3qnwsify74b5bljll1lmm8k6kk09h-curl-7.55.1-dev</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/icm30zksjzx8546d02y9gi4vzdi42j2w-bash-4.4-p12-man</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/kwclw4knsrs6l4fi98wnzg713r8p0wls-openssl-1.0.2l-dev</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/n2aycrbi6myl9wqr6b7w2n578j505czd-curl-7.55.1-man</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/w4m16gcmlxsgx468p7k3993vwf6i6hsx-bash-4.4-p12-dev</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/yw461g3iqihmq6i1mrjn6khbwn6gx0rl-bash-4.4-p12-doc</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="ex">building</span> path<span class="er">(</span><span class="ex">s</span><span class="kw">)</span> <span class="ex">‘/nix/store/62g4h135grzi5xn5y7hyrxg1r8ac408g-catch-2.1.2’</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a><span class="ex">unpacking</span> sources</span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a><span class="ex">unpacking</span> source archive /nix/store/4nx2d1j5jnnb9zqlmpl45g68msqycfjy-catch.hpp</span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a><span class="ex">patching</span> script interpreter paths in /nix/store/62g4h135grzi5xn5y7hyrxg1r8ac408g-catch-2.1.2</span></code></pre></div>
<p>There was a lot going on after firing that command: Nix even installed <code>curl</code> and all its dependencies, because it needs a tool to download the header file.
The last line tells us that there is now something in <code>/nix/store/62g4h135grzi5xn5y7hyrxg1r8ac408g-catch-2.1.2</code>.
Let’s have a look into it:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell:~/Desktop/p]$</span> ls <span class="at">-lsa</span> /nix/store/62g4h135grzi5xn5y7hyrxg1r8ac408g-catch-2.1.2/include/catch/catch.hpp</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="ex">428</span> <span class="at">-r--r--r--</span> 1 root wheel 435409 Jan  1  1970 /nix/store/62g4h135grzi5xn5y7hyrxg1r8ac408g-catch-2.1.2/include/catch/catch.hpp</span></code></pre></div>
<p>Ok, so whenever we add this strange path to the compiler command line using <code>-I/nix/store/...</code>, then our tests will compile.</p>
<p>Let’s again start the nix shell with our catch derivation and clang and GNU make and try again:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">-p</span> clang <span class="st">&#39;with (import &lt;nixpkgs&gt; {}); callPackage ./catch.nix {}&#39;</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell:~/project_dir]$</span> cd test <span class="kw">&amp;&amp;</span> <span class="fu">make</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-c</span> main.cpp</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-I..</span>/include <span class="at">-c</span> test.cpp</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-I..</span>/include <span class="at">-c</span> math_expression.cpp</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-o</span> main main.o test.o math_expression.o</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell:~/project_dir]$</span> ./main</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="ex">===============================================================================</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="ex">All</span> tests passed <span class="er">(</span><span class="ex">172</span> assertions in 11 test cases<span class="kw">)</span></span></code></pre></div>
<p>Yes, that went well!</p>
<blockquote>
<p>(The <code>-I/nix/store/...</code> parameter was handled for us implicitly) by the Nix-installed compiler</p>
</blockquote>
<p>It is however pretty ugly to call <code>nix-shell</code> with all those arguments that are hard to memorize.
For this purpose we can define a <code>default.nix</code> file that will be automatically sourced by Nix:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co"># file: default.nix</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">pkgs</span> <span class="op">?</span> <span class="bu">import</span> &lt;nixpkgs&gt; <span class="op">{},</span> <span class="op">}</span>:</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="kw">rec</span> <span class="op">{</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">myProject</span> <span class="op">=</span> pkgs.stdenv.mkDerivation <span class="op">{</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;attoparsecpp&quot;</span><span class="op">;</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>    <span class="va">version</span> <span class="op">=</span> <span class="st">&quot;dev-0.1&quot;</span><span class="op">;</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    <span class="va">buildInputs</span> <span class="op">=</span> <span class="kw">with</span> pkgs<span class="op">;</span> <span class="op">[</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>      <span class="op">(</span>callPackage <span class="ss">./catch.nix</span> <span class="op">{</span> <span class="op">})</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">];</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>There’s again some voodoo for Nix-novices, but the important part is that we call our package <code>catch.nix</code> in the context of a standard build environment (<code>stdenv</code>).
With <code>stdenv</code> we don’t need to reference the compiler explicitly any longer.</p>
<p>Now, we can do the following:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">--command</span> <span class="st">&quot;cd test &amp;&amp; make -B -j4 &amp;&amp; ./main&quot;</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-c</span> main.cpp</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-I..</span>/include <span class="at">-c</span> test.cpp</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-I..</span>/include <span class="at">-c</span> math_expression.cpp</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-o</span> main main.o test.o math_expression.o</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="ex">===============================================================================</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="ex">All</span> tests passed <span class="er">(</span><span class="ex">172</span> assertions in 11 test cases<span class="kw">)</span></span></code></pre></div>
<p>Nix finds our <code>default.nix</code> file and gets everything in order.</p>
<p>Ok, great.
How about running benchmarks?</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">--command</span> <span class="st">&quot;cd benchmark &amp;&amp; make -B -j4 &amp;&amp; ./main&quot;</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-I..</span>/include main.cpp <span class="at">-o</span> main <span class="at">-lbenchmark</span> <span class="at">-lpthread</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="ex">main.cpp:7:10:</span> fatal error: <span class="st">&#39;benchmark/benchmark.h&#39;</span> file not found</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="co">#include &lt;benchmark/benchmark.h&gt;</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>         <span class="ex">^~~~~~~~~~~~~~~~~~~~~~~</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span> error generated.</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="ex">make:</span> <span class="pp">***</span> [Makefile:8: main] Error 1</span></code></pre></div>
<p>Seems like we need to install google benchmark, too.
There is a <code>gbenchmark</code> package, but it’s again too old.
Nothing we couldn’t fix with our own Nix expression, though:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode numberSource numberLines"><code class="sourceCode"><span id="cb12-1"><a href="#cb12-1"></a># file googlebench.nix</span>
<span id="cb12-2"><a href="#cb12-2"></a>{ stdenv, fetchFromGitHub, cmake }:</span>
<span id="cb12-3"><a href="#cb12-3"></a></span>
<span id="cb12-4"><a href="#cb12-4"></a>stdenv.mkDerivation rec {</span>
<span id="cb12-5"><a href="#cb12-5"></a>  name = &quot;googlebench-${version}&quot;;</span>
<span id="cb12-6"><a href="#cb12-6"></a>  version = &quot;1.3.0&quot;;</span>
<span id="cb12-7"><a href="#cb12-7"></a></span>
<span id="cb12-8"><a href="#cb12-8"></a>  src = fetchFromGitHub {</span>
<span id="cb12-9"><a href="#cb12-9"></a>      owner = &quot;google&quot;;</span>
<span id="cb12-10"><a href="#cb12-10"></a>      repo = &quot;benchmark&quot;;</span>
<span id="cb12-11"><a href="#cb12-11"></a>      rev = &quot;v${version}&quot;;</span>
<span id="cb12-12"><a href="#cb12-12"></a>      sha256 = &quot;1qx2dp7y0haj6wfbbfw8hx8sxb8ww0igdfrmmaaxfl0vhckylrxh&quot;;</span>
<span id="cb12-13"><a href="#cb12-13"></a>  };</span>
<span id="cb12-14"><a href="#cb12-14"></a></span>
<span id="cb12-15"><a href="#cb12-15"></a>  nativeBuildInputs = [ cmake ];</span>
<span id="cb12-16"><a href="#cb12-16"></a></span>
<span id="cb12-17"><a href="#cb12-17"></a>  meta = {</span>
<span id="cb12-18"><a href="#cb12-18"></a>    description = &quot;google benchmark&quot;;</span>
<span id="cb12-19"><a href="#cb12-19"></a>  };</span>
<span id="cb12-20"><a href="#cb12-20"></a>}</span></code></pre></div>
<p>Building the benchmark library involves compiling it with <code>cmake</code>, as it is more than just headers.
Luckily, the Nix expression language came with its own library installed.
It has handy little helpers like <code>fetchFromGitHub</code> that accepts some arguments needed to construct a download link from it and automatically unpack it!</p>
<p>The line <code>nativeBuildInputs</code> instructs Nix to install <code>cmake</code> for building this package.
Everything else is automatically deduced.
After adding this Nix derivation to our <code>default.nix</code> file, it will build google benchmark for us before we can run our own makefile:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">--command</span> <span class="st">&quot;cd benchmark &amp;&amp; make -B -j4 &amp;&amp; ./main&quot;</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="ex">these</span> derivations will be built:</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/vbi7a7kjxz24zmq7lwaa044735hdlmb3-benchmark-v1.3.0-src.drv</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/il7biicbp3pa39nl5ffkyi9b1wwkw0b1-googlebench-1.3.0.drv</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="ex">these</span> paths will be fetched <span class="er">(</span><span class="ex">0.12</span> MiB download, 0.44 MiB unpacked<span class="kw">)</span><span class="bu">:</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/i1b5rym52fhqkdz2kzaqn1gnk6nhf0b7-unzip-6.0</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-I..</span>/include main.cpp <span class="at">-o</span> main <span class="at">-lbenchmark</span> <span class="at">-lpthread</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="ex">Run</span> on <span class="er">(</span><span class="ex">8</span> X 2300 MHz CPU s<span class="kw">)</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="ex">2018-02-27</span> 21:50:34</span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="ex">-----------------------------------------------------------------------</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a><span class="ex">Benchmark</span>                                Time           CPU Iterations</span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a><span class="ex">-----------------------------------------------------------------------</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a><span class="ex">measure_word_parsing/10</span>                 55 ns         55 ns   12703483</span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a><span class="ex">measure_word_parsing/100</span>              1107 ns       1105 ns     654444</span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a><span class="ex">measure_word_parsing/1000</span>             6021 ns       6012 ns     125101</span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a><span class="ex">measure_word_parsing/10000</span>           47889 ns      47812 ns      13667</span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a><span class="ex">measure_word_parsing/100000</span>         481643 ns     480574 ns       1428</span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a><span class="ex">measure_word_parsing/1000000</span>       4865444 ns    4854115 ns        130</span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a><span class="ex">measure_word_parsing/10000000</span>     54049501 ns   53973846 ns         13</span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a><span class="ex">measure_word_parsing_BigO</span>             5.40 N       5.39 N</span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a><span class="ex">measure_word_parsing_RMS</span>                 2 %          2 %</span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a><span class="ex">measure_vector_filling/10</span>              457 ns        455 ns    1683712</span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a><span class="ex">measure_vector_filling/100</span>            2282 ns       2279 ns     305181</span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span></code></pre></div>
<p>Yes, that’s some successful benchmark output!
This time it even installed <code>unzip</code> in case we don’t have it, yet.</p>
<p>However, we do not have to care about anything library-related other than linking.
The Makefile does not reflect any knowledge of Nix or the install location of our dependencies:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> cat benchmark/Makefile</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="ex">default:</span> main</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="va">CXXFLAGS</span><span class="op">=</span>-O2 <span class="ex">-std=c++14</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a><span class="va">LDFLAGS</span><span class="op">=</span>-lbenchmark <span class="ex">-lpthread</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="ex">main:</span> main.cpp ../include/parser.hpp ../include/math_expression.hpp</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>	<span class="va">$(</span><span class="ex">CXX</span><span class="va">)</span> <span class="va">$(</span><span class="ex">CXXFLAGS</span><span class="va">)</span> <span class="at">-I..</span>/include main.cpp <span class="at">-o</span> main <span class="va">$(</span><span class="ex">LDFLAGS</span><span class="va">)</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a><span class="ex">clean:</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>	<span class="fu">rm</span> <span class="at">-rf</span> main <span class="pp">*</span>.o</span></code></pre></div>
<h2 id="compiling-and-running-tests-with-different-compilers">Compiling and running tests with different compilers</h2>
<p>So… when pulling in compilers and libraries is so simple with Nix - how about checking if our library compiles with all compilers and versions of those?</p>
<p>We need to add a little modification to the <code>default.nix</code> file in order to <em>parametrize</em> it:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode numberSource numberLines"><code class="sourceCode"><span id="cb15-1"><a href="#cb15-1"></a># file default.nix</span>
<span id="cb15-2"><a href="#cb15-2"></a>{</span>
<span id="cb15-3"><a href="#cb15-3"></a>    pkgs   ? import &lt;nixpkgs&gt; {},</span>
<span id="cb15-4"><a href="#cb15-4"></a>    stdenv ? pkgs.stdenv</span>
<span id="cb15-5"><a href="#cb15-5"></a>}:</span>
<span id="cb15-6"><a href="#cb15-6"></a>rec {</span>
<span id="cb15-7"><a href="#cb15-7"></a>  myProject = stdenv.mkDerivation {</span>
<span id="cb15-8"><a href="#cb15-8"></a>    name = &quot;attoparsecpp&quot;;</span>
<span id="cb15-9"><a href="#cb15-9"></a>    version = &quot;dev-0.1&quot;;</span>
<span id="cb15-10"><a href="#cb15-10"></a>    buildInputs = with pkgs; [</span>
<span id="cb15-11"><a href="#cb15-11"></a>      (callPackage ./catch.nix { })</span>
<span id="cb15-12"><a href="#cb15-12"></a>      (callPackage ./googlebench.nix { stdenv = stdenv; })</span>
<span id="cb15-13"><a href="#cb15-13"></a>    ];</span>
<span id="cb15-14"><a href="#cb15-14"></a>  };</span>
<span id="cb15-15"><a href="#cb15-15"></a>}</span></code></pre></div>
<p>We applied the following changes:</p>
<ul>
<li>line 4: We added <code>stdenv</code> as a named parameter of this Nix derivation. <code>pkgs.stdenv</code> is its default value.</li>
<li>line 7: Now we use <code>stdenv.mkDerivation</code> instead of <code>pkgs.stdenv.mkDerivation</code>.</li>
<li>line 12: If our <code>stdenv</code> changes, this change is also forwarded into the <code>googlebench.nix</code> derivation. (Which then needs to be built just for this compiler, too)</li>
</ul>
<p>With this change, we can now build and execute our tests with different compilers just by changing varying <code>nix-shell</code> arguments.
Let’s try GCC now:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="dt">\</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span>  --command <span class="st">&quot;</span><span class="dt">\$</span><span class="st">CXX --version &amp;&amp; cd test &amp;&amp; make -B -j4 &amp;&amp; ./main&quot;</span> <span class="dt">\</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span>  --arg stdenv <span class="st">&quot;with (import &lt;nixpkgs&gt; {}); gccStdenv&quot;</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a><span class="ex">these</span> derivations will be built:</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/cs2r1wbz8n33fspdlqrcm5pf174qdgcj-googlebench-1.3.0.drv</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a><span class="ex">these</span> paths will be fetched <span class="er">(</span><span class="ex">35.32</span> MiB download, 145.96 MiB unpacked<span class="kw">)</span><span class="bu">:</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/1krs71lr68pvwjf21fq3f8wbw4c460sh-gcc-6.4.0</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/gya4nskw8khp28vy0f8m01lf4z8337cz-stdenv-darwin</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/yn7m3qnp0m3kf1acpjyxwqxzf3b40jf8-gcc-wrapper-6.4.0</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a><span class="ex">g++</span> <span class="er">(</span><span class="ex">GCC</span><span class="kw">)</span> <span class="ex">6.4.0</span></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a><span class="ex">Copyright</span> <span class="er">(</span><span class="ex">C</span><span class="kw">)</span> <span class="ex">2017</span> Free Software Foundation, Inc.</span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a><span class="ex">This</span> is free software<span class="kw">;</span> <span class="ex">see</span> the source for copying conditions.  There is NO</span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true" tabindex="-1"></a><span class="ex">warranty</span><span class="kw">;</span> <span class="ex">not</span> even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true" tabindex="-1"></a><span class="ex">g++</span> <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-c</span> main.cpp</span>
<span id="cb16-17"><a href="#cb16-17" aria-hidden="true" tabindex="-1"></a><span class="ex">g++</span> <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-I..</span>/include <span class="at">-c</span> test.cpp</span>
<span id="cb16-18"><a href="#cb16-18" aria-hidden="true" tabindex="-1"></a><span class="ex">g++</span> <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-I..</span>/include <span class="at">-c</span> math_expression.cpp</span>
<span id="cb16-19"><a href="#cb16-19" aria-hidden="true" tabindex="-1"></a><span class="ex">g++</span> <span class="at">-o</span> main main.o test.o math_expression.o</span>
<span id="cb16-20"><a href="#cb16-20" aria-hidden="true" tabindex="-1"></a><span class="ex">===============================================================================</span></span>
<span id="cb16-21"><a href="#cb16-21" aria-hidden="true" tabindex="-1"></a><span class="ex">All</span> tests passed <span class="er">(</span><span class="ex">172</span> assertions in 11 test cases<span class="kw">)</span></span></code></pre></div>
<p>The magic <code>--arg stdenv "with (import &lt;nixpkgs&gt; {}); gccStdenv"</code> line pushed a GCC build environment into the <code>stdenv</code> variable.
The <code>$CXX --version</code> command in the <code>--command</code> part of the command line shows that it’s really GCC 6.4.0 now (instead of clang).</p>
<p>We can do the same with GCC 7:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="dt">\</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>  <span class="at">--command</span> <span class="st">&quot;</span><span class="dt">\$</span><span class="st">CXX --version &amp;&amp; cd test &amp;&amp; make -B -j4 &amp;&amp; ./main&quot;</span> <span class="dt">\</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>  <span class="at">--arg</span> stdenv <span class="st">&quot;with (import &lt;nixpkgs&gt; {}); overrideCC gccStdenv gcc7&quot;</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a><span class="ex">these</span> derivations will be built:</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/860fz8zccpxnia4ahzmxcvygms29nn1y-stdenv-darwin.drv</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/lnhid58mlkgcaqq6dg0mnaly7y2p1ap4-googlebench-1.3.0.drv</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a><span class="ex">these</span> paths will be fetched <span class="er">(</span><span class="ex">37.09</span> MiB download, 154.89 MiB unpacked<span class="kw">)</span><span class="bu">:</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/27mxffxnw9q070wqfzhpn3p32h0kafws-gcc-7.2.0-lib</span></span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/nknfwhafb2cwlrrwxh5dcwbdznf1fzq1-gcc-7.2.0</span></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/xxb7a4i2y7mn6y0mkkzgy2cgnd78hahp-gcc-wrapper-7.2.0</span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a><span class="ex">g++</span> <span class="er">(</span><span class="ex">GCC</span><span class="kw">)</span> <span class="ex">7.2.0</span></span>
<span id="cb17-13"><a href="#cb17-13" aria-hidden="true" tabindex="-1"></a><span class="ex">Copyright</span> <span class="er">(</span><span class="ex">C</span><span class="kw">)</span> <span class="ex">2017</span> Free Software Foundation, Inc.</span>
<span id="cb17-14"><a href="#cb17-14" aria-hidden="true" tabindex="-1"></a><span class="ex">This</span> is free software<span class="kw">;</span> <span class="ex">see</span> the source for copying conditions.  There is NO</span>
<span id="cb17-15"><a href="#cb17-15" aria-hidden="true" tabindex="-1"></a><span class="ex">warranty</span><span class="kw">;</span> <span class="ex">not</span> even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span>
<span id="cb17-16"><a href="#cb17-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-17"><a href="#cb17-17" aria-hidden="true" tabindex="-1"></a><span class="ex">g++</span> <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-c</span> main.cpp</span>
<span id="cb17-18"><a href="#cb17-18" aria-hidden="true" tabindex="-1"></a><span class="ex">g++</span> <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-I..</span>/include <span class="at">-c</span> test.cpp</span>
<span id="cb17-19"><a href="#cb17-19" aria-hidden="true" tabindex="-1"></a><span class="ex">g++</span> <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-I..</span>/include <span class="at">-c</span> math_expression.cpp</span>
<span id="cb17-20"><a href="#cb17-20" aria-hidden="true" tabindex="-1"></a><span class="ex">g++</span> <span class="at">-o</span> main main.o test.o math_expression.o</span>
<span id="cb17-21"><a href="#cb17-21" aria-hidden="true" tabindex="-1"></a><span class="ex">===============================================================================</span></span>
<span id="cb17-22"><a href="#cb17-22" aria-hidden="true" tabindex="-1"></a><span class="ex">All</span> tests passed <span class="er">(</span><span class="ex">172</span> assertions in 11 test cases<span class="kw">)</span></span></code></pre></div>
<p>Easy. It downloads <em>another</em> GCC and uses that for building.</p>
<p>Using the same strategy, we can also run our benchmarks with all these compilers.
We could even write a Nix derivation that actually does this and generates a nice GNUPlot chart from all benchmark runs.</p>
<h2 id="fallout">Fallout</h2>
<p>While playing around, we installed at least 3 different compilers and recompiled the google benchmark library for each of them.
A nice thing about this is that this all needs to be done only once.
The resulting packages can then be used again on the next invocation of a <code>nix-shell</code> environment.
Even better: if another project happens to need the same compiler/libraries, then they are in place already!
These things are shared system wide now:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> find /nix/store <span class="dt">\(</span> <span class="at">-name</span> <span class="st">&quot;*googlebench*&quot;</span> <span class="at">-or</span> <span class="at">-name</span> <span class="st">&quot;*gcc*&quot;</span> <span class="at">-or</span> <span class="at">-name</span> <span class="st">&quot;*catch*&quot;</span> or <span class="at">-name</span> <span class="st">&quot;*clang*&quot;</span> <span class="dt">\)</span> <span class="at">-type</span> d <span class="at">-maxdepth</span> 1</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/62g4h135grzi5xn5y7hyrxg1r8ac408g-catch-2.1.2</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/2bz86w853wz8q036armrqzds1wh41l2d-googlebench-1.3.0</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/294rz6hxllqp5iqag01p2ymv37g25zhz-googlebench-1.3.0</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/02hca1p50i735iimv28cj9l0lmdzwljn-googlebench-1.3.0</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/5giskx5cy9q2qhv946svwmqw77vbr2iy-clang-4.0.1</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/mx8870valpdhywaaq16sdiiajrpyj4q7-clang-wrapper-4.0.1</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/1krs71lr68pvwjf21fq3f8wbw4c460sh-gcc-6.4.0</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/1p5bg2c6pd2v1lgnf0823sxcilf73ydi-gcc-6.4.0-lib</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/yn7m3qnp0m3kf1acpjyxwqxzf3b40jf8-gcc-wrapper-6.4.0</span></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/nknfwhafb2cwlrrwxh5dcwbdznf1fzq1-gcc-7.2.0</span></span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/27mxffxnw9q070wqfzhpn3p32h0kafws-gcc-7.2.0-lib</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/xxb7a4i2y7mn6y0mkkzgy2cgnd78hahp-gcc-wrapper-7.2.0</span></span></code></pre></div>
<p>So we can see that we have one version of clang, two versions of GCC, just one version of catch and three versions of googlebench.
There is of course only one version of catch becasue it is just a header that does not need to be recompiled for different compilers.</p>
<p>But how does Nix know which googlebench installation belongs to which clang/GCC?</p>
<p>The long cryptic prefix of every package folder is the <em>hash of its build configuration</em>!
The compiler choice is part of the build configuration, of course.</p>
<p>If another project has dependencies that overlap with ours in the sense that some dependency turns out to have the same configuraiton hash for the same package, then it will be shared.
As soon as the configuration changes a little bit - another package is created.</p>
<p>We can now delete everything with one command:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-collect-garbage <span class="at">-d</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="ex">removing</span> old generations of profile /nix/var/nix/profiles/per-user/tfc/profile</span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="ex">removing</span> old generations of profile /nix/var/nix/profiles/per-user/tfc/channels</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a><span class="ex">finding</span> garbage collector roots...</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a><span class="ex">deleting</span> unused links...</span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a><span class="ex">note:</span> currently hard linking saves 0.00 MiB</span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a><span class="ex">606</span> store paths deleted, 358.10 MiB freed</span></code></pre></div>
<p>That’s it.
Our system is free of everything what was installed just for this project.</p>
<h2 id="purity">Purity</h2>
<p>By running <code>nix-shell --pure</code>, it is possible to <em>hide</em> everything which was not explicitly declared to be available:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">--pure</span> <span class="at">-p</span> gcc7</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell:~]$</span> clang++</span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a><span class="ex">bash:</span> clang++: command not found</span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell:~]$</span> exit</span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">--pure</span> <span class="at">-p</span> clang</span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-10"><a href="#cb20-10" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell:~]$</span> g++</span>
<span id="cb20-11"><a href="#cb20-11" aria-hidden="true" tabindex="-1"></a><span class="ex">bash:</span> g++: command not found</span></code></pre></div>
<p>Using <code>--pure</code>, we can check if our <code>default.nix</code> <em>really</em> contains the complete list of dependencies.
That feature is something most other dependency management tools don’t do for us.</p>
<p>This way it cannot happen that a project builds on one computer, but not on the other, just because someone forgot to install something else that is implicitly needed.</p>
<h2 id="summary">Summary</h2>
<p>Nix just helped us with:</p>
<ul>
<li>fetching, compiling, and installing dependencies including compilers and libraries</li>
<li>easily changing the compiler and version between builds</li>
<li>managing all those dependencies without interference</li>
<li>getting rid of it again</li>
</ul>
<p>Maybe Conan would also have been able to do that (apart from the <code>--pure</code> feature).
Nix however does not only work for C/C++ projects:
It can be used for Rust, Haskell, Python, Ruby, etc. etc. - because it is a <em>universal</em> dependency manager.</p>
<p>Writing your own Nix derivations is only necessary if custom- or extremely new package versions are needed.
It is also not hard to do.
Existing packages can be rebuilt with different configurations, too.</p>
<p>Being completely amazed, i also installed NixOS on my laptop.
What’s great there is that i am now able to configure the whole system with just one <code>.nix</code> configuration file.
When that file changes, Nix automatically restarts only the affected services.
If it does not work, then it is possible to roll the system back to a previous configuration. (Remember all the stuff in <code>/nix/store/...</code>? It’s still there until it’s garbage-collected!)
The same system configuration could be used to clone the system elsewhere, etc.</p>
<p>This article is really just scratching the surface of Nix/NixOS’s possibilities.</p>]]></summary>
</entry>
<entry>
    <title>Iterators are also part of the C++ zero cost abstractions</title>
    <link href="https://blog.galowicz.de/2017/07/02/order2_iterator" />
    <id>https://blog.galowicz.de/2017/07/02/order2_iterator</id>
    <published>2017-07-02T00:00:00Z</published>
    <updated>2017-07-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!-- cSpell:disable -->
<p>This article picks up an example operating system kernel code snippet that is written in C++, but looks like “C with classes”.
I think it is a great idea to implement Embedded projects/kernels in C++ instead of C and it’s nice to see that the number of embedded system developers that use C++ is rising.
Unfortunately, I see stagnation in terms of modern programming in embedded/kernel projects in the industry.
After diving through the context i demonstrate how to implement a nice iterator as a zero cost abstraction that helps tidy up the code.</p>
<!--more-->
<h2 id="the-real-life-story">The real life story</h2>
<blockquote>
<p>This context dive is rather long.
If you dont care about the actual logic behind the code, just jump to the next section.</p>
</blockquote>
<p>As an intern at Intel Labs in 2012, I had my first contact with microkernel operating systems that were implemented in C++.
This article concentrates on a recurring code pattern that I have seen very often in the following years also in other companies.
I have the opinion that such code should be written <em>once</em> as a little library helper.</p>
<p>Let’s jump right into it:
Most operating systems allow processes to share memory.
Memory is then usually shared by one process that tells the operating system kernel to map a specific memory range into the address space of another process, possibly at some different address than where it is visible for the original process.</p>
<p>In those <a href="https://en.wikipedia.org/wiki/Microkernel">microkernel operating system</a> environments I have been working on, memory ranges were described in a very specific way:
The beginning of a chunk is described by its <em>page number</em> in the virtual memory space.
The size of a chunk is described by its <em>order</em>.</p>
<blockquote>
<p>Both these characteristics are then part of a <em>capability range descriptor</em> and are used by some microkernel operating systems to describe ranges of memory, I/O ports, kernel objects, etc.
Capabilities are a <a href="https://en.wikipedia.org/wiki/Capability-based_security">security concept</a> i would like to ignore as much as possible for now, because the scope of this article is the maths behind capability range descriptors.</p>
</blockquote>
<p>Example:
A memory range that is 4 memory pages large and begins at address <code>0x123000</code> is described by <code>(0x123, 2)</code>.
We get from <code>0x123000</code> to <code>0x123</code>, because pages are 4096 bytes (0x1000 in hex) large. That means that we need to divide a virtual address pointer value by <code>0x1000</code> and get a virtual page number.
From 4 pages we get to the order value <code>2</code>, because <span class="math inline">4 = 2<sup>2</sup></span>, so the order is 2.</p>
<p>Ok, that is simple. It stops being simple as soon as one describes real-life memory ranges.
Such a <code>(base, order)</code> tuple is also called a <em>capability range descriptor</em>, and must follow the following rules:</p>
<ol type="1">
<li>Every memory capability’s size must be a power of 2. (By storing only the order, this rule is implicitly followed by design.)</li>
<li>Every capability’s base must be evenly divisible by its size.</li>
</ol>
<p>That means if we want to describe the memory range <code>[0x100, 0x107)</code> (the notation <code>[a, b)</code> means that the range goes from <code>a</code> to <code>b</code>, but does not contain <code>b</code>. Like it is the case for begin/end iterator pairs) following those rules, we would break it into multiple capability range descriptors:</p>
<ul>
<li><code>(0x100, 2)</code>, <span class="math inline">2<sup>2</sup> = 4</span> pages</li>
<li><code>(0x104, 1)</code>, <span class="math inline">2<sup>1</sup> = 2</span> pages</li>
<li><code>(0x106, 0)</code>, <span class="math inline">2<sup>0</sup> = 1</span> pages</li>
</ul>
<p>Let’s get towards actual code:
Mapping such an example range to another process’s address space would then look like the following code, which maps its own range <code>[0x100, 0x107)</code> to <code>[0x200, 0x207)</code> in the namespace of the other process using a structure <code>map_helper</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>map_helper<span class="op">.</span>source_base <span class="op">=</span> <span class="bn">0x100</span><span class="op">;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>map_helper<span class="op">.</span>push_back<span class="op">(</span><span class="bn">0x200</span><span class="op">,</span> <span class="dv">2</span><span class="op">);</span> <span class="co">// 2^2 pages = 4 pages</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>map_helper<span class="op">.</span>push_back<span class="op">(</span><span class="bn">0x204</span><span class="op">,</span> <span class="dv">1</span><span class="op">);</span> <span class="co">// 2^1 pages = 2 page</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>map_helper<span class="op">.</span>push_back<span class="op">(</span><span class="bn">0x206</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span> <span class="co">// 2^0 pages = 1 page</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>                                <span class="co">//       sum = 7 pages</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>map_helper<span class="op">.</span>delegate<span class="op">(</span>target_address_space<span class="op">);</span></span></code></pre></div>
<p>The <code>map_helper.delegate(...)</code> call results in a system call to the kernel which does the actual memory mapping.
In order to not result in one system call per mapping, <code>map_helper</code> accepts a whole batch of mappings that are sent to the kernel in one run.</p>
<blockquote>
<p>This looks very complicated but it is necessary to keep the microkernel <em>micro</em>.
When the kernel gets mapping requests preformatted like this, the kernel code that applies the mapping contains much less complicated logic.
An operating system kernel with a reduced amount of complicated logic is a good thing to have because then it is easier to prove that it is <em>correct</em>.</p>
</blockquote>
<p>Ok, that is nearly everything about expressing memory mappings with the logic of capability range descriptors.
There is one last quirk.</p>
<p>Imagine we want to map the range <code>[0x0, 0x10)</code>, which can be expressed as <code>(0x0, 4)</code> (<code>0x10 = 16</code>, and <span class="math inline">16 = 2<sup>4</sup></span>), to the range <code>[0x1, 0x11)</code> in the other process’s address space.
That should be easy since they only have an offset of 1 page to each other.
What is visible at address <code>0x1000</code> in the first process, will be visible at address <code>0x2000</code> in the other.
Actually, it is not that easy, because the capability range descriptor <code>(0x0, 4)</code> can not simply be described as <code>(0x1, 4)</code> in the other process’s address space.
It violates rule number 2 because <code>0x1</code> is not evenly divisible by <code>0x10</code>!</p>
<p>Frustratingly, this means that we need to break down the whole descriptor <code>(0x0, 4)</code> into 16 descriptors with order <code>0</code> because only such small ones have mappings that comply with the two rules in <strong>both</strong> address spaces.</p>
<p>This was already a worst-case example.
Another less bad example is the following one:
If we want to map <code>[0x0, 0x10)</code> to <code>[0x8, 0x18)</code> in the other process, we could do that with the two descriptors <code>(0, 3)</code> and <code>(8, 3)</code>, because both offsets <code>0x0</code> and <code>0x8</code> are evenly divisible by 8.
That allows for larger chunks.</p>
<p>A generic function that maps <em>any</em> page range to another process’s address space could finally look like the following:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> map<span class="op">(</span><span class="dt">word_t</span> base1<span class="op">,</span> <span class="dt">word_t</span> base2<span class="op">,</span> <span class="dt">word_t</span> size<span class="op">,</span> <span class="dt">foo_t</span> target_address_space<span class="op">)</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    map_helper<span class="op">.</span>source_base <span class="op">=</span> base1<span class="op">;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">constexpr</span> <span class="dt">word_t</span> max_bit <span class="op">{</span><span class="dv">1</span><span class="bu">ull</span> <span class="op">&lt;&lt;</span> <span class="op">(</span><span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>max_bit<span class="op">)</span> <span class="op">-</span> <span class="dv">1</span><span class="op">)};</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(</span>size<span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>        <span class="co">// take smaller order of both bases, as both must be divisible by it.</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> min_order <span class="op">{</span>order_min<span class="op">(</span>base1 <span class="op">|</span> base2 <span class="op">|</span> max_bit<span class="op">)};</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        <span class="co">// take largest possible order from actual size of unmapped rest</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> max_order <span class="op">{</span>order_max<span class="op">(</span>size<span class="op">)};</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>        <span class="co">// choose smaller of both</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> order     <span class="op">{</span>min<span class="op">(</span>min_order<span class="op">,</span> max_order<span class="op">)};</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>        map_helper<span class="op">.</span>push_back<span class="op">(</span>base2<span class="op">,</span> order<span class="op">);</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>map_helper<span class="op">.</span>full<span class="op">())</span> <span class="op">{</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>            map_helper<span class="op">.</span>delegate<span class="op">(</span>target_address_space<span class="op">);</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>            map_helper<span class="op">.</span>reset<span class="op">();</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>            map_helper<span class="op">.</span>source_base <span class="op">=</span> base1<span class="op">;</span></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> step <span class="op">{</span><span class="dv">1</span><span class="bu">ull</span> <span class="op">&lt;&lt;</span> order<span class="op">};</span></span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>        base1 <span class="op">+=</span> step<span class="op">;</span></span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>        base2 <span class="op">+=</span> step<span class="op">;</span></span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a>        size  <span class="op">-=</span> step<span class="op">;</span></span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>    map_helper<span class="op">.</span>delegate<span class="op">(</span>target_address_space<span class="op">);</span></span>
<span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>As a newcomer to such a project, you will soon understand the maths behind it.
You will see it everywhere, because the same technique is used for sharing memory, I/O ports, and descriptors for kernel objects like threads, semaphores, etc. between processes.</p>
<p>After you have seen repeatedly exactly the same calculation with different <em>payload</em> code between it, you might get sick of it.
Everywhere in the code base where this pattern is repeated, you have to follow the calculations thoroughly in order to see if it is <strong>really</strong> the same formula.
If it is, you may wonder why no one writes some kind of library for it instead of duplicating the formula in code again and again.
And if it is <em>not</em> the same formula - is that because it is wrong or is there an actual idea behind that?
It is plainly annoying to write and read this from the ground on all the time.</p>
<h2 id="library-thoughts">Library thoughts</h2>
<p>Ok, let’s assume that this piece of math will be recurring very often and we want to provide a nice abstraction for it.
This would have multiple advantages:</p>
<ul>
<li>Reduced code duplication.</li>
<li>Correctness: The library can be tested meticulously, and all user code will automatically profit from that. No one could ever do wrong descriptor calculations any longer if he/she just used the library.</li>
<li>Readability: User code will not be polluted by the same calculations again and again. Users do not even need to be able to implement the maths themselves.</li>
</ul>
<p>One possibility is to write a function <code>map_generic</code> that accepts a callback function that would get already calculated chunks as parameters and that would then do the payload magic:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">typename</span> F<span class="op">&gt;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> map_generic<span class="op">(</span><span class="dt">word_t</span> base1<span class="op">,</span> <span class="dt">word_t</span> base2<span class="op">,</span> <span class="dt">word_t</span> size<span class="op">,</span> F f<span class="op">)</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">constexpr</span> <span class="dt">word_t</span> max_bit <span class="op">{</span><span class="dv">1</span><span class="bu">ull</span> <span class="op">&lt;&lt;</span> <span class="op">(</span><span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>max_bit<span class="op">)</span> <span class="op">-</span> <span class="dv">1</span><span class="op">)};</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(</span>size<span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>        <span class="co">// take smallest order of both bases, as both must be divisible by it.</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> min_order <span class="op">{</span>order_min<span class="op">(</span>base1 <span class="op">|</span> base2 <span class="op">|</span> max_bit<span class="op">)};</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>        <span class="co">// take largest possible order from actual size of unmapped rest</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> max_order <span class="op">{</span>order_max<span class="op">(</span>size<span class="op">)};</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>        <span class="co">// choose smallest of both</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> order     <span class="op">{</span>min<span class="op">(</span>min_order<span class="op">,</span> max_order<span class="op">)};</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>        f<span class="op">(</span>base1<span class="op">,</span> base2<span class="op">,</span> order<span class="op">);</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> step <span class="op">{</span><span class="dv">1</span><span class="bu">ull</span> <span class="op">&lt;&lt;</span> order<span class="op">};</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>        base1 <span class="op">+=</span> step<span class="op">;</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>        base2 <span class="op">+=</span> step<span class="op">;</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>        size  <span class="op">-=</span> step<span class="op">;</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> map<span class="op">(</span><span class="dt">word_t</span> base1<span class="op">,</span> <span class="dt">word_t</span> base2<span class="op">,</span> <span class="dt">word_t</span> size<span class="op">,</span> <span class="dt">foo_t</span> target_address_space<span class="op">)</span></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>    map_helper<span class="op">.</span>source_base <span class="op">=</span> base1<span class="op">;</span></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>    map_generic<span class="op">(</span>base1<span class="op">,</span> base2<span class="op">,</span> size<span class="op">,</span></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>        <span class="op">[&amp;</span>map_helper<span class="op">](</span><span class="dt">word_t</span> b1<span class="op">,</span> <span class="dt">word_t</span> b2<span class="op">,</span> <span class="dt">word_t</span> order<span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>            map_helper<span class="op">.</span>push_back<span class="op">(</span>b2<span class="op">,</span> order<span class="op">);</span></span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">(</span>map_helper<span class="op">.</span>full<span class="op">())</span> <span class="op">{</span></span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>                map_helper<span class="op">.</span>delegate<span class="op">(</span>target_address_space<span class="op">);</span></span>
<span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a>                map_helper<span class="op">.</span>reset<span class="op">();</span></span>
<span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a>                map_helper<span class="op">.</span>source_base <span class="op">=</span> b1<span class="op">;</span></span>
<span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a>        <span class="op">});</span></span>
<span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a>    map_helper<span class="op">.</span>delegate<span class="op">(</span>target_address_space<span class="op">);</span></span>
<span id="cb3-40"><a href="#cb3-40" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>What we have is now the pure math of capability range composition of generic ranges in <code>map_generic</code> and actual memory mapping code in <code>map</code>.
This is already much better but leaves us without control <em>how many</em> chunks we actually want to consume at a time.
As soon as we start <code>map_generic</code>, it will shoot all the sub-ranges at our callback function.
At this point, it is hard to stop.
And if we were able to stop it (for example by returning <code>true</code> from the callback whenever it shall continue and returning <code>false</code> if it shall stop), it would be hard to resume from where we stopped it.
It’s just hardly composable coding style.</p>
<h2 id="the-iterator-library">The iterator library</h2>
<p>After all, this is C++.
Can’t we have some really nice and composable things here?
Of course, we can.
How about iterators?
We could define an iterable range class which we can feed with our memory geometry.
When such a range is iterated over, it emits the sub-ranges.</p>
<p>So let’s implement this in terms of an iterator.
If you don’t know yet how to implement iterators, you might want to have a look at <a href="/2016/09/04/algorithms_in_iterators">my other article where i explain how to implement your own iterator</a>.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode numberSource cpp numberLines"><code class="sourceCode cpp"><span id="cb4-1"><a href="#cb4-1"></a><span class="pp">#include </span><span class="im">&lt;cstdint&gt;</span><span class="pp">   </span><span class="co">// uintptr_t</span></span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span><span class="pp"> </span><span class="co">// min/max</span></span>
<span id="cb4-3"><a href="#cb4-3"></a><span class="pp">#include </span><span class="im">&lt;tuple&gt;</span></span>
<span id="cb4-4"><a href="#cb4-4"></a></span>
<span id="cb4-5"><a href="#cb4-5"></a><span class="kw">using</span> <span class="dt">word_t</span> <span class="op">=</span> <span class="dt">uintptr_t</span><span class="op">;</span></span>
<span id="cb4-6"><a href="#cb4-6"></a></span>
<span id="cb4-7"><a href="#cb4-7"></a><span class="at">static</span> <span class="dt">word_t</span> current_order<span class="op">(</span><span class="dt">word_t</span> base<span class="op">,</span> <span class="dt">word_t</span> rest<span class="op">)</span> <span class="op">{</span></span>
<span id="cb4-8"><a href="#cb4-8"></a>    <span class="at">const</span> <span class="dt">word_t</span> max_bit   <span class="op">{</span><span class="dv">1</span><span class="bu">ull</span> <span class="op">&lt;&lt;</span> <span class="op">(</span><span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>max_bit<span class="op">)</span> <span class="op">-</span> <span class="dv">1</span><span class="op">)};</span></span>
<span id="cb4-9"><a href="#cb4-9"></a>    <span class="at">const</span> <span class="dt">word_t</span> min_order <span class="op">{</span>order_min<span class="op">(</span>base <span class="op">|</span> max_bit<span class="op">)};</span></span>
<span id="cb4-10"><a href="#cb4-10"></a>    <span class="at">const</span> <span class="dt">word_t</span> max_order <span class="op">{</span>order_max<span class="op">(</span>rest<span class="op">)};</span></span>
<span id="cb4-11"><a href="#cb4-11"></a>    <span class="cf">return</span> <span class="bu">std::</span>min<span class="op">(</span>min_order<span class="op">,</span> max_order<span class="op">);</span></span>
<span id="cb4-12"><a href="#cb4-12"></a><span class="op">}</span></span>
<span id="cb4-13"><a href="#cb4-13"></a></span>
<span id="cb4-14"><a href="#cb4-14"></a><span class="co">// This class is iterable range and iterator at the same time</span></span>
<span id="cb4-15"><a href="#cb4-15"></a><span class="kw">struct</span> order_range</span>
<span id="cb4-16"><a href="#cb4-16"></a><span class="op">{</span></span>
<span id="cb4-17"><a href="#cb4-17"></a>    <span class="dt">word_t</span> base1<span class="op">;</span></span>
<span id="cb4-18"><a href="#cb4-18"></a>    <span class="dt">word_t</span> base2<span class="op">;</span></span>
<span id="cb4-19"><a href="#cb4-19"></a>    <span class="dt">word_t</span> size<span class="op">;</span></span>
<span id="cb4-20"><a href="#cb4-20"></a></span>
<span id="cb4-21"><a href="#cb4-21"></a>    <span class="co">// operator-Xs fulfill the iterator interface</span></span>
<span id="cb4-22"><a href="#cb4-22"></a>    <span class="bu">std::</span>tuple<span class="op">&lt;</span><span class="dt">word_t</span><span class="op">,</span> <span class="dt">word_t</span><span class="op">,</span> <span class="dt">word_t</span><span class="op">&gt;</span> <span class="kw">operator</span><span class="op">*()</span> <span class="at">const</span> <span class="op">{</span></span>
<span id="cb4-23"><a href="#cb4-23"></a>        <span class="cf">return</span> <span class="op">{</span>base1<span class="op">,</span> base2<span class="op">,</span></span>
<span id="cb4-24"><a href="#cb4-24"></a>                current_order<span class="op">(</span>base1 <span class="op">|</span> base2<span class="op">,</span> size<span class="op">)};</span></span>
<span id="cb4-25"><a href="#cb4-25"></a>    <span class="op">}</span></span>
<span id="cb4-26"><a href="#cb4-26"></a></span>
<span id="cb4-27"><a href="#cb4-27"></a>    order_range<span class="op">&amp;</span> <span class="kw">operator</span><span class="op">++()</span> <span class="op">{</span></span>
<span id="cb4-28"><a href="#cb4-28"></a>        <span class="kw">auto</span> step <span class="op">(</span><span class="dv">1</span><span class="bu">ull</span> <span class="op">&lt;&lt;</span> current_order<span class="op">(</span>base1 <span class="op">|</span> base2<span class="op">,</span> size<span class="op">));</span></span>
<span id="cb4-29"><a href="#cb4-29"></a>        base1 <span class="op">+=</span> step<span class="op">;</span></span>
<span id="cb4-30"><a href="#cb4-30"></a>        base2 <span class="op">+=</span> step<span class="op">;</span></span>
<span id="cb4-31"><a href="#cb4-31"></a>        size  <span class="op">-=</span> step<span class="op">;</span></span>
<span id="cb4-32"><a href="#cb4-32"></a>        <span class="cf">return</span> <span class="op">*</span><span class="kw">this</span><span class="op">;</span></span>
<span id="cb4-33"><a href="#cb4-33"></a>    <span class="op">}</span></span>
<span id="cb4-34"><a href="#cb4-34"></a></span>
<span id="cb4-35"><a href="#cb4-35"></a>    <span class="kw">class</span> it_sentinel <span class="op">{};</span></span>
<span id="cb4-36"><a href="#cb4-36"></a></span>
<span id="cb4-37"><a href="#cb4-37"></a>    <span class="dt">bool</span> <span class="kw">operator</span><span class="op">!=(</span>it_sentinel<span class="op">)</span> <span class="at">const</span> <span class="op">{</span> <span class="cf">return</span> size<span class="op">;</span> <span class="op">}</span></span>
<span id="cb4-38"><a href="#cb4-38"></a></span>
<span id="cb4-39"><a href="#cb4-39"></a>    <span class="co">// begin/end functions fulfill the iterable range interface</span></span>
<span id="cb4-40"><a href="#cb4-40"></a>    order_range begin<span class="op">()</span> <span class="at">const</span> <span class="op">{</span> <span class="cf">return</span> <span class="op">*</span><span class="kw">this</span><span class="op">;</span> <span class="op">}</span></span>
<span id="cb4-41"><a href="#cb4-41"></a>    it_sentinel end<span class="op">()</span>   <span class="at">const</span> <span class="op">{</span> <span class="cf">return</span> <span class="op">{};</span> <span class="op">}</span></span>
<span id="cb4-42"><a href="#cb4-42"></a><span class="op">};</span></span></code></pre></div>
<p>This looks a bit bloaty at first, but this is a one-time implementation after all.
When we compare it with the initial <code>for</code>-loop version, we realize that all the calculations are in the function <code>current_order</code> and <code>operator++</code>.
All the other code is just data storage and retrieval, as well as iterator interface compliance.</p>
<p>It might also at first look strange that the <code>begin()</code> function returns a copy of the <code>order_range</code> instance.
The trick is that this class is at the same time a range and an iterator.</p>
<p>One nice perk of C++17 is, that the <em>end</em> iterator does not need to be of the same type as normal iterators any longer.
This allows for a simpler abort condition (which is: <code>size == 0</code>).</p>
<p>With this tiny order 2 range iterator <em>“library”</em>, we can now do the following.
(Let’s move away from the memory mapping examples to simple <code>printf</code> examples because we will compare them in <a href="https://gcc.godbolt.org">Godbolt</a> later)</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> print_range<span class="op">(</span><span class="dt">word_t</span> base1<span class="op">,</span> <span class="dt">word_t</span> base2<span class="op">,</span> <span class="dt">word_t</span> size<span class="op">)</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="at">const</span> <span class="kw">auto</span> <span class="op">&amp;[</span>b1<span class="op">,</span> b2<span class="op">,</span> order<span class="op">]</span> <span class="op">:</span> order_range<span class="op">{</span>base1<span class="op">,</span> base2<span class="op">,</span> size<span class="op">})</span> <span class="op">{</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>        printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%4zx</span><span class="st"> -&gt; </span><span class="sc">%4zx</span><span class="st">, order </span><span class="sc">%2zu\n</span><span class="st">&quot;</span><span class="op">,</span> b1<span class="op">,</span> b2<span class="op">,</span> order<span class="op">);</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This code just contains <em>pure payload</em>.
There is no trace of the mathematical obfuscation left.</p>
<p>Another differentiating feature from the callback function variant is that we can combine this iterator with STL data structures and algorithms!</p>
<h2 id="comparing-the-resulting-assembly">Comparing the resulting assembly</h2>
<p>What is the price of this abstraction?
Let us see how the non-iterator-version of the same code would look like, and then compare it in the Godbolt assembly output view.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> print_range<span class="op">(</span><span class="dt">word_t</span> base1<span class="op">,</span> <span class="dt">word_t</span> base2<span class="op">,</span> <span class="dt">word_t</span> size<span class="op">)</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">constexpr</span> <span class="dt">word_t</span> max_bit <span class="op">{</span><span class="dv">1</span><span class="bu">ull</span> <span class="op">&lt;&lt;</span> <span class="op">(</span><span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>max_bit<span class="op">)</span> <span class="op">-</span> <span class="dv">1</span><span class="op">)};</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(</span>size<span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> min_order <span class="op">{</span>order_min<span class="op">(</span>base1 <span class="op">|</span> base2 <span class="op">|</span> max_bit<span class="op">)};</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> max_order <span class="op">{</span>order_max<span class="op">(</span>size<span class="op">)};</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> order     <span class="op">{</span><span class="bu">std::</span>min<span class="op">(</span>min_order<span class="op">,</span> max_order<span class="op">)};</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>        printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%4zx</span><span class="st"> -&gt; </span><span class="sc">%4zx</span><span class="st">, order </span><span class="sc">%2zu\n</span><span class="st">&quot;</span><span class="op">,</span> base1<span class="op">,</span> base2<span class="op">,</span> order<span class="op">);</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> step <span class="op">{</span><span class="dv">1</span><span class="bu">ull</span> <span class="op">&lt;&lt;</span> order<span class="op">};</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>        base1 <span class="op">+=</span> step<span class="op">;</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>        base2 <span class="op">+=</span> step<span class="op">;</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>        size  <span class="op">-=</span> step<span class="op">;</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Interestingly, <code>clang++</code> sees exactly what we did there and emits exactly <strong>the same assembly</strong> in <strong>both</strong> cases.
That means that this iterator is a real <strong>zero cost</strong> abstraction!</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>print_range<span class="op">(</span>unsigned long<span class="op">,</span> unsigned long<span class="op">,</span> unsigned long<span class="op">):</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>        <span class="bu">push</span>    <span class="kw">r15</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>        <span class="bu">push</span>    <span class="kw">r14</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>        <span class="bu">push</span>    <span class="kw">r13</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">push</span>    <span class="kw">r12</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>        <span class="bu">push</span>    <span class="kw">rbx</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     <span class="kw">r14</span><span class="op">,</span> <span class="kw">rdx</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     <span class="kw">r15</span><span class="op">,</span> <span class="kw">rsi</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     <span class="kw">r12</span><span class="op">,</span> <span class="kw">rdi</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>        <span class="bu">test</span>    <span class="kw">r14</span><span class="op">,</span> <span class="kw">r14</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">je</span>      <span class="op">.</span>LBB0_3</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>        movabs  <span class="kw">r13</span><span class="op">,</span> <span class="op">-</span><span class="dv">9223372036854775808</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="fu">.LBB0_2:</span> # =&gt;This Inner Loop Header<span class="op">:</span> Depth<span class="op">=</span><span class="dv">1</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     <span class="kw">rax</span><span class="op">,</span> <span class="kw">r12</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>        <span class="bu">or</span>      <span class="kw">rax</span><span class="op">,</span> <span class="kw">r15</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>        <span class="bu">or</span>      <span class="kw">rax</span><span class="op">,</span> <span class="kw">r13</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>        <span class="bu">bsf</span>     <span class="kw">rbx</span><span class="op">,</span> <span class="kw">rax</span></span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>        <span class="bu">bsr</span>     <span class="kw">rax</span><span class="op">,</span> <span class="kw">r14</span></span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>        <span class="bu">cmp</span>     <span class="kw">rax</span><span class="op">,</span> <span class="kw">rbx</span></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>        <span class="bu">cmovb</span>   <span class="kw">rbx</span><span class="op">,</span> <span class="kw">rax</span></span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     <span class="kw">edi</span><span class="op">,</span> <span class="op">.</span>L<span class="op">.</span>str</span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>        <span class="bu">xor</span>     <span class="kw">eax</span><span class="op">,</span> <span class="kw">eax</span></span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     <span class="kw">rsi</span><span class="op">,</span> <span class="kw">r12</span></span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     <span class="kw">rdx</span><span class="op">,</span> <span class="kw">r15</span></span>
<span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     <span class="kw">rcx</span><span class="op">,</span> <span class="kw">rbx</span></span>
<span id="cb7-26"><a href="#cb7-26" aria-hidden="true" tabindex="-1"></a>        <span class="cf">call</span>    printf</span>
<span id="cb7-27"><a href="#cb7-27" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     <span class="kw">eax</span><span class="op">,</span> <span class="dv">1</span></span>
<span id="cb7-28"><a href="#cb7-28" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     <span class="kw">ecx</span><span class="op">,</span> <span class="kw">ebx</span></span>
<span id="cb7-29"><a href="#cb7-29" aria-hidden="true" tabindex="-1"></a>        <span class="bu">shl</span>     <span class="kw">rax</span><span class="op">,</span> <span class="kw">cl</span></span>
<span id="cb7-30"><a href="#cb7-30" aria-hidden="true" tabindex="-1"></a>        <span class="bu">add</span>     <span class="kw">r12</span><span class="op">,</span> <span class="kw">rax</span></span>
<span id="cb7-31"><a href="#cb7-31" aria-hidden="true" tabindex="-1"></a>        <span class="bu">add</span>     <span class="kw">r15</span><span class="op">,</span> <span class="kw">rax</span></span>
<span id="cb7-32"><a href="#cb7-32" aria-hidden="true" tabindex="-1"></a>        <span class="bu">sub</span>     <span class="kw">r14</span><span class="op">,</span> <span class="kw">rax</span></span>
<span id="cb7-33"><a href="#cb7-33" aria-hidden="true" tabindex="-1"></a>        <span class="cf">jne</span>     <span class="op">.</span>LBB0_2</span>
<span id="cb7-34"><a href="#cb7-34" aria-hidden="true" tabindex="-1"></a><span class="fu">.LBB0_3:</span></span>
<span id="cb7-35"><a href="#cb7-35" aria-hidden="true" tabindex="-1"></a>        <span class="bu">pop</span>     <span class="kw">rbx</span></span>
<span id="cb7-36"><a href="#cb7-36" aria-hidden="true" tabindex="-1"></a>        <span class="bu">pop</span>     <span class="kw">r12</span></span>
<span id="cb7-37"><a href="#cb7-37" aria-hidden="true" tabindex="-1"></a>        <span class="bu">pop</span>     <span class="kw">r13</span></span>
<span id="cb7-38"><a href="#cb7-38" aria-hidden="true" tabindex="-1"></a>        <span class="bu">pop</span>     <span class="kw">r14</span></span>
<span id="cb7-39"><a href="#cb7-39" aria-hidden="true" tabindex="-1"></a>        <span class="bu">pop</span>     <span class="kw">r15</span></span>
<span id="cb7-40"><a href="#cb7-40" aria-hidden="true" tabindex="-1"></a>        <span class="cf">ret</span></span>
<span id="cb7-41"><a href="#cb7-41" aria-hidden="true" tabindex="-1"></a><span class="fu">.L.str:</span></span>
<span id="cb7-42"><a href="#cb7-42" aria-hidden="true" tabindex="-1"></a>        .asciz  <span class="st">&quot;%4zx -&gt; %4zx, order %2zu\n&quot;</span></span></code></pre></div>
<p><a href="https://godbolt.org/g/hn3yix">See the whole example in gcc.godbolt.org.</a></p>
<p>When comparing the assembly of both variants with GCC, the result is a little bit disappointing at first:
The <code>for</code>-loop version is 62 lines of assembly vs. 48 lines of assembly for the iterator version.
When looking at how many lines of assembly are the actual loop part, it is still 25 lines for <strong>both</strong> implementations!</p>
<h2 id="summary">Summary</h2>
<p>Hardcore low-level/kernel hackers often claim that it’s disadvantageous to use abstractions like iterators and generic algorithms.
Their code needs to be very small and fast because especially on hot paths, interrupt service routines, and other occasions, the kernel surely must not be bloaty and slow.</p>
<p>Unfortunately, one extreme kind of low-level hackers that keep their code tight and short just out of plain responsibility, are the ones that use the same reasons as an excuse for writing code that contains a lot of duplicates, is complex, hard to read (but surely makes you feel smart while being written), and difficult to test.</p>
<p>Code should be separated into composable libraric parts that serve isolated concerns.
C++ allows combining the goals of reusable software, testable libraries, and logical decoupling with high performance and low binary size.</p>
<p>It is usually worth a try to implement a nice abstraction that turns out to be free with regard to assembly size and performance.</p>
<h2 id="related">Related</h2>
<p>I really enjoyed reading <a href="https://kristerw.blogspot.de/2017/06/a-look-at-range-v3-code-generation.html">Krister Waldfridsson’s article</a> where he primarily analyzes runtime performance of a piece of range-v3 code.
What’s interesting about that article is that he also shows an innocently looking code snippet with a raw <code>for</code>-loop that is slower than equivalent code that uses an STL algorithm, because the STL algorithm helps the compiler optimizing the code.</p>
<p>Another thing that is worth a look and which fits the same topic:
Jason Turner gave a <a href="https://www.youtube.com/watch?v=zBkNBP00wJE">great talk about using C++17 on tiny computers</a>.
He demonstrates how modern C++ programming patterns that help writing better code do <strong>not</strong> lead to bloaty or slow code by compiling and showing the assembly in a Godbolt view.
It actually runs on a real Commodore in the end.</p>]]></summary>
</entry>

</feed>
