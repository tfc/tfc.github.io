<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Jacek's Blog</title>
        <link>https://blog.galowicz.de</link>
        <description><![CDATA[This blog is about programming]]></description>
        <atom:link href="https://blog.galowicz.de/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Mon, 05 Dec 2022 00:00:00 UT</lastBuildDate>
        <item>
    <title>Book Review: A Philosophy of Software Design</title>
    <link>https://blog.galowicz.de/2022/12/05/book-review-a-philosophy-of-software-design</link>
    <description><![CDATA[<p>What does separate the truly great software developers from the average ones?
People have lots of opinions about this, but it’s often hard to describe what
makes the code of a great engineer so good - and what part of it novice
programmers should really try to learn from.
John Ousterhout’s book <a href="https://amzn.to/3B8ufgM">A philosophy of Software Design</a>
aims to answer this question and actually introduces some extraordinarily
appropriate vocabulary for <strong>your</strong> next discussion about software quality.</p>
<!--more-->
<div class="book-cover">
<figure>
<img src="/images/books/a-philosophy-of-software-design.png" alt="Book Cover of “A philosophy of Software Design”" />
<figcaption aria-hidden="true">Book Cover of “A philosophy of Software Design”</figcaption>
</figure>
</div>
<h2 id="the-book">The Book</h2>
<p>The book is originally from 2018 and its second edition has been released in 2021.
It has ~180 pages, so it is a very quick read.</p>
<p>John Ousterhout is a computer science professor for computer who has worked on
all kinds of software related topics, but also spent some time teaching how
to <em>design</em> software in general - or more precisely, looking at the design
itself of software as the underlying challenge.</p>
<p>In his university lectures, as he also describes in this book, he lets his
students exercise the design of different kinds of software solutions for small
systems.
While doing that, he tried to find ways to explain the pitfalls that novice
programmers fall into, and what exactly experienced programmers do differently
so that the software they create not only works, but stays maintainable.</p>
<p>The experiences and insights he describes, were not new to me.
Most of the time I thought “Yeah I know this situation, and it’s also clear to
me how to do it differently - but the problem is always <em>explaining</em> it to
programmers who don’t think this way (yet)!”
But for all the principles and strategies that experienced developers follow
with their gut-feel that they developed over time, John found awesome vocabulary
and ways to explain them to programmers who don’t know them yet.</p>
<h2 id="content-and-structure">Content and Structure</h2>
<p>I experienced the book like a journey over 2 main topics, which shall get their
own subsection each.
As the book is already relatively short and every programmer should read it
anyway, I won’t go much into detail and instead just state the most important
points and principles.</p>
<h3 id="symptoms-and-causes-of-complexity-abstraction-modules-and-interfaces">Symptoms and Causes of Complexity, Abstraction, Modules, and Interfaces</h3>
<p>The preface of the book begins with an observation that is frustratingly apt:</p>
<blockquote>
<p>People have been writing programs for electronic computers for more than 80
years, but there has been surprisingly little conversation about how to design
those programs or what good programs should look like.</p>
</blockquote>
<p>Apart from all the computer languages with their different specialties,
(non-)agile development methodologies, tooling as debuggers, linters, version
control systems, and techniques such as object-oriented/functional programs,
schools, universities and developers’ book shelves typically lack material
about how software should generally be <em>designed</em>.</p>
<p>The average developer just changes their code until the tooling stops emitting
errors/warnings and the code actually does what it is written for.
In some cases, the rules from <em>clean code</em> literature are over-applied,
resulting in short but entangled code.
While doing that, the program’s complexity increases.
Complexity is like a currency of programming: For more features, you give up
your program’s initial simplicity.
This typically ends in programs of huge complexity that cannot be maintained
easily any longer.</p>
<p>Complexity never comes with big leaps but always with a stepwise increase.
The 3 main <strong>symptoms</strong> of complexity are:</p>
<dl>
<dt>Change Amplification</dt>
<dd>
<p>Seemingly simple changes require modifications in many different places.</p>
</dd>
<dt>Cognitive Load</dt>
<dd>
<p>The amount of project-knowledge that a developer needs to know in order to
complete a task.</p>
</dd>
<dt>Unknown Unknowns</dt>
<dd>
<p>It is not obvious which pieces of code must be modified to complete a task.</p>
</dd>
</dl>
<p>The 2 main <strong>causes</strong> of complexity are:</p>
<dl>
<dt>Dependencies</dt>
<dd>
<p>A dependency exists when a given piece of code cannot be understood and
modified in isolation. They can’t be eliminated, but designed carefully.
(This is a definition for the discussions in the book.
Dependencies like installable libraries are not meant in this case)</p>
</dd>
<dt>Obscurity</dt>
<dd>
<p>Obscurity occures when important information is not obvious.</p>
</dd>
</dl>
<p>In order to keep complexity under control (i.e. reach sustainable tradeoffs)
developers need the right mindset.
John distinguishes between two of them:</p>
<dl>
<dt>Tactical Programmers</dt>
<dd>
<p>The main focus of the tactical programmer is to <em>get something working</em>, such
as new features or bug fixes.</p>
</dd>
<dt>Strategic Programmers</dt>
<dd>
<p>The strategic programmer does not think of “working code” as their primary
goal (although accepting that delivered code must always be working).
Their primary goal is a <em>great design</em>.</p>
</dd>
</dl>
<p>Most real companies’ work culture and deadline pressure facilitates the rise of
tactical programmers (also called <em>tactical tornados</em>), which typically write
code with uncontrollable complexity.
Strategical programming requires an <strong>investment mindset</strong> for trading initial
upfront slowdown against long-term improvements.
The fight against continuously increasing complexity are continuous investments.
Discussions between strategic and tactical programmers are often frustrating.</p>
<p>The next topic is the organisation of code into modules (as in classes,
subsystems, or services) that communicate via interfaces.
Modules encapsulate the complexity of systems into domain-specific units.
John coins terms for 2 different kinds of modules:</p>
<dl>
<dt>Deep Modules</dt>
<dd>
<p>The best modules provide powerful functionality over simple interfaces.
They provide good abstraction by providing complex functionality but only
exposing a small fraction of their internal complexity.
One example are the 5 basic system calls for I/O in UNIX operating systems.</p>
</dd>
<dt>Shallow Modules</dt>
<dd>
<p>In contrast to deep modules, shallow ones have relatively complex interfaces,
compared to the functionality they provide.
Many shallow interfaces do not even provide much keystroke saving when used,
compared to their reimplementation.</p>
</dd>
</dl>
<p>Shallow modules are often a result of <em>classitis</em>.
Students at university, or readers of <em>clean code</em> lecture are often advised to
break code into small units.
If this advise is followed without much strategy, it often results in shallow
modules which are not much more than leaking abstractions.</p>
<p>Another interesting word that John introduces in this context is <em>temporal
decomposition</em>:
Developers often structure code modules according to the order
in which operations occur.
This does often lead to code that shares knowledge, but at different places in
the code, leading to change amplification, higher cognitive load, and unknown
unknowns again.</p>
<p>A good rule of thumb in module design that John comes up with is:</p>
<blockquote>
<p>It is more important for a module to have a simple interface than a simple
implementation.</p>
</blockquote>
<p>If a module ends up being too complex, but its interface is very simple, then
this means that it can easily be substituted by a better one.
Also, changes on such a module do not increase change amplification.</p>
<p>Another great principle is <em>define errors out of existence</em>:
John argues that error handling and exceptions make programs much more complex,
and a good way to reduce such complexity is representing data, interfaces, and
semantics in ways that make it impossible to encode erratic cases that need
special handling.</p>
<h3 id="how-to-write-code">How to Write Code</h3>
<p>The second half is about the act of designing and writing code.
John argues that interfaces and modules should be designed twice:
Implementing a design for the first time often exposes new insights that would
lead to a different design in a second approach.</p>
<p>Working hard on the first design attempt, just to throw it away becasue it was
just a vehicle for learning how to do it right:
This is clearly not the mindset of the average programmer.
At first glance, it also looks like it would waste a lot of time, especially
from the point of view of a tactical programmer.</p>
<p>The next chapters are about comments, naming, modifying existing code,
consistency (of style/documentation/etc. across the project), performance,
and contain a lot of fine-grained advise that should not be unknown to the
working programmer.
Because it can’t be summarized by few principles, i do just drop some
interesting highlights:
(These read like rules, and such should never be over-applied in dogmatic
fashion)</p>
<ul>
<li>If an interface <em>comment</em> describes its implementation, it indicates that
the interface is shallow.</li>
<li>If a variable or type <em>name</em> is inherently <em>hard to pick</em>, it indicates a
bad abstraction.</li>
<li>When <em>modifying</em> code:
<ul>
<li>After each change, the system should have the structure that it would have
if yo had designed it from the start with that change in mind.</li>
<li>If you’re not making the design better, you are probably making it worse.</li>
</ul></li>
<li>Software should be designed for <em>ease of reading</em>, not ease of writing.</li>
<li>Test-driven development focuses attention on getting specific features
working, rather than finding the best design.
In other words, it facilitates tactical work more than strategic work.</li>
</ul>
<p>John summarizes in his book’s conclusion:</p>
<blockquote>
<p>The reward for being a good designer is that you get to spend a larger
fraction of your time in the design phase, which is fun.
Poor designers spend most of their time chasing bugs in complicated and
brittle code.</p>
</blockquote>
<h2 id="summary">Summary</h2>
<p>I really enjoyed this book because it gave me effective new vocabulary in the
epic fight against complexity, which is often more social than technical when
arguing with tactical programmers.</p>
<p>Read it, as early as possible, in your developer career.</p>]]></description>
    <pubDate>Mon, 05 Dec 2022 00:00:00 UT</pubDate>
    <guid>https://blog.galowicz.de/2022/12/05/book-review-a-philosophy-of-software-design</guid>
    <dc:creator>Jacek Galowicz</dc:creator>
</item>
<item>
    <title>NixOS Community Oceansprint late 2022 Report</title>
    <link>https://blog.galowicz.de/2022/11/26/nix-community-oceansprint3-report</link>
    <description><![CDATA[<p>This is my trip report from the late 2022 Oceansprint hackathon on Lanzarote.
For more information please also have a look on the website:
<a href="https://oceansprint.org">https://oceansprint.org</a></p>
<!--more-->
<h1 id="oceansprint">Oceansprint</h1>
<p><a href="https://oceansprint.org">Oceansprint</a> is a regular hackathon event in the
NixOS community (i wrote a bit about the community and event location
<a href="/2021/12/12/nix-community-oceansprint-report">in the last article</a>)
that is planned to happen twice a year.
From 21.11. to 25.11.2022 it happened for the third time.
This time we were roughly ~20 participants.</p>
<p>After i was at the first oceansprint, skipped the second, and participated in
the third one again, i have experienced quite an increment in the overall
event’s quality and the group activities.
Big kudos to Neyts Zupan, Domen Kozar and Florian Friesdorf for the great
organization!</p>
<figure>
<img src="/images/2021-12-oceansprint-location.jpg" alt="The Oceansprint location" />
<figcaption aria-hidden="true">The Oceansprint location</figcaption>
</figure>
<h1 id="socializing">Socializing</h1>
<p>During the hacking sessions over the day, we all typically sat in groups based
on who worked together on something.
At breakfast and lunch there was typically some random regrouping involved,
and over the day there were also many sporadic discussions at the coffee
machine.
This, combined with the fact that 99% of the time everyone was disciplined in
speaking english, it was very nice to catch some interesting insights in
random topics when walking by.</p>
<figure>
<img src="/images/2022-oceansprint3-buffet.jpg" alt="The catering Original Tweet" />
<figcaption aria-hidden="true">The catering <a href="https://twitter.com/nzupan/status/1594653961419644932">Original Tweet</a></figcaption>
</figure>
<p>Events that really lifted the interaction to a more fun level away from just
work-related discussions were the big grill party and the catamaran sailing
event (there was also wind surfing and hiking), as well as the regular
strandings at the cocktail bar “el kiosko”.
We even went into the sauna together that Domen has on his balcony.
This way it was possible to get to talk to <em>everyone</em> in more detail over the
week without any hassle and simply having a great time.</p>
<h1 id="sprint-projects">Sprint Projects</h1>
<p>I will only describe the topics where i either participated or that i followed
more closely out of personal interest.
There were many more projects, and i am pretty sure they are covered by other
blog articles.</p>
<h2 id="secure-boot-on-nixos">Secure Boot on NixOS</h2>
<p><a href="https://twitter.com/blitzclone">Julian Stecklina</a> (works at <a href="https://cyberus-technology.de/">Cyberus
Technology</a>), Niklas Sturm (works at
<a href="https://www.secunet.com/">Secunet</a>), and
<a href="https://twitter.com/Ra1t0_Bezar1us">Raito Bezarius</a> worked together to support
Secure Boot on NixOS.
They were very successful this week: We have seen laptops booting with activated
Secureboot and the Gnome Device Security dialogue displaying a green
Secureboot entry:</p>
<figure>
<img src="/images/2022-oceansprint3-secureboot.png" alt="Activated Secureboot on NixOS Original Tweet" />
<figcaption aria-hidden="true">Activated Secureboot on NixOS <a href="https://twitter.com/blitzclone/status/1596108176914493440">Original Tweet</a></figcaption>
</figure>
<p>There is already a pull request on github that introduces this work for at least
developer setups.
For secure and easy production use, some work on key management etc. is still
left to be done.
See the code and more details on github:
<a href="https://github.com/blitz/lanzaboote">github.com/blitz/lanzaboote</a></p>
<p>Multiple aspects of this make this project remarkable:</p>
<ul>
<li>Niklas and Julian did not know Raito before. The collaboration was a
spontaneous result of talking about their project plans on the first evening.</li>
<li>On every ocean sprint so far, we sent different Cyberus co-workers, and this
is the first sprint with Secunet co-workers. So far, every co-worker who
returned learned about new ways how to use nix and NixOS productively for both
personal profit and also company goals.</li>
<li>Both companies Cyberus Technology and Secunet are working with or evaluating
NixOS internally. Getting Secureboot working in NixOS is an important mile
stone.</li>
<li>This is a great example of how the sponsorship money of both companies, which
initially was a donation to support events of this kind, also turned out to be
an investment with immediate return.</li>
</ul>
<h2 id="dream2nix-enhancements">Dream2nix enhancements</h2>
<p><a href="https://github.com/hsjobeki">Johannes Kirschbauer</a> and
<a href="https://github.com/davhau">David Hauer</a> worked together on improving the
<a href="https://nix-community.github.io/dream2nix/">dream2nix</a> project.</p>
<p>From my perspective this is another remarkable collaboration between open source
maintainers and companies, as Johannes aims to push nix for frontend/UI projects
at secunet.
The Oceansprint has been the perfect chance to talk to David about how to get
the most value out of this for all parties over a beer in person.</p>
<h2 id="noogle">Noogle</h2>
<p>Another thing that Johannes and David came up with, is Noogle:
A search machine for nix and nixpkgs library functions.</p>
<figure>
<img src="/images/2022-oceansprint3-noogle.jpg" alt="Noogle Alpha Original Tweet" />
<figcaption aria-hidden="true">Noogle Alpha <a href="https://twitter.com/domenkozar/status/1596168388195545088">Original Tweet</a></figcaption>
</figure>
<p>All Haskellers immediately cheered for this as this is like
<a href="https://hoogle.haskell.org/">hoogle</a>, a great tool for finding the right
function in all available packages.</p>
<h1 id="sponsors">Sponsors</h1>
<p>The sponsors are a very important topic, as such events would not be possible
without them.</p>
<figure>
<img src="/images/2022-oceansprint3-shirt.jpg" alt="The sponsored Oceansprint Shirt Original Tweet" />
<figcaption aria-hidden="true">The sponsored Oceansprint Shirt <a href="https://twitter.com/domenkozar/status/1595004457653309440">Original Tweet</a></figcaption>
</figure>
<p>As one of the founders of Cyberus, i was interested in the company growing
into the Nix(OS) open source community, hence it was natural to become a sponsor
of this event.
In addition to that, i put some effort into convincing secunet to sponsor the
oceansprint, too, as we do work together with this awesome technology and they
are also interested having their colleagues to grow into the community.</p>
<p>After having spoken with the organisers <a href="https://twitter.com/nzupan">Neyts</a> and
<a href="https://twitter.com/domenkozar">Domen</a> at the
<a href="https://2022.nixcon.org/">NixCon 2022 in Paris</a> about the topic of sponsoring,
i learned that they found it easier to motivate small businesses to participate
in sponsoring than the very big ones.</p>
<p>It seems like the pressure to be able to explain the value proposition of a
sponsoring is bigger for large company management.
So far i personally see the following reasons why companies should
sponsor/invest in conferences and hackathons like this:</p>
<ul>
<li>Sponsoring is a good way to reserve seats for your employees at such events.
While attending, they will extend their network and as soon as some open
source library or tool has a problem that needs to be fixed, discussing how
to fix it quickly will be just a phone call with the maintainer away.
I experienced the profit of such short communication channels at work very
often already.</li>
<li>The exposure to long-year community members helps a lot understanding the
used technology better. Especially less experienced colleagues come back with
a lot of enlightment, which is why we try to send different colleagues every
time.</li>
<li>Having your own employees hack together on things with people that are not on
your payroll is a very efficient way to get work done for all participating
sides.</li>
<li>Events like this in the sun with great social activities are a great way to
support the efforts of your most motivated co-workers. The overall motivation
at such events is infectious.</li>
<li>Most big companies use lots and lots of open source technology.
Often, employees do not get enough time due to project constraints, or are
legally not allowed to share code back.
Sponsoring such events is a great way to give back.</li>
</ul>]]></description>
    <pubDate>Sat, 26 Nov 2022 00:00:00 UT</pubDate>
    <guid>https://blog.galowicz.de/2022/11/26/nix-community-oceansprint3-report</guid>
    <dc:creator>Jacek Galowicz</dc:creator>
</item>
<item>
    <title>Filtering Unique Items from Heterogeneous Lists at Compile Time</title>
    <link>https://blog.galowicz.de/2022/03/20/unique-heterogeneous-typelists</link>
    <description><![CDATA[<p>This article is about how to filter unique items from heterogeneous lists on
the type level in Haskell.
This example, without further context, might look a bit esoteric by itself,
but I learned a lot writing it and wanted to share the experience.</p>
<!--more-->
<p>In the last years I’ve been programming more in Haskell than in C++.
I find Haskell is super fascinating because of its mighty type system.
C++ already makes it possible to lift a lot of computation from compile time to run time (using <code>constexpr</code> and template meta programming) with the positive effect of resulting in less code in your binaries.
Less code in your binaries is great, because this means a <a href="https://en.wikipedia.org/wiki/Shift-left_testing">“shift left”</a> of bug potential on the time axis from run time to compile time.
Now Haskell makes this much more interesting because its type system is much more intelligent than the one of C++ or comparable languages.
There are many libraries that show off what’s possible.
My current favorite example because I have been using it a lot is the <a href="https://docs.servant.dev"><code>servant</code></a> library.</p>
<p>I found learning C++ template meta programming very hard in the beginning because it’s completely different than <em>normal</em> programming. But once you get there, it’s really enlightening and helps in cleaner thinking about and designing of what your programs are actually supposed to do.
Trying to do the same things and even more in Haskell, I found the following books and blog articles extremely helpful:</p>
<ul>
<li>Book: <a href="https://leanpub.com/thinking-with-types"><strong>“Thinking with Types”</strong> by Sandy Maguire</a></li>
<li>Book: <a href="https://www.packtpub.com/product/haskell-design-patterns/9781783988723"><strong>“Haskell Design Patterns”</strong> by Ryan Lemmer</a></li>
<li>Blog: <a href="https://hengchu.github.io/posts/2018-05-09-type-lists-and-type-classes.lhs.html"><strong>“Taming Heterogeneous Lists in Haskell”</strong> by Hengchu Zhang</a></li>
</ul>
<p>However, after getting some inspiration what fascinating things some libraries do at the type level, I wanted to give it a try myself and came up with some private hobby challenge that I wanted to try myself.
While trying to hack on the type level, I found the available books and blogs super helpful.
But as so often the case, books/articles often tend to explain the simple things simple, then switch to much more complicated examples, but there is quite some gap between the simple and the (maybe too) advanced examples.
I got lost there unfortunately and came up with a solution to a sub-problem of my hobby challenge that I wanted to share to fill up that gap.</p>
<p>This blog article shows how to:</p>
<ul>
<li>Define a heterogeneous list and print it (looks exactly as known from books/articles)</li>
<li>How to reverse such lists</li>
<li>How to filter out unique type items from them
<ul>
<li>both at type-level and run time because we need both</li>
</ul></li>
</ul>
<p>Let’s start with some includes and GHC extensions that we need.
The full code of this article is <a href="https://gist.github.com/tfc/a525ef630abe215d1ec1d3c50609a340">here</a>.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE AllowAmbiguousTypes    #-}</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE DataKinds              #-}</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE FlexibleContexts       #-}</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE FlexibleInstances      #-}</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE FunctionalDependencies #-}</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE GADTs                  #-}</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE PolyKinds              #-}</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE RankNTypes             #-}</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE ScopedTypeVariables    #-}</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE TypeApplications       #-}</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE TypeFamilies           #-}</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE TypeOperators          #-}</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE UndecidableInstances   #-}</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Data.Kind</span>    (<span class="dt">Type</span>)</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">GHC.TypeLits</span> (<span class="dt">ErrorMessage</span> (<span class="dt">Text</span>), <span class="dt">TypeError</span>)</span></code></pre></div>
<h2 id="heterogeneous-lists">Heterogeneous Lists</h2>
<p>First, we need a way to create a way to describe lists of items that have different types (without polymorphy).</p>
<p>So let’s create the type <code>HList</code> (as in “<strong>H</strong>eterogeneous <strong>List</strong>”) whose GADT constructors help us constructing a list at compile time:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">HList</span><span class="ot"> ::</span> [<span class="dt">Type</span>] <span class="ot">-&gt;</span> <span class="dt">Type</span> <span class="kw">where</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">HNil</span><span class="ot"> ::</span> <span class="dt">HList</span> &#39;[]</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ot">  (:#) ::</span> x <span class="ot">-&gt;</span> <span class="dt">HList</span> xs <span class="ot">-&gt;</span> <span class="dt">HList</span> (x &#39;<span class="op">:</span> xs)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="kw">infixr</span> <span class="dv">5</span> <span class="op">:#</span></span></code></pre></div>
<p>Creating such a hlist now looks like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">A</span> <span class="ot">=</span> <span class="dt">A</span> <span class="dt">Int</span> <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">B</span> <span class="ot">=</span> <span class="dt">B</span> <span class="dt">Int</span> <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">C</span> <span class="ot">=</span> <span class="dt">C</span> <span class="dt">Int</span> <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>abc <span class="ot">=</span> <span class="dt">A</span> <span class="dv">1</span> <span class="op">:#</span> <span class="dt">B</span> <span class="dv">2</span> <span class="op">:#</span> <span class="dt">C</span> <span class="dv">3</span> <span class="op">:#</span> <span class="dt">HNil</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="op">:</span><span class="kw">type</span> abc</span></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<p><span class="get-type">abc :: HList ’[A, B, C]</span></p>
<p>Although other tutorials and books cover this topic already, let us also create at least the <code>Show</code> instance for our <code>HList</code> in order to be able to print not only their types but also their values:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Show</span> (<span class="dt">HList</span> &#39;[]) <span class="kw">where</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="fu">show</span> <span class="dt">HNil</span> <span class="ot">=</span> <span class="st">&quot;HNil&quot;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> (<span class="dt">Show</span> x, <span class="dt">Show</span> (<span class="dt">HList</span> xs))</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=&gt;</span> <span class="dt">Show</span> (<span class="dt">HList</span> (x &#39;<span class="op">:</span> xs)) <span class="kw">where</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="fu">show</span> (x <span class="op">:#</span> xs) <span class="ot">=</span> <span class="fu">show</span> x <span class="op">++</span> <span class="st">&quot; :# &quot;</span> <span class="op">++</span> <span class="fu">show</span> xs</span></code></pre></div>
<p>The implementation is much simpler than the following stuff, because the return type of <code>show</code> is just <code>String</code> and that is easy to assemble from our list construction.</p>
<p>Let’s try it out:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>abc</span></code></pre></div>
<pre><code>A 1 :# B 2 :# C 3 :# HNil</code></pre>
<p>Fine. Off to the more complicated things now.</p>
<h2 id="reversing-hlists">Reversing HLists</h2>
<p>All the examples on the internet first show how to write functions on hlists: First, implement a type class and then all the relevant instances for them. These are usually not too hard to understand and write, because the output type does not really depend on the inputs - just like our <code>Show</code> instance from before.</p>
<p>Having understood that, the next thing that I found hard to achieve was <em>reversing</em> a heterogeneous list.
The reason is, that the return type of a reverse function would completely depend on the input:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">aReverserFunction ::</span> <span class="dt">Hlist</span> &#39;[ <span class="dt">A</span>, <span class="dt">B</span>, <span class="dt">C</span> ] <span class="ot">-&gt;</span> <span class="dt">HList</span> &#39;[ <span class="dt">C</span>, <span class="dt">B</span>, <span class="dt">A</span> ]</span></code></pre></div>
<p>But how to express that programmatically? Implementing the type class would be easy, but I would need to programmatically calculate the output type from the input type.
Without knowing the resulting return type in advance, the type class would be of no use.
Afterward, we can implement the type class that uses this calculated type.</p>
<p>A function on the <em>type level</em> that creates a new type from some input type can be implemented in terms of a <em>type family</em>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">Reverse&#39;</span> (<span class="ot">inputList ::</span> [<span class="dt">Type</span>])</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>                     (<span class="ot">accumulator ::</span> [<span class="dt">Type</span>])</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="ot">                     ::</span> [<span class="dt">Type</span>]</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>                     <span class="kw">where</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Reverse&#39;</span> &#39;[] accumulator <span class="ot">=</span> accumulator</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Reverse&#39;</span> (i &#39;<span class="op">:</span> is) accumulator <span class="ot">=</span> <span class="dt">Reverse&#39;</span> is (i &#39;<span class="op">:</span> accumulator)</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Reverse</span> a <span class="ot">=</span> <span class="dt">Reverse&#39;</span> a &#39;[]</span></code></pre></div>
<p>This function takes an input type list and accumulates the reverse of the list, item by item, on the accumulator argument.
As soon as the input list contains no items any longer, the accumulator is returned.</p>
<p>As it would be otherwise uncomfortable to provide the input list <em>and</em> the accumulator, let’s call this type-level function <code>Reverse'</code> and define a type alias <code>Reverse</code> which just accepts the input list and hides the rest of the interface for us.</p>
<p>This works as expected:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="op">:</span>kind<span class="op">!</span> <span class="dt">Reverse</span> &#39;[ <span class="dt">A</span>, <span class="dt">B</span>, <span class="dt">C</span> ]</span></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<p><span class="get-type">Reverse ‘[ A, B, C ] :: [*]
=’[C, B, A]</span></p>
<p>The type class <code>ReversedHList</code> will provide us a <code>rev'</code> function with just the same interface but at normal function level.
In order to hide this input-and-accumulator interface, we will later define function <code>rev</code> which hides this implementation detail from the user.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">ReversedHList</span> (<span class="ot">inputList ::</span> [<span class="dt">Type</span>])</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>                    (<span class="ot">accumulator ::</span> [<span class="dt">Type</span>])</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>                    (<span class="ot">reversedList ::</span> [<span class="dt">Type</span>])</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">where</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="ot">  rev&#39; ::</span> <span class="dt">HList</span> inputList</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>       <span class="ot">-&gt;</span> <span class="dt">HList</span> accumulator</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>       <span class="ot">-&gt;</span> <span class="dt">HList</span> reversedList</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">ReversedHList</span> &#39;[] a a <span class="kw">where</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>  rev&#39; _ a <span class="ot">=</span> a</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">ReversedHList</span> is (i &#39;<span class="op">:</span> as) rs</span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=&gt;</span> <span class="dt">ReversedHList</span> (i &#39;<span class="op">:</span> is) as rs <span class="kw">where</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>    rev&#39; (i <span class="op">:#</span> is) as <span class="ot">=</span> rev&#39; is (i <span class="op">:#</span> as)</span></code></pre></div>
<p>What’s most interesting here is that <code>reversedList</code> is a type that remains completely unchanged over the instances that are called one after the other.
This is the final return type that needs to be calculated before, and we have not done that, yet.</p>
<p>Our <code>rev</code> function does both hide the accumulator from the user and calculate the result type using our previously implemented <code>Reverse</code> type-level function:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ot">rev ::</span> <span class="kw">forall</span> inputList<span class="op">.</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>       <span class="dt">ReversedHList</span> inputList &#39;[] (<span class="dt">Reverse</span> inputList)</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=&gt;</span> <span class="dt">HList</span> inputList</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="dt">HList</span> (<span class="dt">Reverse</span> inputList)</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>rev i <span class="ot">=</span> rev&#39; <span class="op">@</span>inputList <span class="op">@</span>&#39;[] <span class="op">@</span>(<span class="dt">Reverse</span> inputList) i <span class="dt">HNil</span></span></code></pre></div>
<p>The strange <code>@inputList</code> notation is called <a href="https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/type_applications.html"><em>type application</em></a> and makes it easier to see which instance of function <code>rev'</code> we are calling.
Often enough such hints are not needed (in this specific case the code will compile without), but they also make it easier to read the code due to its explicitness.</p>
<p>That the output type is <code>HList (Reverse inputList)</code> is the simpler part of this function.
But that I have to write down the <code>ReversedHList inputList '[] (Reverse inputList)</code> class constraint is something that I didn’t get for a long time.
If you leave that away, the compiler will give you the following feedback:</p>
<pre><code>&lt;interactive&gt;:3:9: error:
    • No instance for (Rev inputList &#39;[] (Reverse&#39; inputList &#39;[])) arising from a use of ‘rev&#39;’
    • In the expression: rev&#39; @inputList @&#39;[] @(Reverse inputList) i HNil
      In an equation for ‘rev’: rev i = rev&#39; @inputList @&#39;[] @(Reverse inputList) i HNil</code></pre>
<p>I understand this as “Just because you’re using <code>rev'</code> does not mean that I can automatically require the user’s input types to be instances of this class. Please write down this requirement explicitly.”
Thinking about it a bit longer, it does help reading the rest of the code because it explains which type instance it will select first.</p>
<p>After all, the function works just as expected:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="op">:</span><span class="kw">type</span> rev abc</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>rev abc</span></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<p><span class="get-type">rev abc :: HList ’[C, B, A]</span></p>
<pre><code>C 3 :# B 2 :# A 1 :# HNil</code></pre>
<p>Thanks to the <code>Show</code> instance we can nicely inspect our reversed list both at the type- and value-level.</p>
<p>Now, let’s look at the next challenge.</p>
<h2 id="type-level-helper-functions">Type-Level Helper Functions</h2>
<p>In the end we are going to remove duplicate types from heterogeneous lists, but before we arrive there we need to implement some helper functions.</p>
<p>The first helper type-level function tells us if a list already contains some type:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">Contains</span> (<span class="ot">inputList ::</span> [<span class="dt">Type</span>]) (<span class="ot">inputType ::</span> <span class="dt">Type</span>)<span class="ot"> ::</span> <span class="dt">Bool</span> <span class="kw">where</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- head of the list equals the input type</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Contains</span> (x &#39;<span class="op">:</span> _) x <span class="ot">=</span> <span class="dt">&#39;True</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- recursion terminator: list didn&#39;t contain it</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Contains</span> &#39;[] _ <span class="ot">=</span> <span class="dt">&#39;False</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- current head does not equal the input type, so recurse to the next one</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Contains</span> (_ &#39;<span class="op">:</span> xs) x <span class="ot">=</span> <span class="dt">Contains</span> xs x</span></code></pre></div>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="op">:</span>kind<span class="op">!</span> <span class="dt">Contains</span> &#39;[<span class="dt">A</span>, <span class="dt">B</span>, <span class="dt">C</span>] <span class="dt">A</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="op">:</span>kind<span class="op">!</span> <span class="dt">Contains</span> &#39;[<span class="dt">B</span>, <span class="dt">C</span>] <span class="dt">A</span></span></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<p><span class="get-type">Contains ’[A, B, C] A :: Bool
= ’True</span></p>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<p><span class="get-type">Contains ’[B, C] A :: Bool
= ’False</span></p>
<p>This works great.</p>
<p>The next helper that we are going to need later is a type-level if function.
It accepts a bool value on the type-level, and two types of which one is returned back, depending on the boolean condition input:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">If</span> (<span class="ot">condition ::</span> <span class="dt">Bool</span>) (<span class="ot">thenCase ::</span> k) (<span class="ot">elseCase ::</span> k)<span class="ot"> ::</span> k <span class="kw">where</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">If</span> <span class="dt">&#39;True</span>  a _ <span class="ot">=</span> a</span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">If</span> <span class="dt">&#39;False</span> _ b <span class="ot">=</span> b</span></code></pre></div>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="op">:</span>kind<span class="op">!</span> <span class="dt">If</span> <span class="dt">&#39;True</span>  <span class="dt">A</span> <span class="dt">B</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="op">:</span>kind<span class="op">!</span> <span class="dt">If</span> <span class="dt">&#39;False</span> <span class="dt">A</span> <span class="dt">B</span></span></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<p><span class='get-type'>If ’True A B :: *
= A</span></p>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<p><span class='get-type'>If ’False A B :: *
= B</span></p>
<h2 id="filtering-only-unique-items-from-a-list">Filtering Only Unique Items from a List</h2>
<p>The type-level function that immediately puts to use our new <code>Contains</code> and <code>If</code> function shall recursively traverse through an input list and return an output list that only contains the unique types of the input list:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">Uniques</span> (<span class="ot">xs ::</span> [<span class="dt">Type</span>])<span class="ot"> ::</span> [<span class="dt">Type</span>] <span class="kw">where</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Uniques</span> (x &#39;<span class="op">:</span> xs) <span class="ot">=</span> <span class="dt">If</span> (<span class="dt">Contains</span> xs x) (<span class="dt">Uniques</span> xs) (x &#39;<span class="op">:</span> <span class="dt">Uniques</span> xs)</span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Uniques</span> &#39;[] <span class="ot">=</span> &#39;[]</span></code></pre></div>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="op">:</span>kind<span class="op">!</span> <span class="dt">Uniques</span> &#39;[<span class="dt">A</span>, <span class="dt">B</span>, <span class="dt">A</span>, <span class="dt">C</span>]</span></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<p><span class="get-type">Uniques ‘[A, B, A, C] :: [*]
=’[B, A, C]</span></p>
<p>A helper that is going to be handy in the following is the type-level function <code>ContainsHead</code>:
It accepts two type lists as arguments and tests if the first list contains the head element of the second list.</p>
<p>We are later feeding this function into a type class parameter that then helps us selecting the right type class.
In the special case that the second list is <em>empty</em>, we return a comprehensible error message.</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">family</span> <span class="dt">ContainsHead</span> (<span class="ot">listToCheckAgainst ::</span> [<span class="dt">Type</span>])</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>                         (<span class="ot">listToCheck ::</span> [<span class="dt">Type</span>])</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="ot">                         ::</span> <span class="dt">Bool</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>                         <span class="kw">where</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">ContainsHead</span> as (b &#39;<span class="op">:</span> bs) <span class="ot">=</span> <span class="dt">Contains</span> as b</span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">ContainsHead</span> _ &#39;[] <span class="ot">=</span></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a>      <span class="dt">TypeError</span> (<span class="dt">&#39;Text</span> <span class="st">&quot;ContainsHead can&#39;t take off the head of an empty list&quot;</span>)</span></code></pre></div>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="op">:</span>kind<span class="op">!</span> <span class="dt">ContainsHead</span> &#39;[ <span class="dt">A</span>, <span class="dt">B</span>, <span class="dt">C</span> ] &#39;[ <span class="dt">B</span>, <span class="dt">C</span> ]</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="op">:</span>kind<span class="op">!</span> <span class="dt">ContainsHead</span> &#39;[ <span class="dt">A</span> ] &#39;[ <span class="dt">B</span>, <span class="dt">C</span> ]</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="op">:</span>kind<span class="op">!</span> <span class="dt">ContainsHead</span> &#39;[ <span class="dt">A</span>, <span class="dt">B</span>, <span class="dt">C</span> ] &#39;[ ]</span></code></pre></div>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<p><span class="get-type">ContainsHead ‘[ A, B, C ]’[ B, C ] :: Bool
= ’True</span></p>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<p><span class="get-type">ContainsHead ‘[ A ]’[ B, C ] :: Bool
= ’False</span></p>
<style>/* Styles used for the Hoogle display in the pager */
.hoogle-doc {
display: block;
padding-bottom: 1.3em;
padding-left: 0.4em;
}
.hoogle-code {
display: block;
font-family: monospace;
white-space: pre;
}
.hoogle-text {
display: block;
}
.hoogle-name {
color: green;
font-weight: bold;
}
.hoogle-head {
font-weight: bold;
}
.hoogle-sub {
display: block;
margin-left: 0.4em;
}
.hoogle-package {
font-weight: bold;
font-style: italic;
}
.hoogle-module {
font-weight: bold;
}
.hoogle-class {
font-weight: bold;
}
.get-type {
color: green;
font-weight: bold;
font-family: monospace;
display: block;
white-space: pre-wrap;
}
.show-type {
color: green;
font-weight: bold;
font-family: monospace;
margin-left: 1em;
}
.mono {
font-family: monospace;
display: block;
}
.err-msg {
color: red;
font-style: italic;
font-family: monospace;
white-space: pre;
display: block;
}
#unshowable {
color: red;
font-weight: bold;
}
.err-msg.in.collapse {
padding-top: 0.7em;
}
.highlight-code {
white-space: pre;
font-family: monospace;
}
.suggestion-warning {
font-weight: bold;
color: rgb(200, 130, 0);
}
.suggestion-error {
font-weight: bold;
color: red;
}
.suggestion-name {
font-weight: bold;
}
</style>
<p><span class="get-type">ContainsHead ‘[ A, B, C ]’[ ] :: Bool
= (TypeError …)</span></p>
<p>Now we get to the part that turned out to look really complicated:
The class <code>UniqueHList</code> provides us a function <code>ul'</code> that has a similar accumulator based interface like the reverse function.
A given input list is consumed step by step, and if the current item is already in the accumulator list, we drop it.
Otherwise, we put it into the accumulator.
After fully consuming the input list, we can return the accumulator.
The type <code>uniqueList</code> can be forecasted using our <code>Uniques</code> type-level function. It doesn’t change throughout all the instances ass they call each other and pass it from the first call to the last.</p>
<p>The most interesting addition to this interface is the <code>nextElementIsContainedAlready</code> boolean argument.
As the name suggests, one instance fills it out for the next instance so they can decide what to do with the current input list head item, as we will see in the following.</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">UniqueHList</span> (<span class="ot">inList ::</span> [<span class="dt">Type</span>])</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>                  (<span class="ot">accumulator ::</span> [<span class="dt">Type</span>])</span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a>                  (<span class="ot">uniqueList ::</span> [<span class="dt">Type</span>])</span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a>                  (<span class="ot">nextElementIsContainedAlready ::</span> <span class="dt">Bool</span>)</span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a>                  <span class="kw">where</span></span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a><span class="ot">  ulr&#39; ::</span> <span class="dt">HList</span> inList</span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a>       <span class="ot">-&gt;</span> <span class="dt">HList</span> accumulator</span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a>       <span class="ot">-&gt;</span> <span class="dt">HList</span> uniqueList</span></code></pre></div>
<p>The recursion terminal instance is the one where the input list is empty.
In this case we simply return the accumulator.
It is not interesting what the value of the bool argument is in this special case.</p>
<p>I named the class function <code>ulr'</code> as in “<strong>u</strong>nique <strong>l</strong>ist <strong>reversed</strong>”, because due to the accumulator interface of this function, the accumulator will contain all the items in reversed order when we consumed the input list.
We will turn it around later.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">UniqueHList</span> &#39;[] uniqueList uniqueList dontCare <span class="kw">where</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>  ulr&#39; _ x <span class="ot">=</span> x</span></code></pre></div>
<p>In all of the following instances, I used some very much abbreviated type variable names:
<code>is</code> stands for <strong>i</strong>nput item<strong>s</strong>”, <code>as</code> for “<strong>a</strong>ccumulator item<strong>s</strong>”, and <code>us</code> for “<strong>u</strong>nique item<strong>s</strong>”.</p>
<p>The <code>'False</code> value in the <code>nextElementIsContainedAlready</code> argument says that this instance is for the cases where the next input list item is not yet contained by the accumulator.
So by removing it from the input list and prepending it to the accumulator, we do the right thing.</p>
<p>The many type application <code>@</code> things here are a bit noisy, but this time the compiler needs them as a hint.
They basically replicate the class constraint that described what the next instance is.</p>
<p><code>(ContainsHead (i ': as) is)</code> is the next bool value that is put into the next class instance:
The new state of our accumulator will be <code>i ': as</code> in that next instance, so we need to check if the head of the rest of the input list is already contained in that new accumulator.
That is practically the essence of the complicated-looking <code>UniqueHList</code> instance unfolding logic.</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">UniqueHList</span> is (i &#39;<span class="op">:</span> as) us (<span class="dt">ContainsHead</span> (i &#39;<span class="op">:</span> as) is)</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=&gt;</span> <span class="dt">UniqueHList</span> (i &#39;<span class="op">:</span> is) as us <span class="dt">&#39;False</span> <span class="kw">where</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>    ulr&#39; (i <span class="op">:#</span> is) as <span class="ot">=</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a>        ulr&#39; <span class="op">@</span>is <span class="op">@</span>(i &#39;<span class="op">:</span> as) <span class="op">@</span>us <span class="op">@</span>(<span class="dt">ContainsHead</span> (i &#39;<span class="op">:</span> as) is) is (i <span class="op">:#</span> as)</span></code></pre></div>
<p>In the cases where the next item from the input list is already contained by the accumulator, we need to drop it and then call the next instance.</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">UniqueHList</span> is as us (<span class="dt">ContainsHead</span> as is)</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=&gt;</span> <span class="dt">UniqueHList</span> (i &#39;<span class="op">:</span> is) as us <span class="dt">&#39;True</span> <span class="kw">where</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a>    ulr&#39; (_ <span class="op">:#</span> is) as <span class="ot">=</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>        ulr&#39; <span class="op">@</span>is <span class="op">@</span>as <span class="op">@</span>us <span class="op">@</span>(<span class="dt">ContainsHead</span> as is) is as</span></code></pre></div>
<p>We can already call it for a quick test:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a>ulr&#39; <span class="op">@</span>&#39;[<span class="dt">A</span>, <span class="dt">B</span>, <span class="dt">A</span>, <span class="dt">C</span>] <span class="op">@</span>&#39;[] <span class="op">@</span>(<span class="dt">Uniques</span> (<span class="dt">Reverse</span> &#39;[<span class="dt">A</span>, <span class="dt">B</span>, <span class="dt">A</span>, <span class="dt">C</span>])) <span class="op">@</span><span class="dt">&#39;False</span> (<span class="dt">A</span> <span class="dv">1</span> <span class="op">:#</span> <span class="dt">B</span> <span class="dv">2</span> <span class="op">:#</span> <span class="dt">A</span> <span class="dv">3</span> <span class="op">:#</span> <span class="dt">C</span> <span class="dv">4</span> <span class="op">:#</span> <span class="dt">HNil</span>) <span class="dt">HNil</span></span></code></pre></div>
<pre><code>C 4 :# B 2 :# A 1 :# HNil</code></pre>
<p>It works, but what struck me was the fact that the output is the unique list of the reverse input list.
I am pretty sure that if I was smarter, I could construct the whole thing to work more intuitively.
After playing around with the implementation trying to make it nicer without nice results, I concluded that this may be a quest for another day.
I was already happy that it works at all, so let’s continue describing the working state.</p>
<p>Building on the working example input, the function <code>ulr</code> hides all the type hints from the user and calls our class function with the right arguments:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="ot">ulr ::</span> <span class="kw">forall</span> inputList<span class="op">.</span></span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a>       <span class="dt">UniqueHList</span> inputList &#39;[] (<span class="dt">Uniques</span> (<span class="dt">Reverse</span> inputList)) <span class="dt">&#39;False</span></span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a>   <span class="ot">=&gt;</span> <span class="dt">HList</span> inputList</span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true" tabindex="-1"></a>   <span class="ot">-&gt;</span> <span class="dt">HList</span> (<span class="dt">Uniques</span> (<span class="dt">Reverse</span> inputList))</span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true" tabindex="-1"></a>ulr x <span class="ot">=</span> ulr&#39; <span class="op">@</span>inputList <span class="op">@</span>&#39;[] <span class="op">@</span>(<span class="dt">Uniques</span> (<span class="dt">Reverse</span> inputList)) <span class="op">@</span><span class="dt">&#39;False</span> x <span class="dt">HNil</span></span></code></pre></div>
<p>As the user would not expect a reversed output list, let’s concatenate our <code>rev</code> function with the new <code>ulr</code> function to provide the expected results.</p>
<p>The implementation is really simple but writing down the types turned out a bit ugly.
It is surely somehow possible to tell the compiler that <code>Reverse (Uniques (Reverse x))</code> is really the same as <code>Uniques x</code>, but at this time I don’t know how to do it.</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="ot">ul ::</span> <span class="kw">forall</span> inputList<span class="op">.</span></span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a>    ( <span class="dt">ReversedHList</span> (<span class="dt">Uniques</span> (<span class="dt">Reverse</span> inputList))</span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a>                    &#39;[]</span>
<span id="cb30-4"><a href="#cb30-4" aria-hidden="true" tabindex="-1"></a>                    (<span class="dt">Reverse</span> (<span class="dt">Uniques</span> (<span class="dt">Reverse</span> inputList)))</span>
<span id="cb30-5"><a href="#cb30-5" aria-hidden="true" tabindex="-1"></a>    , <span class="dt">UniqueHList</span> inputList &#39;[] (<span class="dt">Uniques</span> (<span class="dt">Reverse</span> inputList)) <span class="dt">&#39;False</span></span>
<span id="cb30-6"><a href="#cb30-6" aria-hidden="true" tabindex="-1"></a>    )</span>
<span id="cb30-7"><a href="#cb30-7" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=&gt;</span> <span class="dt">HList</span> inputList</span>
<span id="cb30-8"><a href="#cb30-8" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="dt">HList</span> (<span class="dt">Reverse</span> (<span class="dt">Uniques</span> (<span class="dt">Reverse</span> inputList)))</span>
<span id="cb30-9"><a href="#cb30-9" aria-hidden="true" tabindex="-1"></a>ul <span class="ot">=</span> rev <span class="op">.</span> ulr</span></code></pre></div>
<h2 id="the-moment-of-truth">The Moment of Truth</h2>
<p>That should be it. The moment of truth - does it work?</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a>abc</span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a>ul abc</span></code></pre></div>
<pre><code>A 1 :# B 2 :# C 3 :# HNil
A 1 :# B 2 :# C 3 :# HNil</code></pre>
<p>It doesn’t destroy a list that is already unique. Actually, it doesn’t do anything on a unique list and that’s good.</p>
<p>Let’s roll out a more complicated case:</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a>ababca <span class="ot">=</span> <span class="dt">A</span> <span class="dv">1</span> <span class="op">:#</span> <span class="dt">B</span> <span class="dv">2</span> <span class="op">:#</span> <span class="dt">A</span> <span class="dv">3</span> <span class="op">:#</span> <span class="dt">B</span> <span class="dv">4</span> <span class="op">:#</span> <span class="dt">C</span> <span class="dv">5</span> <span class="op">:#</span> <span class="dt">A</span> <span class="dv">6</span> <span class="op">:#</span> <span class="dt">HNil</span></span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a>ababca</span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true" tabindex="-1"></a>ul ababca</span></code></pre></div>
<pre><code>A 1 :# B 2 :# A 3 :# B 4 :# C 5 :# A 6 :# HNil
A 1 :# B 2 :# C 5 :# HNil</code></pre>
<p>Happiness.</p>
<h2 id="summary">Summary</h2>
<p>This is now a big bunch of special purpose code that reinvents multiple wheels, but it really helped my personal understanding, and I hope it also helps yours.
The next step would be to use libraries which do all of this better, so we don’t need so much code.
There is for example <a href="https://hackage.haskell.org/package/HList"><code>HList</code></a> which is really elegant and is so much more comprehensible once we understand more type-level programming.</p>
<p>I’ve done a type-level programming in C++ before (have a look at the older articles in this blog) and I find it very interesting how similar it really is.
In Haskell, it is more frustrating in the beginning because the kind system is complicated.
As soon as the basic mechanisms are understood, it is nice to see that Haskell’s type system is much more intelligent than C++ templates and there’s much more control over everything.</p>]]></description>
    <pubDate>Sun, 20 Mar 2022 00:00:00 UT</pubDate>
    <guid>https://blog.galowicz.de/2022/03/20/unique-heterogeneous-typelists</guid>
    <dc:creator>Jacek Galowicz</dc:creator>
</item>
<item>
    <title>NixOS Community Oceansprint 2021 Report</title>
    <link>https://blog.galowicz.de/2021/12/12/nix-community-oceansprint-report</link>
    <description><![CDATA[<p>This is my trip report from the awesome NixOS community hackathon on Lanzarote.
For more information please also have a look on the website:
<a href="https://oceansprint.org">https://oceansprint.org</a></p>
<!--more-->
<h1 id="the-sprint-announcement">The Sprint announcement</h1>
<p><a href="https://twitter.com/domenkozar/status/1403409126173126664">Domen Kožar</a>
organized a hackathon for the Nix(OS) community on Lanzarote:</p>
<figure>
<img src="/images/2021-12-oceansprint-announcement.png" alt="Oceansprint Announcement on Twitter" />
<figcaption aria-hidden="true">Oceansprint Announcement on Twitter</figcaption>
</figure>
<p>This was totally amazing news for me and i really wanted to participate
immediately.
I realized that i need to be quick because there were only ~15 slots.
Two days later the next announcement said:</p>
<figure>
<img src="/images/2021-12-oceansprint-full.png" alt="The Oceansprint was booked out 2 days later" />
<figcaption aria-hidden="true">The Oceansprint was booked out 2 days later</figcaption>
</figure>
<h1 id="the-nixos-community">The NixOS Community</h1>
<p>There is an open source <a href="https://nixos.org">package manager called (nix)</a>
(which is a ridiculously understated description) and a
<a href="https://nixos.org">GNU/Linux distrubtion called NixOS</a>
that is based on top of nix.
This is all organized in the
<a href="https://github.com/nixos">NixOS github organization</a> and mostly revolves around
the git repository <a href="https://github.com/nixos/nixpkgs">nixpkgs</a> because this is
where most of the value is concentrated because this repository represents the
largest and most current collection of all Linux package distributions out there:</p>
<figure>
<img src="/images/2021-12-repology.png" alt="repology.org graph showing the most vs. the most fresh package collections" />
<figcaption aria-hidden="true">repology.org graph showing the most vs. the most fresh package collections</figcaption>
</figure>
<p>Apart from that, the repository also contains a lot of NixOS module descriptions
that are used to compose a full NixOS system.</p>
<p>A description of all the value that i pull out of this open source project for
myself and my company is worth multiple blog articles alone, so please refer
to their homepage if you like to read more.</p>
<p>It’s an unbelievable project.
If you are interested in contributing to the largest most-current free software
package collection in the world and/or an amazing GNU/Linux distribution on top
of that within a very nice and inclusive community, then this project is
definitely for you.</p>
<h1 id="corona">Corona</h1>
<p>The sprint has been cancelled roughly 2 weeks before its start due to the latest
Corona related warning level increase in Lanzarote/Spain.
Most of the participants travelled to Lanzarote anyway as it was still allowed
to meet in smaller groups.
Luckily, a few days before the sprint the warning level was decreased based on
the latest infection numbers, so we were again able to perform the sprint like
initially planned.</p>
<p>All participants have their vaccination. On monday and thursday everyone tested
themselves under supervision of each other before joining the group.</p>
<h1 id="participants-of-the-sprint">Participants of the sprint</h1>
<p>The participants who showed up over the week were the following ones:</p>
<p>Real name (nickname), Company</p>
<ul>
<li>Amon Stopinšek (<code>am-on</code>), Niteo, https://niteo.co</li>
<li>Andreas Schrägle (<code>ajs124</code>), Helsinki Systems, https://helsinki-systems.de/</li>
<li>Bernardo Meurer Costa (<code>lovesegfault</code>), Google</li>
<li>Dario Bertini (<code>berdario</code>), Google</li>
<li>Domen Kožar (<code>domenkozar</code>), Cachix Founder (Sponsor), https://www.cachix.org</li>
<li>Florian Klink (<code>flokli</code>), Freelancer, https://flokli.de</li>
<li>Jacek Galowicz (<code>tfc</code>/<code>jonge</code>), Cyberus Technology (Sponsor), https://cyberus-technology.de</li>
<li>Janne Heß (<code>dasJ</code>), Helsinki Systems, https://helsinki-systems.de/</li>
<li>Jonas Chevalier (<code>zimbatm</code>), Numtide Founder (Sponsor), https://numtide.com</li>
<li>Marijan Petričević (<code>marijanp</code>), Freelancer, http://epilentio.hr</li>
<li>Nejc Zupan (<code>zupo</code>), Niteo Founder (Sponsor), https://niteo.co</li>
<li>Robert Hensing (<code>roberth</code>), Hercules Founder (Sponsor), https://hercules-ci.com</li>
<li>Vo Minh Thu (<code>noteed</code>), Hypered CTO (Sponsor), https://hypered.io</li>
</ul>
<h1 id="location">Location</h1>
<p>The sprint location was Nejc’s Villa at in Costa Teguise on the Spanish island
Lanzarote.</p>
<figure>
<img src="/images/2021-12-oceansprint-location.jpg" alt="The Oceansprint location" />
<figcaption aria-hidden="true">The Oceansprint location</figcaption>
</figure>
<h1 id="daily-schedule">Daily Schedule</h1>
<p>The official sprint day schedule began at 9:00 and ended at 17:00.
Every day ended with a brief standup meeting where everyone explained what
they achieved/struggled with.</p>
<p>The gold sponsor <a href="https://serokell.io/">Serokell</a> also gave us a brief overview
of job opportunities in a dedicated talk slot.
The sprint found a good balance between giving the sponsors enough attention and
thankfulness but at the same time not distract any efforts.</p>
<h1 id="socializing">Socializing</h1>
<p>Every day we had breakfast and lunch provided in form of a professional buffet.
After every productive day, the whole group went out for dinner, trying out
several local restaurants.
This way we really sticked together the whole week, which facilitated
easy get-to-know and socializing a lot:
The atmosphere was nice and relaxed!</p>
<p>During the work phases inbetween, everyone either worked alone or in teams
depending on their projects. While the great location allowed for sitting
outside around the big table, near the pool, on the balcony or inside the living
room for concentration phases, it was also very easy to sporadically group up
and discuss things. Or to just hang around at the pool and lament together how
hard life in the sun is.</p>
<p>Apart from work and food, Nejc also organized several activities like
swimming/surfing/hiking trips for whoever wanted to participate.
Another group went to surf school together on the weekend.</p>
<h1 id="sprint-projects">Sprint Projects</h1>
<h2 id="nix.dev-ux-enhancements">nix.dev UX enhancements</h2>
<p>Nejc Zupan started to port the tutorials of https://nix.dev from
reStructuredText to Markdown.
The goal of this change is to lower the barrier for external
contributors, as markdown is simpler and better known than reStructuredText.</p>
<p>Another useful effort that he started is to get all code excerpts on the
website automatically tested by the CI. This will avoid frustration for
newcomers who might want to start to use nix for its reproducibility, so they
don’t run into unreproducible tutorials.</p>
<h2 id="nix-casync">nix-casync</h2>
<p>Florian Klink implemented <a href="https://github.com/flokli/nix-casync">nix-casync</a>,
a HTTP binary cache using the casync mechanism internally to efficiently store
NAR files in a deduplicated fashion, and provides an outlook on how to use it to
speed up substitution.</p>
<p>Blog article about this: https://flokli.de/posts/2021-12-10-nix-casync-intro/</p>
<h2 id="nixos-composability-optimizations">NixOS Composability Optimizations</h2>
<p>Robert Hensing, Jonas Chevalier, and Vo Minh Thu experimented with and worked on
how to make NixOS systems smaller and more composable.
There are different reasons for this:</p>
<ul>
<li>Reduction of the nix expression evaluation time of whole system builds</li>
<li>Reduction of overall system size</li>
<li>Composability for better selection of what actually goes into the system,
which is not only interesting for disk/mem usage reasons but also for reducing
the trusted computing base</li>
<li>Another interesting reason is getting towards interpreterless systems, as
inspired by some company needs that Jacek described from some internal
projects that use nix and NixOS</li>
</ul>
<p>There were basically two approaches:</p>
<p>Robert created a
<a href="https://github.com/NixOS/nixpkgs/pull/148456">pull request with a POC</a> that
shows how to whitelist NixOS modules into a system. This is different from the
usual approach because the NixOS function that evaluates a config imports <em>all</em>
the NixOS modules and then lets the user activate/deactivate things at will, but
has a lot of things already activated by default. “Blacklisting” features by
disabling them one by one in order to arrive at a minimal system is very
uncomfortable becasue you end up searching for which nix file enables what.
Some things also cannot be (easily) disabled this way.
Robert’s approach is creating a function that does not work with a default
list of imports. He also added unit tests to facilitate regression-free
maintenance and extension of this effort.</p>
<p>Jonas and Thu experimented with <a href="https://github.com/cleverca22/not-os">not-os</a>,
which is a set of custom NixOS modules that remove systemd and create system
initialization scripts from scratch in order to reach a minimal system.
They resulted in an impressive written overview of what would need to be done
to minimize the system further and even reach systems without interpreters.
(Blog article coming on <a href="https://zimbatm.com/">Jonas’s blog</a>)</p>
<p>Both approaches seem like they could be combined upstream with some amount of
work.</p>
<h2 id="makebinarywrapper">MakeBinaryWrapper</h2>
<p>Pointed at an existing
<a href="https://github.com/NixOS/nixpkgs/pull/124556">pull request from user <code>bergkvist</code></a>
by Robert, Jacek Galowicz stopped participating in the discussion about
minimizing NixOS systems and started helping improving and testing an
application wrapper that is called <code>makeBinaryWrapper</code>.
There is an existing tool called
<a href="https://nixos.org/manual/nixpkgs/stable/#fun-makeWrapper"><code>makeWrapper</code></a>
that can substitute any binary or
script by another script that first manipulates the shell environment in
user-specified form and then calls the original app/script, possibly with
prepended command line arguments.
The binary wrapper builds a tiny C program and compiles it instead of composing
a shellscript. This is interesting for the following reasons:</p>
<ul>
<li>MacOS’s <code>execv</code> system call cannot call scripts, so <code>makeWrapper</code> does not
work there (see more detailed description in the PR)</li>
<li>Binaries can outperform bash</li>
<li>Interpreterless systems must not have <code>makeWrapper</code> wrappers.</li>
</ul>
<p>The wrapper does generally work but must be extended if it is chosen to
completely get rid of the default wrapper on NixOS systems, because some
derivations stretch the wrapper’s capabilities so much that it’s hard to model
the same behavior in simple C programs. This can be changed to the better with
follow-up contributions.</p>
<h2 id="nixos-integration-test-driver-refactoring">NixOS Integration Test Driver Refactoring</h2>
<p>After Jacek’s porting of the NixOS integration test driver from Perl to Python
in 2019 after the NixCon in Brno, this driver implementation
<a href="https://nixos.org/manual/nixos/stable/release-notes.html#sec-release-20.03">became the standard NixOS integration test driver in Nixos 20.03</a>,
and the general interest in using and extending the driver for tests in the
community increased.
The driver code itself is growing in ways that should not happen in unmoderated
fashion, and not without giving it a proper architecture.</p>
<p>As a first step, the driver should be split up in individual files for each
of its functionality domains and put in a real Python package, in order to get
more improvements afterward.</p>
<p>Jacek introduced these ideas as a project idea for the sprint and
Marijan Petričević, Amon Stopinšek, and Vo Minh Thu jumped right into doing
this.</p>
<p>The first PR on this has already been merged:
https://github.com/NixOS/nixpkgs/pull/149329</p>
<h2 id="nixos-integration-tests-on-macos">NixOS Integration Tests on MacOS</h2>
<p>Nejc Zupan, Domen Kožar, and Marijan Petričević started working on the NixOS
integration test driver nix expression in order to enable for running the usual
integration tests with virtual networks of NixOS VMs, but on MacOS.</p>
<h2 id="nix-community-ownership-bootstrapping">Nix Community Ownership Bootstrapping</h2>
<p>Bernardo Meurer Costa pointed out that the Nix(OS) community is currently
organized in a rather anarchistic fashion. This works very well on one hand
in the sense that many contributors maintain and enhance nixpkgs and NixOS
together and at the same time keep it stable and working.</p>
<p>On the other hand, recent problems with bogging down RFCs and in general bigger
decision processes stalling in endless discussions without any resulting
decision, indicate that the governance has potential to improve.</p>
<p>Bernardo studied different voting algorithms and chose which ones to quickly
employ for having a bootstrap voting process.
The process would start with a list of well-known contributors and the sprint
participants to decide who shall be part of an anytial group of leaders who
then are able to bootstrap general decision structures and processes.
It was a pity that Eelco was not here to share his opinions on this, but he
will also be included from the beginning.</p>
<h2 id="cachix-deploy">Cachix Deploy</h2>
<p>Domen Kožar worked on and demonstrated the new cachix deploy feature, which can
be explained as “the hail service on steroids”.
The cachix website will soon show this new feature.</p>
<h2 id="nixpkgs-refactorings">nixpkgs Refactorings</h2>
<p>I don’t have a perfect overview of what was done at the sprint as there were so
many things, but i also remember:</p>
<ul>
<li>Janne: Refactor the switch-to-configuration scripts</li>
<li>Dario: Refactor Linux kernel module builds in nixpkgs</li>
<li>Andreas: Fix the MariaDB derivation and MySQL tests</li>
<li>Bernardo: Remove the perl script that merges Linux kernel configs in favor of
better tooling</li>
<li>Andreas: Substitute stage1 init scripts by proper systemd handling</li>
</ul>]]></description>
    <pubDate>Sun, 12 Dec 2021 00:00:00 UT</pubDate>
    <guid>https://blog.galowicz.de/2021/12/12/nix-community-oceansprint-report</guid>
    <dc:creator>Jacek Galowicz</dc:creator>
</item>
<item>
    <title>Setting up a C++ project environment with nix</title>
    <link>https://blog.galowicz.de/2019/04/17/tutorial_nix_cpp_setup</link>
    <description><![CDATA[<p>This article explains how to quickly set up a C++ project environment with
complete toolchain- and dependency management with <code>nix</code>.
<a href="https://nixos.org/nix/"><code>nix</code></a> is a powerful package manager for Linux and
other Unix systems (It is indeed a more powerful alternative to <a href="https://conan.io/"><code>conan</code></a> and <a href="https://www.docker.com/"><code>docker</code></a>) that makes package
management reliable and reproducible.
After setting up the project and playing around with it, we will <strong>parametrize</strong>
the project description in order to automatically build it with different
compilers and dependency library versions (GCC 7 &amp; 8, Clang 7 &amp; 8, lib <code>boost</code>
1.6.6 - 1.6.9, lib <code>poco</code> 1.9.0 &amp; 1.9.1).</p>
<!--more-->
<p>Let’s start with a fresh system where no C++ compiler and no development
libraries are installed.
The only tool that we require to be installed is <code>nix</code> (see the <a href="https://nixos.org/nix/download.html">installation
guide on nixos.org</a> for installation
instructions), because we are going to use it to perform the toolchain and
dependency setup.</p>
<h2 id="creating-a-little-example-c-project">Creating a little example C++ Project</h2>
<p>Let’s write a C++ program with the following dependencies:</p>
<ul>
<li>C++ compiler, of course. That might be GCC or Clang.</li>
<li><code>boost</code> library (<a href="https://www.boost.org" class="uri">https://www.boost.org</a>)</li>
<li><code>poco</code> library (<a href="https://pocoproject.org" class="uri">https://pocoproject.org</a>)</li>
</ul>
<p>For the sake of having a simple example app, the program does nothing more than
printing what compiler it was built with and which versions of <code>boost</code> and
<code>poco</code> it is linked against.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">#include &lt;boost/lexical_cast.hpp&gt;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="co">#include &lt;Poco/Environment.h&gt;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="co">#include &lt;iostream&gt;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="co">#if defined(__clang__)</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="co">#define CC &quot;clang++&quot;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="co">#elif defined (__GNUC__)</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="co">#define CC &quot;g++&quot;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="co">#else</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="co">#define CC &quot;&lt;unknown compiler&gt;&quot;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="co">#endif</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="ex">int</span> main<span class="er">(</span><span class="kw">)</span> <span class="kw">{</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>  <span class="ex">std::cout</span> <span class="op">&lt;&lt; &quot;Hello World!\n&quot;</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="st">    &lt;&lt; &quot;Compiler: &quot; &lt;&lt; CC &lt;&lt; &quot; &quot; &lt;&lt; __VERSION__ &lt;&lt; &#39;\n&#39;</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="st">    &lt;&lt; &quot;Boost: &quot; &lt;&lt; (BOOST_VERSION / 100000) &lt;&lt; &#39;.&#39;</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="st">                 &lt;&lt; (BOOST_VERSION / 100 % 1000) &lt;&lt; &#39;.&#39;</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="st">                 &lt;&lt; (BOOST_VERSION % 100) &lt;&lt; &#39;\n&#39;</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="st">    &lt;&lt; &quot;POCO: &quot; &lt;&lt; (Poco::Environment::libraryVersion() &gt;&gt; 24) &lt;&lt; &#39;.&#39;</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="st">                &lt;&lt; (Poco::Environment::libraryVersion() &gt;&gt; 16 &amp; 0xff) &lt;&lt; &#39;.&#39;</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="st">                &lt;&lt; (Poco::Environment::libraryVersion() &gt;&gt; 8 &amp; 0xff)</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="st">                &lt;&lt; &#39;\n&#39;;</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a><span class="st">}</span></span></code></pre></div>
<p>We can either <em>install</em> a C++ compiler by running <code>nix-env</code> with the
appropriate arguments, or just run a shell that exposes a C++ compiler in its
<code>PATH</code> environment.
Let us not clutter the system’s <code>PATH</code> environment with compilers from the
beginning, because often people would use different compilers for each project
anyway.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">-p</span> gcc</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell:~]$</span> c++ <span class="at">--version</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ex">g++</span> <span class="er">(</span><span class="ex">GCC</span><span class="kw">)</span> <span class="ex">7.4.0</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ex">Copyright</span> <span class="er">(</span><span class="ex">C</span><span class="kw">)</span> <span class="ex">2017</span> Free Software Foundation, Inc.</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="ex">This</span> is free software<span class="kw">;</span> <span class="ex">see</span> the source for copying conditions.  There is NO</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="ex">warranty</span><span class="kw">;</span> <span class="ex">not</span> even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></code></pre></div>
<p>We are now in a shell that includes GCC’s C++ compiler in its <code>PATH</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell:~/src/nix_cmake_example]$</span> echo <span class="va">$PATH</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ex">...:/nix/store/ghzg4kg0sjif58smj2lfm2bdvjwim85y-gcc-wrapper-7.4.0/bin:...</span></span></code></pre></div>
<p>I trimmed the rest of the path list.
What’s important here: The path list is full of paths that begin with
<code>/nix/store/...</code>.
Each of them could be considered what one would call a <em>package</em> on typical
Linux distributions.
We can easily install multiple compilers with different versions, or even
the same version with different sets of patches applied, next to each other
in <code>/nix/store</code> and not have any of them collide during a project’s build,
because <code>nix</code> does simply only map the packages into the current <code>PATH</code> that
are needed.</p>
<blockquote>
<p><code>nix</code> does even more than just exposing packages via the <code>PATH</code> to the
executing shell: For a running build process it does also hide all paths
that are <em>not</em> listed in the dependencies of a package in order to avoid
unknown dependencies lurking into the project.
In order to achieve that, it uses <a href="https://en.wikipedia.org/wiki/Linux_namespaces"><em>namespaces</em></a>, similar to <a href="https://www.docker.com/">Docker</a>.
See also: <a href="https://nixos.wiki/wiki/Nix#Sandboxing">nixos.wiki about <strong>sandboxing</strong></a>, and <a href="https://nixos.org/nix/manual/#conf-sandbox">nix manual: <code>sandbox</code> setting</a></p>
</blockquote>
<p>The full procedure of using <code>nix-shell</code> to setup the environment and building
and running the app looks like this:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">-p</span> gcc boost poco</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> c++ <span class="at">-o</span> main main.cpp <span class="at">-lPocoFoundation</span> <span class="at">-lboost_system</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> ./main</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 7.4.0</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.67.0</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span></code></pre></div>
<blockquote>
<p>Running the compiled binary can of course be done without <code>nix-shell</code>.</p>
</blockquote>
<p>One would typically add a file called <code>default.nix</code> to the project folder:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">with</span> <span class="bu">import</span> &lt;nixpkgs&gt; <span class="op">{};</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>stdenv.mkDerivation <span class="op">{</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;my-app&quot;</span><span class="op">;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">src</span> <span class="op">=</span> <span class="ss">./.</span><span class="op">;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">buildInputs</span> <span class="op">=</span> <span class="op">[</span> boost poco <span class="op">];</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>  <span class="va">buildPhase</span> <span class="op">=</span> <span class="st">&quot;c++ -o main main.cpp -lPocoFoundation -lboost_system&quot;</span><span class="op">;</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>  <span class="va">installPhase</span> <span class="op">=</span> <span class="st">&#39;&#39;</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="st">    mkdir -p $out/bin</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a><span class="st">    cp main $out/bin/</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="st">  &#39;&#39;</span><span class="op">;</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This buys us that we can simply run <code>nix-build</code> to configure, build and package
the project into the nix store with a single command.
Developers would still use <code>nix-shell</code> for incremental builds between source
modifications.
<code>nix-shell</code> does also consult <code>default.nix</code> in order to setup the dependencies
right, so we don’t need the <code>-p</code> parameter list any longer.</p>
<p>Very short overview over the most important lines:</p>
<ul>
<li><code>stdenv</code> is an object in the nix expression language that is imported from
<code>&lt;nixpkgs&gt;</code>. <code>nixpkgs</code> is a globally available nix expression with all the
packages. <code>stdenv</code> contains the compiler and other things needed to compile
projects.</li>
<li><code>buildInputs</code> lists compile time and run time dependencies of the project.</li>
<li><code>buildPhase</code> is a shell hook that describes how to build the program.</li>
<li><code>installPhase</code> describes what files should be copied into the nix store.</li>
</ul>
<p>We’re covering how this works in detail only in minimal depth.
More information about nix derivations:</p>
<ul>
<li><a href="https://nixos.org/nix/manual/#ssec-derivation"><code>nix</code> manual section about derivations</a></li>
<li><a href="https://nixos.wiki/wiki/C" class="uri">https://nixos.wiki/wiki/C</a></li>
</ul>
<blockquote>
<p>It looks like we’re using <code>nix</code> as a build system now - in fact,
<code>mkDerivation</code> is a function that creates a so called “builder script” that
is able to detect if we are using a Makefile based project (with or without
autoconf), a CMake project, or a set of other build systems, and then
executes the right steps according to the build system.
One cool detail is that we would typically not touch <code>CMakeFile</code> or other
files in order to use <code>nix</code> - this way users who do not want to or cannot
use <code>nix</code> are able to use their own tools for dependency management.</p>
<p><code>mkDerivation</code> is a very versatile and complex helper: See the <a href="https://nixos.org/nix/manual/#ssec-derivation"><code>nix</code> manual
section about derivations</a></p>
</blockquote>
<p>In this example we use no build system, hence need to use the <code>buildPhase</code>
hook to define how our little application is compiled and linked.</p>
<p>Someone else who checks out this project and who has installed <code>nix</code> can
now simply run:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-build</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="ex">these</span> derivations will be built:</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/dw9d2r7rykym08fzmdgf6v0ia2sn6hq9-my-app.drv</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="ex">building</span> <span class="st">&#39;/nix/store/dw9d2r7rykym08fzmdgf6v0ia2sn6hq9-my-app.drv&#39;</span>...</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="ex">unpacking</span> sources</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="ex">unpacking</span> source archive /nix/store/8zwsvxdkpjnyxnm9qs33qw3bi12h9gbm-nix_simple</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="bu">source</span> root is nix_simple</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="ex">patching</span> sources</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="ex">configuring</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="ex">no</span> configure script, doing nothing</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="ex">building</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a><span class="ex">installing</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="ex">post-installation</span> fixup</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a><span class="ex">shrinking</span> RPATHs of ELF executables and libraries in /nix/store/5ldpivphfbya4xw6kcss9vcdvp1mzrcf-my-app</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="ex">shrinking</span> /nix/store/5ldpivphfbya4xw6kcss9vcdvp1mzrcf-my-app/bin/main</span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a><span class="fu">strip</span> is /nix/store/0y7jmqnj48ikjh37n3dl9kqw9hnn68nq-binutils-2.31.1/bin/strip</span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="ex">stripping</span> <span class="er">(</span><span class="ex">with</span> command strip and flags <span class="at">-S</span><span class="kw">)</span> <span class="er">in</span> <span class="ex">/nix/store/5ldpivphfbya4xw6kcss9vcdvp1mzrcf-my-app/bin</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a><span class="ex">patching</span> script interpreter paths in /nix/store/5ldpivphfbya4xw6kcss9vcdvp1mzrcf-my-app</span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a><span class="ex">checking</span> for references to /tmp/nix-build-my-app.drv-0/ in /nix/store/5ldpivphfbya4xw6kcss9vcdvp1mzrcf-my-app...</span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/5ldpivphfbya4xw6kcss9vcdvp1mzrcf-my-app</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> ./result/bin/main</span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 7.4.0</span>
<span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.67.0</span>
<span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span></code></pre></div>
<p>The compiler, all libraries etc. are automatically downloaded and put into
action.
Much simpler than with <a href="https://conan.io/">conan</a>!</p>
<p>That is basically it: If the program grows, we will certainly switch
to some build system - <code>nix</code> supports that without having to add nix-specific
stuff into the build files (GNUMake, CMake, meson, etc. are supported.
Have a look into the <a href="https://github.com/NixOS/nixpkgs/tree/master/pkgs/development/tools/build-managers"><code>nixpkgs</code> git repository folder for supported build
systems</a>).
If the number of dependencies grows, be that libraries or compile time tools,
we can simply add them to the nix expression.</p>
<h2 id="building-the-code-with-different-dependency-versions">Building the code with different dependency versions</h2>
<p>The <code>default.nix</code> expression results in one so-called <em>derivation</em> that <code>nix</code>
can materialize into a binary package in the nix storage.
Let us now write another nix expression that takes multiple <code>boost</code> library
versions, multiple <code>poco</code> library versions and multiple compilers, and
that results in a <em>set</em> of derivations that nix can materialize using those.</p>
<p>We will use the following variety of dependency versions:</p>
<ul>
<li>GCC 7 &amp; 8</li>
<li>Clang 7 &amp; 8</li>
<li>lib <code>poco</code> 1.9.0 &amp; 1.9.1</li>
<li>lib <code>boost</code> 1.6.6 - 1.6.9</li>
</ul>
<p>…which results in <span class="math inline">(2+2) * 2 * 4 = 32</span> different binaries.</p>
<p>Quick spoiler: The result of the nix expression that we are going to write
will allow us to build and execute these 32 binaries with a single <code>nix-build release.nix</code> command.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> for path in <span class="va">$(</span><span class="ex">nix-build</span> release.nix<span class="va">)</span><span class="kw">;</span> <span class="cf">do</span> <span class="dt">\</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span>   echo <span class="st">&quot;====&quot;</span><span class="kw">;</span> <span class="dt">\</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span>   echo <span class="st">&quot;Output of </span><span class="va">$path</span><span class="st">/bin/main:&quot;</span><span class="kw">;</span> <span class="dt">\</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span>   <span class="va">$path</span>/bin/main<span class="kw">;</span> <span class="dt">\</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> done</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="co"># trimmed a lot of build output...</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/246an1m3rwwgz58qc8hfwvqh28899ckm-my-app-clang7-poco190-boost166/bin/main:</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 7.0.1 <span class="er">(</span><span class="ex">tags/RELEASE_701/final</span><span class="kw">)</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.66.0</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/cfh1cy03kly9wq6x6dzlza4d9kads6cd-my-app-clang7-poco190-boost167/bin/main:</span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 7.0.1 <span class="er">(</span><span class="ex">tags/RELEASE_701/final</span><span class="kw">)</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.67.0</span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/jjbpj24x4gp2vpn355j0qsy117yrkhrd-my-app-clang7-poco190-boost168/bin/main:</span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 7.0.1 <span class="er">(</span><span class="ex">tags/RELEASE_701/final</span><span class="kw">)</span></span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.68.0</span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-26"><a href="#cb7-26" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/f9fgwzpq9gn85abx9h1zr5c6j3bs4ks2-my-app-clang7-poco190-boost169/bin/main:</span>
<span id="cb7-27"><a href="#cb7-27" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-28"><a href="#cb7-28" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 7.0.1 <span class="er">(</span><span class="ex">tags/RELEASE_701/final</span><span class="kw">)</span></span>
<span id="cb7-29"><a href="#cb7-29" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.69.0</span>
<span id="cb7-30"><a href="#cb7-30" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-31"><a href="#cb7-31" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-32"><a href="#cb7-32" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/1wwff8p5rxjqjkhqifvhy833bl3mf8l3-my-app-clang7-poco191-boost166/bin/main:</span>
<span id="cb7-33"><a href="#cb7-33" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-34"><a href="#cb7-34" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 7.0.1 <span class="er">(</span><span class="ex">tags/RELEASE_701/final</span><span class="kw">)</span></span>
<span id="cb7-35"><a href="#cb7-35" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.66.0</span>
<span id="cb7-36"><a href="#cb7-36" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-37"><a href="#cb7-37" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-38"><a href="#cb7-38" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/3jdv2l0gp3za4q5rj8s4859bpiyscg0m-my-app-clang7-poco191-boost167/bin/main:</span>
<span id="cb7-39"><a href="#cb7-39" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-40"><a href="#cb7-40" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 7.0.1 <span class="er">(</span><span class="ex">tags/RELEASE_701/final</span><span class="kw">)</span></span>
<span id="cb7-41"><a href="#cb7-41" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.67.0</span>
<span id="cb7-42"><a href="#cb7-42" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-43"><a href="#cb7-43" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-44"><a href="#cb7-44" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/fcbypavfzrw8ajngaim7srvn9fylj7b3-my-app-clang7-poco191-boost168/bin/main:</span>
<span id="cb7-45"><a href="#cb7-45" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-46"><a href="#cb7-46" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 7.0.1 <span class="er">(</span><span class="ex">tags/RELEASE_701/final</span><span class="kw">)</span></span>
<span id="cb7-47"><a href="#cb7-47" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.68.0</span>
<span id="cb7-48"><a href="#cb7-48" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-49"><a href="#cb7-49" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-50"><a href="#cb7-50" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/a8d1mwqiay3qx60fzp6m70q89s0mpcwx-my-app-clang7-poco191-boost169/bin/main:</span>
<span id="cb7-51"><a href="#cb7-51" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-52"><a href="#cb7-52" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 7.0.1 <span class="er">(</span><span class="ex">tags/RELEASE_701/final</span><span class="kw">)</span></span>
<span id="cb7-53"><a href="#cb7-53" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.69.0</span>
<span id="cb7-54"><a href="#cb7-54" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-55"><a href="#cb7-55" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-56"><a href="#cb7-56" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/lhxdhmi9ficg9v9mkxv4zz9s4759r5z6-my-app-clang8-poco190-boost166/bin/main:</span>
<span id="cb7-57"><a href="#cb7-57" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-58"><a href="#cb7-58" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 8.0.0 <span class="er">(</span><span class="ex">tags/RELEASE_800/final</span><span class="kw">)</span></span>
<span id="cb7-59"><a href="#cb7-59" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.66.0</span>
<span id="cb7-60"><a href="#cb7-60" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-61"><a href="#cb7-61" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-62"><a href="#cb7-62" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/x4f34gi6p6ipa8lvqx2aj36nzipk2yv1-my-app-clang8-poco190-boost167/bin/main:</span>
<span id="cb7-63"><a href="#cb7-63" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-64"><a href="#cb7-64" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 8.0.0 <span class="er">(</span><span class="ex">tags/RELEASE_800/final</span><span class="kw">)</span></span>
<span id="cb7-65"><a href="#cb7-65" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.67.0</span>
<span id="cb7-66"><a href="#cb7-66" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-67"><a href="#cb7-67" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-68"><a href="#cb7-68" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/dqmy8gmkshi8glg2ldidpclzq2mrqbvw-my-app-clang8-poco190-boost168/bin/main:</span>
<span id="cb7-69"><a href="#cb7-69" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-70"><a href="#cb7-70" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 8.0.0 <span class="er">(</span><span class="ex">tags/RELEASE_800/final</span><span class="kw">)</span></span>
<span id="cb7-71"><a href="#cb7-71" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.68.0</span>
<span id="cb7-72"><a href="#cb7-72" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-73"><a href="#cb7-73" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-74"><a href="#cb7-74" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/s5qw1ff2qbx2aswnlvd7l7d60fdfyr0y-my-app-clang8-poco190-boost169/bin/main:</span>
<span id="cb7-75"><a href="#cb7-75" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-76"><a href="#cb7-76" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 8.0.0 <span class="er">(</span><span class="ex">tags/RELEASE_800/final</span><span class="kw">)</span></span>
<span id="cb7-77"><a href="#cb7-77" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.69.0</span>
<span id="cb7-78"><a href="#cb7-78" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-79"><a href="#cb7-79" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-80"><a href="#cb7-80" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/wf4ygk9lhkmfv98f9g05pndv4a0320j1-my-app-clang8-poco191-boost166/bin/main:</span>
<span id="cb7-81"><a href="#cb7-81" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-82"><a href="#cb7-82" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 8.0.0 <span class="er">(</span><span class="ex">tags/RELEASE_800/final</span><span class="kw">)</span></span>
<span id="cb7-83"><a href="#cb7-83" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.66.0</span>
<span id="cb7-84"><a href="#cb7-84" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-85"><a href="#cb7-85" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-86"><a href="#cb7-86" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/xg34s1bzr2h57hsbj6z0g93mwni7jcgk-my-app-clang8-poco191-boost167/bin/main:</span>
<span id="cb7-87"><a href="#cb7-87" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-88"><a href="#cb7-88" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 8.0.0 <span class="er">(</span><span class="ex">tags/RELEASE_800/final</span><span class="kw">)</span></span>
<span id="cb7-89"><a href="#cb7-89" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.67.0</span>
<span id="cb7-90"><a href="#cb7-90" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-91"><a href="#cb7-91" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-92"><a href="#cb7-92" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/bhjzyxr1wpjnkdr1wm72142l0hlndsnz-my-app-clang8-poco191-boost168/bin/main:</span>
<span id="cb7-93"><a href="#cb7-93" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-94"><a href="#cb7-94" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 8.0.0 <span class="er">(</span><span class="ex">tags/RELEASE_800/final</span><span class="kw">)</span></span>
<span id="cb7-95"><a href="#cb7-95" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.68.0</span>
<span id="cb7-96"><a href="#cb7-96" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-97"><a href="#cb7-97" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-98"><a href="#cb7-98" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/r1nd2gb7r45vpldnbiprdnyg7y29k08f-my-app-clang8-poco191-boost169/bin/main:</span>
<span id="cb7-99"><a href="#cb7-99" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-100"><a href="#cb7-100" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> clang++ 4.2.1 Compatible Clang 8.0.0 <span class="er">(</span><span class="ex">tags/RELEASE_800/final</span><span class="kw">)</span></span>
<span id="cb7-101"><a href="#cb7-101" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.69.0</span>
<span id="cb7-102"><a href="#cb7-102" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-103"><a href="#cb7-103" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-104"><a href="#cb7-104" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/3jfbck6mcrgjfpya8p8x293sfkqi0w5b-my-app-gcc7-poco190-boost166/bin/main:</span>
<span id="cb7-105"><a href="#cb7-105" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-106"><a href="#cb7-106" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 7.4.0</span>
<span id="cb7-107"><a href="#cb7-107" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.66.0</span>
<span id="cb7-108"><a href="#cb7-108" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-109"><a href="#cb7-109" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-110"><a href="#cb7-110" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/cvlxdps8k666dgim3xp04xkm4qzbvkby-my-app-gcc7-poco190-boost167/bin/main:</span>
<span id="cb7-111"><a href="#cb7-111" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-112"><a href="#cb7-112" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 7.4.0</span>
<span id="cb7-113"><a href="#cb7-113" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.67.0</span>
<span id="cb7-114"><a href="#cb7-114" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-115"><a href="#cb7-115" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-116"><a href="#cb7-116" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/ipk381rlahkv6wbwccmv7pibwghdbw7c-my-app-gcc7-poco190-boost168/bin/main:</span>
<span id="cb7-117"><a href="#cb7-117" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-118"><a href="#cb7-118" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 7.4.0</span>
<span id="cb7-119"><a href="#cb7-119" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.68.0</span>
<span id="cb7-120"><a href="#cb7-120" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-121"><a href="#cb7-121" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-122"><a href="#cb7-122" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/pl9y9njmyc2ws4i4mgfnhdxxsbrzasj3-my-app-gcc7-poco190-boost169/bin/main:</span>
<span id="cb7-123"><a href="#cb7-123" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-124"><a href="#cb7-124" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 7.4.0</span>
<span id="cb7-125"><a href="#cb7-125" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.69.0</span>
<span id="cb7-126"><a href="#cb7-126" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-127"><a href="#cb7-127" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-128"><a href="#cb7-128" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/svxr6826wm0sx9mm8sgy1v2aq2v1nx2p-my-app-gcc7-poco191-boost166/bin/main:</span>
<span id="cb7-129"><a href="#cb7-129" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-130"><a href="#cb7-130" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 7.4.0</span>
<span id="cb7-131"><a href="#cb7-131" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.66.0</span>
<span id="cb7-132"><a href="#cb7-132" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-133"><a href="#cb7-133" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-134"><a href="#cb7-134" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/hfwv308iaykb4ygnjpjfxwy6xf1rr0s3-my-app-gcc7-poco191-boost167/bin/main:</span>
<span id="cb7-135"><a href="#cb7-135" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-136"><a href="#cb7-136" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 7.4.0</span>
<span id="cb7-137"><a href="#cb7-137" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.67.0</span>
<span id="cb7-138"><a href="#cb7-138" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-139"><a href="#cb7-139" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-140"><a href="#cb7-140" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/2bxawcdkgjbvn756q93r65vym19b2jip-my-app-gcc7-poco191-boost168/bin/main:</span>
<span id="cb7-141"><a href="#cb7-141" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-142"><a href="#cb7-142" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 7.4.0</span>
<span id="cb7-143"><a href="#cb7-143" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.68.0</span>
<span id="cb7-144"><a href="#cb7-144" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-145"><a href="#cb7-145" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-146"><a href="#cb7-146" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/zgzw1bbx935fm209lxnn01n14sv8f9a8-my-app-gcc7-poco191-boost169/bin/main:</span>
<span id="cb7-147"><a href="#cb7-147" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-148"><a href="#cb7-148" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 7.4.0</span>
<span id="cb7-149"><a href="#cb7-149" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.69.0</span>
<span id="cb7-150"><a href="#cb7-150" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-151"><a href="#cb7-151" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-152"><a href="#cb7-152" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/jgsxmqgwmqqv2sbcmnx63abb3ymfsqc5-my-app-gcc8-poco190-boost166/bin/main:</span>
<span id="cb7-153"><a href="#cb7-153" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-154"><a href="#cb7-154" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 8.3.0</span>
<span id="cb7-155"><a href="#cb7-155" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.66.0</span>
<span id="cb7-156"><a href="#cb7-156" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-157"><a href="#cb7-157" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-158"><a href="#cb7-158" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/3j9q4bn2id2iqza44n39mzi4cqzhqlz2-my-app-gcc8-poco190-boost167/bin/main:</span>
<span id="cb7-159"><a href="#cb7-159" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-160"><a href="#cb7-160" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 8.3.0</span>
<span id="cb7-161"><a href="#cb7-161" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.67.0</span>
<span id="cb7-162"><a href="#cb7-162" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-163"><a href="#cb7-163" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-164"><a href="#cb7-164" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/7czfqh3fbjpslnar101b472kzlhxlcdc-my-app-gcc8-poco190-boost168/bin/main:</span>
<span id="cb7-165"><a href="#cb7-165" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-166"><a href="#cb7-166" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 8.3.0</span>
<span id="cb7-167"><a href="#cb7-167" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.68.0</span>
<span id="cb7-168"><a href="#cb7-168" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-169"><a href="#cb7-169" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-170"><a href="#cb7-170" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/9vmwm0zzsgxqm6v5yxzjdjkhgxqqdnqr-my-app-gcc8-poco190-boost169/bin/main:</span>
<span id="cb7-171"><a href="#cb7-171" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-172"><a href="#cb7-172" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 8.3.0</span>
<span id="cb7-173"><a href="#cb7-173" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.69.0</span>
<span id="cb7-174"><a href="#cb7-174" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.0</span>
<span id="cb7-175"><a href="#cb7-175" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-176"><a href="#cb7-176" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/n34v5f23jhpcc20hyszdn270p9wyzfbz-my-app-gcc8-poco191-boost166/bin/main:</span>
<span id="cb7-177"><a href="#cb7-177" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-178"><a href="#cb7-178" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 8.3.0</span>
<span id="cb7-179"><a href="#cb7-179" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.66.0</span>
<span id="cb7-180"><a href="#cb7-180" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-181"><a href="#cb7-181" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-182"><a href="#cb7-182" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/bq9pijnw746ilp1ar8xwb7bl3v1ypy0y-my-app-gcc8-poco191-boost167/bin/main:</span>
<span id="cb7-183"><a href="#cb7-183" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-184"><a href="#cb7-184" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 8.3.0</span>
<span id="cb7-185"><a href="#cb7-185" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.67.0</span>
<span id="cb7-186"><a href="#cb7-186" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-187"><a href="#cb7-187" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-188"><a href="#cb7-188" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/pzqa2sraf1xhji9bk6namwg6x4ar9sgq-my-app-gcc8-poco191-boost168/bin/main:</span>
<span id="cb7-189"><a href="#cb7-189" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-190"><a href="#cb7-190" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 8.3.0</span>
<span id="cb7-191"><a href="#cb7-191" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.68.0</span>
<span id="cb7-192"><a href="#cb7-192" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span>
<span id="cb7-193"><a href="#cb7-193" aria-hidden="true" tabindex="-1"></a><span class="ex">====</span></span>
<span id="cb7-194"><a href="#cb7-194" aria-hidden="true" tabindex="-1"></a><span class="ex">Output</span> of /nix/store/vb3ha6skwnj2h5k691jxcn7pxa8gs90i-my-app-gcc8-poco191-boost169/bin/main:</span>
<span id="cb7-195"><a href="#cb7-195" aria-hidden="true" tabindex="-1"></a><span class="ex">Hello</span> World!</span>
<span id="cb7-196"><a href="#cb7-196" aria-hidden="true" tabindex="-1"></a><span class="ex">Compiler:</span> g++ 8.3.0</span>
<span id="cb7-197"><a href="#cb7-197" aria-hidden="true" tabindex="-1"></a><span class="ex">Boost:</span> 1.69.0</span>
<span id="cb7-198"><a href="#cb7-198" aria-hidden="true" tabindex="-1"></a><span class="ex">POCO:</span> 1.9.1</span></code></pre></div>
<p>As the first step, let us first decompose the <code>default.nix</code> file into a file
<code>derivation.nix</code> and another file <code>release.nix</code>.</p>
<p>The new <code>derivation.nix</code> file contains the pure package description without
knowledge about where the dependencies come from:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">boost</span><span class="op">,</span> <span class="va">poco</span><span class="op">,</span> <span class="va">stdenv</span> <span class="op">}</span>:</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>stdenv.mkDerivation <span class="op">{</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;my-app&quot;</span><span class="op">;</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">src</span> <span class="op">=</span> <span class="ss">./.</span><span class="op">;</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">buildInputs</span> <span class="op">=</span> <span class="op">[</span> boost poco <span class="op">];</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>  <span class="va">buildPhase</span> <span class="op">=</span> <span class="st">&quot;c++ -std=c++17 -o main main.cpp -lPocoFoundation -lboost_system&quot;</span><span class="op">;</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>  <span class="va">installPhase</span> <span class="op">=</span> <span class="st">&#39;&#39;</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="st">    mkdir -p $out/bin</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a><span class="st">    cp main $out/bin/</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a><span class="st">  &#39;&#39;</span><span class="op">;</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The first line states that the content of this file is a <em>function</em> that
accepts a dictionary with the keys <code>boost</code>, <code>poco</code>, and <code>stdenv</code> as input
arguments.
It does then finally return a derivation.
A derivation can be materialized into a package with the binary by <code>nix</code>.</p>
<p>This means that we can regard <code>derivation.nix</code> like a mathematical function<br />
<span class="math inline"><em>d</em><em>e</em><em>r</em><em>i</em><em>v</em>(<em>c</em><em>o</em><em>m</em><em>p</em><em>i</em><em>l</em><em>e</em><em>r</em>,<em>b</em><em>o</em><em>o</em><em>s</em><em>t</em>,<em>p</em><em>o</em><em>c</em><em>o</em>) → <em>d</em><em>e</em><em>r</em><em>i</em><em>v</em><em>a</em><em>t</em><em>i</em><em>o</em><em>n</em></span>.</p>
<p>The next step is then to use that function <span class="math inline"><em>d</em><em>e</em><em>r</em><em>i</em><em>v</em></span> and feed it with the cartesian
product of all 32 input combinations.
The file <code>release.nix</code> does just that:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode numberSource numberLines nix"><code class="sourceCode nix"><span id="cb9-1"><a href="#cb9-1"></a><span class="op">{</span></span>
<span id="cb9-2"><a href="#cb9-2"></a>  <span class="va">nixpkgs</span> <span class="op">?</span> &lt;nixpkgs&gt;<span class="op">,</span></span>
<span id="cb9-3"><a href="#cb9-3"></a>  <span class="va">pkgs</span> <span class="op">?</span> <span class="bu">import</span> nixpkgs <span class="op">{}</span></span>
<span id="cb9-4"><a href="#cb9-4"></a><span class="op">}</span>:</span>
<span id="cb9-5"><a href="#cb9-5"></a></span>
<span id="cb9-6"><a href="#cb9-6"></a><span class="kw">let</span></span>
<span id="cb9-7"><a href="#cb9-7"></a>  <span class="va">compilers</span> <span class="op">=</span> <span class="kw">with</span> pkgs<span class="op">;</span> <span class="op">{</span></span>
<span id="cb9-8"><a href="#cb9-8"></a>    <span class="va">gcc7</span> <span class="op">=</span> stdenv<span class="op">;</span></span>
<span id="cb9-9"><a href="#cb9-9"></a>    <span class="va">gcc8</span> <span class="op">=</span> overrideCC stdenv gcc8<span class="op">;</span></span>
<span id="cb9-10"><a href="#cb9-10"></a>    <span class="va">clang7</span> <span class="op">=</span> overrideCC stdenv clang_7<span class="op">;</span></span>
<span id="cb9-11"><a href="#cb9-11"></a>    <span class="va">clang8</span> <span class="op">=</span> overrideCC stdenv clang_8<span class="op">;</span></span>
<span id="cb9-12"><a href="#cb9-12"></a>  <span class="op">};</span></span>
<span id="cb9-13"><a href="#cb9-13"></a></span>
<span id="cb9-14"><a href="#cb9-14"></a>  <span class="va">pocoLibs</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb9-15"><a href="#cb9-15"></a>    <span class="va">poco190</span> <span class="op">=</span> pkgs.poco<span class="op">;</span></span>
<span id="cb9-16"><a href="#cb9-16"></a>    <span class="va">poco191</span> <span class="op">=</span> pkgs.poco.overrideAttrs <span class="op">(</span><span class="va">oldAttrs</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb9-17"><a href="#cb9-17"></a>      <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;poco-1.9.1&quot;</span><span class="op">;</span></span>
<span id="cb9-18"><a href="#cb9-18"></a>      <span class="va">src</span> <span class="op">=</span> pkgs.fetchgit <span class="op">{</span></span>
<span id="cb9-19"><a href="#cb9-19"></a>        <span class="va">url</span> <span class="op">=</span> <span class="st">&quot;https://github.com/pocoproject/poco.git&quot;</span><span class="op">;</span></span>
<span id="cb9-20"><a href="#cb9-20"></a>        <span class="va">rev</span> <span class="op">=</span> <span class="st">&quot;196540ce34bf884921ff3f9ce338e38fc938acdd&quot;</span><span class="op">;</span></span>
<span id="cb9-21"><a href="#cb9-21"></a>        <span class="va">sha256</span> <span class="op">=</span> <span class="st">&quot;0q0xihkm2z8kndx40150inq7llcyny59cv016gxsx0vbzzbdkcnd&quot;</span><span class="op">;</span></span>
<span id="cb9-22"><a href="#cb9-22"></a>      <span class="op">};</span></span>
<span id="cb9-23"><a href="#cb9-23"></a>    <span class="op">});</span></span>
<span id="cb9-24"><a href="#cb9-24"></a>  <span class="op">};</span></span>
<span id="cb9-25"><a href="#cb9-25"></a></span>
<span id="cb9-26"><a href="#cb9-26"></a>  <span class="va">boostLibs</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb9-27"><a href="#cb9-27"></a>    <span class="kw">inherit</span> <span class="op">(</span>pkgs<span class="op">)</span> boost166 boost167 boost168 boost169<span class="op">;</span></span>
<span id="cb9-28"><a href="#cb9-28"></a>  <span class="op">};</span></span>
<span id="cb9-29"><a href="#cb9-29"></a></span>
<span id="cb9-30"><a href="#cb9-30"></a>  <span class="va">originalDerivation</span> <span class="op">=</span> <span class="op">[</span> <span class="op">(</span>pkgs.callPackage <span class="op">(</span><span class="bu">import</span> <span class="ss">./derivation.nix</span><span class="op">)</span> <span class="op">{})</span> <span class="op">];</span></span>
<span id="cb9-31"><a href="#cb9-31"></a></span>
<span id="cb9-32"><a href="#cb9-32"></a>  <span class="va">f</span> <span class="op">=</span> <span class="va">libname</span><span class="op">:</span> <span class="va">libs</span><span class="op">:</span> <span class="va">derivs</span><span class="op">:</span> <span class="kw">with</span> pkgs.lib<span class="op">;</span></span>
<span id="cb9-33"><a href="#cb9-33"></a>    concatMap <span class="op">(</span><span class="va">deriv</span><span class="op">:</span></span>
<span id="cb9-34"><a href="#cb9-34"></a>      mapAttrsToList <span class="op">(</span><span class="va">libVers</span><span class="op">:</span> <span class="va">lib</span><span class="op">:</span></span>
<span id="cb9-35"><a href="#cb9-35"></a>        <span class="op">(</span>deriv.override <span class="op">{</span> <span class="st">&quot;</span><span class="sc">${</span>libname<span class="sc">}</span><span class="st">&quot;</span> <span class="op">=</span> lib<span class="op">;</span> <span class="op">})</span>.overrideAttrs</span>
<span id="cb9-36"><a href="#cb9-36"></a>          <span class="op">(</span><span class="va">old</span><span class="op">:</span> <span class="op">{</span> <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;</span><span class="sc">${</span>old.name<span class="sc">}</span><span class="st">-</span><span class="sc">${</span>libVers<span class="sc">}</span><span class="st">&quot;</span><span class="op">;</span> <span class="op">})</span></span>
<span id="cb9-37"><a href="#cb9-37"></a>      <span class="op">)</span> libs</span>
<span id="cb9-38"><a href="#cb9-38"></a>    <span class="op">)</span> derivs<span class="op">;</span></span>
<span id="cb9-39"><a href="#cb9-39"></a></span>
<span id="cb9-40"><a href="#cb9-40"></a>  <span class="va">overrides</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb9-41"><a href="#cb9-41"></a>    <span class="op">(</span>f <span class="st">&quot;stdenv&quot;</span> compilers<span class="op">)</span></span>
<span id="cb9-42"><a href="#cb9-42"></a>    <span class="op">(</span>f <span class="st">&quot;poco&quot;</span>   pocoLibs<span class="op">)</span></span>
<span id="cb9-43"><a href="#cb9-43"></a>    <span class="op">(</span>f <span class="st">&quot;boost&quot;</span>  boostLibs<span class="op">)</span></span>
<span id="cb9-44"><a href="#cb9-44"></a>  <span class="op">];</span></span>
<span id="cb9-45"><a href="#cb9-45"></a><span class="kw">in</span></span>
<span id="cb9-46"><a href="#cb9-46"></a>  pkgs.lib.foldl <span class="op">(</span><span class="va">a</span><span class="op">:</span> <span class="va">b</span><span class="op">:</span> a <span class="op">//</span> <span class="op">{</span> <span class="st">&quot;</span><span class="sc">${</span>b.name<span class="sc">}</span><span class="st">&quot;</span> <span class="op">=</span> b<span class="op">;</span> <span class="op">})</span> <span class="op">{}</span> <span class="op">(</span></span>
<span id="cb9-47"><a href="#cb9-47"></a>    pkgs.lib.foldl <span class="op">(</span><span class="va">a</span><span class="op">:</span> <span class="va">f</span><span class="op">:</span> f a<span class="op">)</span> originalDerivation overrides</span>
<span id="cb9-48"><a href="#cb9-48"></a>  <span class="op">)</span></span></code></pre></div>
<p>This code looks a bit more complicated, but it does a lot of things:</p>
<ul>
<li>It defines the variety of compilers and libraries in the variables
<code>compilers</code>, <code>pocoLibs</code>, and <code>boostLibs</code>.
<ul>
<li>note that <code>nixpkgs</code> already contains lib <code>poco</code> version 1.9.0, but not
1.9.1 - we simply override its package description to use the latest 1.9.1
source from poco’s github repository.</li>
</ul></li>
<li>Function <code>f</code> contains all the magic: It reapplies the original function
<code>deriv</code> with one library input overloaded from a library list argument!</li>
<li>The list <code>overrides</code> contains the list of function <code>f</code> applications that
shall be applied over the original derivation.</li>
<li>The last 2 lines of code apply all the transformations within a simple <code>fold</code></li>
</ul>
<p>This explanation is very brief.
The whole code might look pretty much familiar to everyone who is not used to
nix but has some experience with purely functional programming languages.
Explaining the code in detail to developers who neither know <code>nix</code> nor any
functional programming, would explode the scope of this article.</p>
<h2 id="summary">Summary</h2>
<p>We have seen how simple it is to quickly set up an ad-hoc C++ programming
environment with a compiler and libraries, without cluttering the system.</p>
<p>We have “packaged” our little project with a roughly ~10 LOC short <code>default.nix</code>
Users with solely <code>nix</code> installed can clone this project from git, run
<code>nix-build</code> and get the binary. Simple as that.</p>
<p>With less than 50 LOC we implemented a nix expression that builds our
application in 32 different variants with different compilers and library
versions.</p>
<p>There is a git repository with all project files that is available for checkout:
<a href="https://github.com/tfc/nix_cpp_cartesian_dependencies" class="uri">https://github.com/tfc/nix_cpp_cartesian_dependencies</a></p>
<h2 id="outlook">Outlook</h2>
<p>What else can be done from here? The advantages and strengths of <code>nix</code> have
<em>by far</em> not been exhausted in this example.</p>
<h3 id="maximum-reproducibility-pinning-nixpkgs">Maximum Reproducibility: Pinning <code>nixpkgs</code></h3>
<p>Whenever we referenced packages, we got them from the magical nix expression
<code>&lt;nixpkgs&gt;</code>.
This package source is a <em>channel</em> that can be updated with <code>nix-channel --update</code>, which is similar to running <code>apt-get update</code> on Debian-like Linux
distros.
Of course, an update of the channel also updates the packages and thus might
break the whole build.</p>
<p>With <code>nix</code>, we can simply <strong>pin</strong> the package list to a version that is known
to work.</p>
<p>In the github repository of this example, i did so with <a href="https://github.com/tfc/nix_cpp_cartesian_dependencies/blob/master/nixpkgs.nix">nixpkgs.nix</a>.</p>
<p>Using this technique, one can be pretty confident, that the project will
still work in all configurations in a few years, which makes our build procedure
pretty reproducible.</p>
<h3 id="nix-ci-hydra">Nix CI: Hydra</h3>
<p>Since <code>nix</code> is simply a tool that can be installed on Linux, Mac, and other UNIX
systems, it can also be run in different CIs.</p>
<p>The NixOS project does however come with its own CI:
<a href="https://nixos.org/hydra/">Hydra</a>.
I am running my own instance on <a href="https://hydra.kosmosgame.com" class="uri">https://hydra.kosmosgame.com</a> and installed
this project as a jobset on it:</p>
<p><a href="https://hydra.kosmosgame.com/jobset/github/nix_cpp_cartesian_dependencies#tabs-jobs">This article’s project in hydra</a></p>
<p>The code does a bit more than covered in this article:
I added a nix expression <a href="https://github.com/tfc/nix_cpp_cartesian_dependencies/blob/master/output.nix"><code>output.nix</code></a>
that does not only build the application in all variants, but also executes
them and stores their results in the nix store.
This way they can be looked at in the browser like here: <a href="https://hydra.kosmosgame.com/build/265">example output</a></p>
<h3 id="fully-reproducible-automatic-integration-tests">Fully Reproducible, Automatic Integration Tests</h3>
<p>Nix expressions do not only allow for simple ad-hoc packaging of binaries:
They are mighty enough to describe whole-system descriptions.
In fact, the NixOS installer ISOs, the Virtualbox NixOS demo VM image, the
Amazon AMIs, Microsoft Azure Blobs, etc. are all built from nix expressions.</p>
<p>I build a little more complicated example and put it on github:
<a href="https://github.com/tfc/nix_cmake_example" class="uri">https://github.com/tfc/nix_cmake_example</a></p>
<p>In a nutshell, this repository contains a C++ server application that uses
PostgreSQL as a database backend and a Python client application that provides
a little web server interface to the same database.
In order to test such an application one needs a host with a confiured and
running PostgreSQL instance.</p>
<p>The C++ app is built in different configurations - all configurations are
automatically tested in VMs that are automatically created, spun up, and
destroyed afterwards.</p>
<figure>
<img src="https://github.com/tfc/nix_cmake_example/raw/master/doc/hydra_nix_example.png" alt="Hydra example output" />
<figcaption aria-hidden="true">Hydra example output</figcaption>
</figure>
<p>The whole output can be inspected on
<a href="https://hydra.kosmosgame.com/jobset/github/nix_cmake_example#tabs-jobs" class="uri">https://hydra.kosmosgame.com/jobset/github/nix_cmake_example#tabs-jobs</a></p>
<h3 id="cross-compilation">Cross Compilation</h3>
<p>Just touching this topic by dropping some links</p>
<ul>
<li><a href="https://nixos.wiki/wiki/Cross_Compiling" class="uri">https://nixos.wiki/wiki/Cross_Compiling</a></li>
<li><a href="https://matthewbauer.us/blog/beginners-guide-to-cross.html" class="uri">https://matthewbauer.us/blog/beginners-guide-to-cross.html</a></li>
</ul>]]></description>
    <pubDate>Wed, 17 Apr 2019 00:00:00 UT</pubDate>
    <guid>https://blog.galowicz.de/2019/04/17/tutorial_nix_cpp_setup</guid>
    <dc:creator>Jacek Galowicz</dc:creator>
</item>
<item>
    <title>Managing libraries with Nix</title>
    <link>https://blog.galowicz.de/2018/02/27/managing_libraries_with_nix</link>
    <description><![CDATA[<p>While learning Haskell and using its really smart library dependency management tools (<a href="https://www.haskell.org/cabal/"><code>cabal</code></a> and <a href="https://docs.haskellstack.org/en/stable/README/"><code>stack</code></a>), i realized that the C++ eco system has a problem:
There are no handy <em>established</em> tools that let the developer declare which libraries (and versions) are required for a project which can then be automatically installed in a portable way.
<a href="https://nixos.org/nix/"><code>Nix</code></a> however convinced me to be more versatile and powerful than <a href="https://www.conan.io/">Conan</a> and handier than <a href="https://www.docker.com/">Docker</a>, <a href="https://www.vagrantup.com/">Vagrant</a>, etc. (although it’s fair to say that i am mixing use cases here a little bit!)
In this article, i am going to showcase this great tool a little bit.</p>
<!--more-->
<p>This article is rather long (mostly because of many command line excerpts).
Feel free to jump to the end, where we will compile and run the same project with 3 different compilers just by changing the command line a bit.</p>
<h2 id="use-case-example">Use case example</h2>
<p>So i have been developing a little library to see if i can implement a handy parser library in C++ that models how you build parsers in Haskell using the <a href="https://hackage.haskell.org/package/parsec"><code>parsec</code> library</a>.</p>
<p>The project can be checked out on <a href="https://github.com/tfc/attoparsecpp">github.com/tfc/attoparsecpp</a>. It is however not important to look into it.
This article is not at all about parsers, Haskell, or my specific library.
My little project shall just serve as an example project that has unit tests and benchmarks.</p>
<p>For libraries it is important that they build warning-free with:</p>
<ul>
<li>different compilers</li>
<li>even different compiler versions</li>
</ul>
<p>In addition to that, it is a nice-to-have to also compare the benchmark numbers among those!</p>
<p>However, the library has the following dependencies:</p>
<ul>
<li><a href="https://github.com/catchorg/Catch2"><code>catch</code></a> for building the unit tests</li>
<li><a href="https://github.com/google/benchmark"><code>benchmark</code> (from Google)</a> for building the benchmarks</li>
</ul>
<p>That means: in order to build this project you need to install those.
Some developers just install them the oldschool way or they pull them in as git submodules and then embedd them into the <code>Makefile</code> (or <code>cmake</code> pendants etc.).
Some other developers would define Docker images (or Vagrant etc.).
There is also the Conan package manager which enables the developer to just define which libraries are needed.</p>
<h2 id="installing-nix">Installing Nix</h2>
<p>Let us now completely concentrate on Nix. What is it? <a href="https://nixos.org/nix/">The Nix homepage</a> states:</p>
<blockquote>
<p>Nix is a powerful package manager for Linux and other Unix systems that makes package management reliable and reproducible.
It provides atomic upgrades and rollbacks, side-by-side installation of multiple versions of a package, multi-user package management and easy setup of build environments.
…</p>
</blockquote>
<p>Nix can be installed on Linux, Mac, and other Unixes.
(I guess it can be installed in the Linux-Subsystem on Windows, but i am not sure as i am no Windows user).
Just as a side note: There is even a <a href="https://nixos.org/">Linux distribution called “NixOS”</a>.</p>
<p>The installation of Nix is really simple.
Please first study the content of <a href="https://nixos.org/nix/install"><code>https://nixos.org/nix/install</code></a> and then run the following command in the bash (Or run the parts of the script you like. It is interesting how about 90% of the critisizm on Nix concentrate on this shell command.):</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> curl https://nixos.org/nix/install <span class="kw">|</span> <span class="fu">sh</span></span></code></pre></div>
<p>The installation script will download and extract a large tarball into the <code>/nix</code> folder on your system.
In addition to that, it will activate a build daemon and create some user accounts in order to isolate things while building packages.
After the installation, there will never be any need to use <code>sudo</code> in combination with nix calls again.
It is generally possible to install nix on systems where even creating <code>/nix</code> is not allowed (see the <a href="https://nixos.wiki/wiki/Nix_Installation_Guide">installation guide</a> for more details).</p>
<h2 id="installing-project-dependencies">Installing project dependencies</h2>
<p>After cloning the C++ project on a mac where only <code>git</code> and <code>clang++</code>, we will have trouble building the project without installing the libraries:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> cd test <span class="kw">&amp;&amp;</span> <span class="fu">make</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="ex">c++</span> <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-c</span> main.cpp</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ex">main.cpp:2:10:</span> fatal error: <span class="st">&#39;catch/catch.hpp&#39;</span> file not found</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co">#include &lt;catch/catch.hpp&gt;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>         <span class="ex">^~~~~~~~~~~~~~~~~</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span> error generated.</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="ex">make:</span> <span class="pp">***</span> [main.o] Error 1</span></code></pre></div>
<p>For the unit tests, we only need the <code>catch</code> library.
That’s easy, as the Nix repository has that.</p>
<blockquote>
<p>Another “catch” is that the <code>make</code> call ended up invoking <code>c++</code>, which is our Mac system compiler that is not really prepared to be used with Nix-installations of packages.
This is part of some mechanics which the Nix docs cover much better.</p>
</blockquote>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-env <span class="at">-qaP</span> <span class="at">--description</span> <span class="kw">|</span> <span class="fu">grep</span> catch</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ex">nixpkgs.catch</span>               catch-1.9.6               A multi-paradigm automated test framework for C++ and Objective-C <span class="er">(</span><span class="ex">and,</span> maybe, C<span class="kw">)</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span></code></pre></div>
<p>So let’s build it with catch installed:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">-p</span> clang <span class="at">-p</span> catch</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell:~/project_dir]$</span> cd test <span class="kw">&amp;&amp;</span> <span class="fu">make</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-c</span> main.cpp</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-I..</span>/include <span class="at">-c</span> test.cpp</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="ex">test.cpp:127:46:</span> error: too many arguments provided to function-like macro invocation</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>            <span class="ex">REQUIRE</span><span class="er">(</span> <span class="ex">r-</span><span class="op">&gt;</span>first == vect_t{<span class="st">&#39;a&#39;</span>, <span class="st">&#39;b&#39;</span>, <span class="st">&#39;c&#39;</span>}<span class="kw">);</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>                                             <span class="ex">^</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/gsklw95pxb9npyqpfpczagchk8kdsgzb-catch-1.9.6/include/catch/catch.hpp:11450:9:</span> note: macro <span class="st">&#39;REQUIRE&#39;</span> defined here</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="co">#define REQUIRE( expr ) INTERNAL_CATCH_TEST( &quot;REQUIRE&quot;, Catch::ResultDisposition::Normal, expr  )</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span></code></pre></div>
<p>Ok, the compiler can find the <code>catch.hpp</code> header, but it does not compile.
The problem here is that i wrote the unit tests with <code>catch2</code> and the package in the Nix repo is a little bit too old.
I learned Nix the hard way by doing the following:</p>
<h2 id="writing-our-own-nix-expressions">Writing our own Nix expressions</h2>
<p>The Nix ecosystem provides a rich database of packages for everything which does not only include libraries, but also applications.
In this case however, the library is too old and we need a more current one.</p>
<p>While the <code>catch</code> library just consists of a single header that is really easy to download, it is also a really simple example for building a Nix derivation that automatically obtains it from github and provides it for building.
So let’s do that here. We will also install a newer google benchmark library (which is a bit more complicated as it is not header-only) this way later.</p>
<p>A Nix derivation is kind of a cooking recipe that tells where to get what and what to do with it in order to make it useful.
In order to get catch version 2.1.2, we create a file <code>catch.nix</code> in the project folder:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode numberSource numberLines"><code class="sourceCode"><span id="cb5-1"><a href="#cb5-1"></a># file: catch.nix</span>
<span id="cb5-2"><a href="#cb5-2"></a>{ stdenv, fetchurl }:</span>
<span id="cb5-3"><a href="#cb5-3"></a></span>
<span id="cb5-4"><a href="#cb5-4"></a>stdenv.mkDerivation rec {</span>
<span id="cb5-5"><a href="#cb5-5"></a>  name = &quot;catch-${version}&quot;;</span>
<span id="cb5-6"><a href="#cb5-6"></a>  version = &quot;2.1.2&quot;;</span>
<span id="cb5-7"><a href="#cb5-7"></a></span>
<span id="cb5-8"><a href="#cb5-8"></a>  src = fetchurl {</span>
<span id="cb5-9"><a href="#cb5-9"></a>      url = &quot;https://github.com/catchorg/Catch2/releases/download/v2.1.2/catch.hpp&quot;;</span>
<span id="cb5-10"><a href="#cb5-10"></a>      sha256 = &quot;e8b8f3109716891aa99b1a8e29cd0d627419bdc4a8d2eeef0d8370aaf8d5e483&quot;;</span>
<span id="cb5-11"><a href="#cb5-11"></a>  };</span>
<span id="cb5-12"><a href="#cb5-12"></a></span>
<span id="cb5-13"><a href="#cb5-13"></a>  # It is just the file. No unpacking needed. Seems like we need to create</span>
<span id="cb5-14"><a href="#cb5-14"></a>  # _some_ folder, otherwise we get errors.</span>
<span id="cb5-15"><a href="#cb5-15"></a>  unpackCmd = &quot;mkdir dummy_dir&quot;;</span>
<span id="cb5-16"><a href="#cb5-16"></a></span>
<span id="cb5-17"><a href="#cb5-17"></a>  installPhase = &#39;&#39;</span>
<span id="cb5-18"><a href="#cb5-18"></a>    mkdir -p $out/include/catch</span>
<span id="cb5-19"><a href="#cb5-19"></a>    cp ${src} $out/include/catch/catch.hpp</span>
<span id="cb5-20"><a href="#cb5-20"></a>  &#39;&#39;;</span>
<span id="cb5-21"><a href="#cb5-21"></a></span>
<span id="cb5-22"><a href="#cb5-22"></a>  meta = {</span>
<span id="cb5-23"><a href="#cb5-23"></a>    description = &quot;A modern, C++-native, header-only, test framework for unit-tests, TDD and BDD - using C++11, C++14, C++17 and later&quot;;</span>
<span id="cb5-24"><a href="#cb5-24"></a>    homepage = http://catch-lib.net;</span>
<span id="cb5-25"><a href="#cb5-25"></a>  };</span>
<span id="cb5-26"><a href="#cb5-26"></a>}</span></code></pre></div>
<p>There is a lot of <em>voodoo</em> going on here for anyone who does not know Nix.
Nix is its own scripting language (a purely functional one), that is why it that script initially looks so complicated.
The important parts are:</p>
<ul>
<li>lines 8-11, <code>fetchurl</code>:
<ul>
<li>Where to get the catch header file?</li>
<li>For control reasons we also define what hash it needs to have.</li>
</ul></li>
<li>lines 17-20, <code>installPhase</code>:
<ul>
<li>We define that <code>catch.hpp</code> needs to be installed into <code>$out/include/catch/catch.hpp</code>, wherever that is.</li>
</ul></li>
</ul>
<p>Let us bring <code>nix-shell</code> to use that file and install catch for us:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">-p</span> <span class="st">&#39;with (import &lt;nixpkgs&gt; {}); callPackage ./catch.nix {}&#39;</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="ex">these</span> derivations will be built:</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/byy8sgy8crdhzyvjxzzbq4zhg8kbvhpp-catch.hpp.drv</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/v75n72czr0vgqz4zacrzk2wsrr1jg1kc-catch-2.1.2.drv</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="ex">these</span> paths will be fetched <span class="er">(</span><span class="ex">0.82</span> MiB download, 4.50 MiB unpacked<span class="kw">)</span><span class="bu">:</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/0cs9d2ml9cql18l1vsxrdmjliiz0p0rg-bash-4.4-p12-info</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/0p2m9iz8w4551qkgzsqvl2vm2ilyb6ww-stdenv-darwin</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/2pvbzmacxfhm1akl9a5shqrk47i53cpv-libssh2-1.8.0-dev</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/cxz0drsrlbmdi1krr0n57zfcswjmrv5i-mirrors-list</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/czw3qnwsify74b5bljll1lmm8k6kk09h-curl-7.55.1-dev</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/icm30zksjzx8546d02y9gi4vzdi42j2w-bash-4.4-p12-man</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/kwclw4knsrs6l4fi98wnzg713r8p0wls-openssl-1.0.2l-dev</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/n2aycrbi6myl9wqr6b7w2n578j505czd-curl-7.55.1-man</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/w4m16gcmlxsgx468p7k3993vwf6i6hsx-bash-4.4-p12-dev</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/yw461g3iqihmq6i1mrjn6khbwn6gx0rl-bash-4.4-p12-doc</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="ex">building</span> path<span class="er">(</span><span class="ex">s</span><span class="kw">)</span> <span class="ex">‘/nix/store/62g4h135grzi5xn5y7hyrxg1r8ac408g-catch-2.1.2’</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a><span class="ex">unpacking</span> sources</span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a><span class="ex">unpacking</span> source archive /nix/store/4nx2d1j5jnnb9zqlmpl45g68msqycfjy-catch.hpp</span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a><span class="ex">patching</span> script interpreter paths in /nix/store/62g4h135grzi5xn5y7hyrxg1r8ac408g-catch-2.1.2</span></code></pre></div>
<p>There was a lot going on after firing that command: Nix even installed <code>curl</code> and all its dependencies, because it needs a tool to download the header file.
The last line tells us that there is now something in <code>/nix/store/62g4h135grzi5xn5y7hyrxg1r8ac408g-catch-2.1.2</code>.
Let’s have a look into it:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell:~/Desktop/p]$</span> ls <span class="at">-lsa</span> /nix/store/62g4h135grzi5xn5y7hyrxg1r8ac408g-catch-2.1.2/include/catch/catch.hpp</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="ex">428</span> <span class="at">-r--r--r--</span> 1 root wheel 435409 Jan  1  1970 /nix/store/62g4h135grzi5xn5y7hyrxg1r8ac408g-catch-2.1.2/include/catch/catch.hpp</span></code></pre></div>
<p>Ok, so whenever we add this strange path to the compiler command line using <code>-I/nix/store/...</code>, then our tests will compile.</p>
<p>Let’s again start the nix shell with our catch derivation and clang and GNU make and try again:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">-p</span> clang <span class="st">&#39;with (import &lt;nixpkgs&gt; {}); callPackage ./catch.nix {}&#39;</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell:~/project_dir]$</span> cd test <span class="kw">&amp;&amp;</span> <span class="fu">make</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-c</span> main.cpp</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-I..</span>/include <span class="at">-c</span> test.cpp</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-I..</span>/include <span class="at">-c</span> math_expression.cpp</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-o</span> main main.o test.o math_expression.o</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell:~/project_dir]$</span> ./main</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="ex">===============================================================================</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="ex">All</span> tests passed <span class="er">(</span><span class="ex">172</span> assertions in 11 test cases<span class="kw">)</span></span></code></pre></div>
<p>Yes, that went well!</p>
<blockquote>
<p>(The <code>-I/nix/store/...</code> parameter was handled for us implicitly) by the Nix-installed compiler</p>
</blockquote>
<p>It is however pretty ugly to call <code>nix-shell</code> with all those arguments that are hard to memorize.
For this purpose we can define a <code>default.nix</code> file that will be automatically sourced by Nix:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co"># file: default.nix</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">pkgs</span> <span class="op">?</span> <span class="bu">import</span> &lt;nixpkgs&gt; <span class="op">{},</span> <span class="op">}</span>:</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="kw">rec</span> <span class="op">{</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">myProject</span> <span class="op">=</span> pkgs.stdenv.mkDerivation <span class="op">{</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;attoparsecpp&quot;</span><span class="op">;</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>    <span class="va">version</span> <span class="op">=</span> <span class="st">&quot;dev-0.1&quot;</span><span class="op">;</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    <span class="va">buildInputs</span> <span class="op">=</span> <span class="kw">with</span> pkgs<span class="op">;</span> <span class="op">[</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>      <span class="op">(</span>callPackage <span class="ss">./catch.nix</span> <span class="op">{</span> <span class="op">})</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">];</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>There’s again some voodoo for Nix-novices, but the important part is that we call our package <code>catch.nix</code> in the context of a standard build environment (<code>stdenv</code>).
With <code>stdenv</code> we don’t need to reference the compiler explicitly any longer.</p>
<p>Now, we can do the following:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">--command</span> <span class="st">&quot;cd test &amp;&amp; make -B -j4 &amp;&amp; ./main&quot;</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-c</span> main.cpp</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-I..</span>/include <span class="at">-c</span> test.cpp</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-I..</span>/include <span class="at">-c</span> math_expression.cpp</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-o</span> main main.o test.o math_expression.o</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="ex">===============================================================================</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="ex">All</span> tests passed <span class="er">(</span><span class="ex">172</span> assertions in 11 test cases<span class="kw">)</span></span></code></pre></div>
<p>Nix finds our <code>default.nix</code> file and gets everything in order.</p>
<p>Ok, great.
How about running benchmarks?</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">--command</span> <span class="st">&quot;cd benchmark &amp;&amp; make -B -j4 &amp;&amp; ./main&quot;</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-I..</span>/include main.cpp <span class="at">-o</span> main <span class="at">-lbenchmark</span> <span class="at">-lpthread</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="ex">main.cpp:7:10:</span> fatal error: <span class="st">&#39;benchmark/benchmark.h&#39;</span> file not found</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="co">#include &lt;benchmark/benchmark.h&gt;</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>         <span class="ex">^~~~~~~~~~~~~~~~~~~~~~~</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span> error generated.</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="ex">make:</span> <span class="pp">***</span> [Makefile:8: main] Error 1</span></code></pre></div>
<p>Seems like we need to install google benchmark, too.
There is a <code>gbenchmark</code> package, but it’s again too old.
Nothing we couldn’t fix with our own Nix expression, though:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode numberSource numberLines"><code class="sourceCode"><span id="cb12-1"><a href="#cb12-1"></a># file googlebench.nix</span>
<span id="cb12-2"><a href="#cb12-2"></a>{ stdenv, fetchFromGitHub, cmake }:</span>
<span id="cb12-3"><a href="#cb12-3"></a></span>
<span id="cb12-4"><a href="#cb12-4"></a>stdenv.mkDerivation rec {</span>
<span id="cb12-5"><a href="#cb12-5"></a>  name = &quot;googlebench-${version}&quot;;</span>
<span id="cb12-6"><a href="#cb12-6"></a>  version = &quot;1.3.0&quot;;</span>
<span id="cb12-7"><a href="#cb12-7"></a></span>
<span id="cb12-8"><a href="#cb12-8"></a>  src = fetchFromGitHub {</span>
<span id="cb12-9"><a href="#cb12-9"></a>      owner = &quot;google&quot;;</span>
<span id="cb12-10"><a href="#cb12-10"></a>      repo = &quot;benchmark&quot;;</span>
<span id="cb12-11"><a href="#cb12-11"></a>      rev = &quot;v${version}&quot;;</span>
<span id="cb12-12"><a href="#cb12-12"></a>      sha256 = &quot;1qx2dp7y0haj6wfbbfw8hx8sxb8ww0igdfrmmaaxfl0vhckylrxh&quot;;</span>
<span id="cb12-13"><a href="#cb12-13"></a>  };</span>
<span id="cb12-14"><a href="#cb12-14"></a></span>
<span id="cb12-15"><a href="#cb12-15"></a>  nativeBuildInputs = [ cmake ];</span>
<span id="cb12-16"><a href="#cb12-16"></a></span>
<span id="cb12-17"><a href="#cb12-17"></a>  meta = {</span>
<span id="cb12-18"><a href="#cb12-18"></a>    description = &quot;google benchmark&quot;;</span>
<span id="cb12-19"><a href="#cb12-19"></a>  };</span>
<span id="cb12-20"><a href="#cb12-20"></a>}</span></code></pre></div>
<p>Building the benchmark library involves compiling it with <code>cmake</code>, as it is more than just headers.
Luckily, the Nix expression language came with its own library installed.
It has handy little helpers like <code>fetchFromGitHub</code> that accepts some arguments needed to construct a download link from it and automatically unpack it!</p>
<p>The line <code>nativeBuildInputs</code> instructs Nix to install <code>cmake</code> for building this package.
Everything else is automatically deduced.
After adding this Nix derivation to our <code>default.nix</code> file, it will build google benchmark for us before we can run our own makefile:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">--command</span> <span class="st">&quot;cd benchmark &amp;&amp; make -B -j4 &amp;&amp; ./main&quot;</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="ex">these</span> derivations will be built:</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/vbi7a7kjxz24zmq7lwaa044735hdlmb3-benchmark-v1.3.0-src.drv</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/il7biicbp3pa39nl5ffkyi9b1wwkw0b1-googlebench-1.3.0.drv</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="ex">these</span> paths will be fetched <span class="er">(</span><span class="ex">0.12</span> MiB download, 0.44 MiB unpacked<span class="kw">)</span><span class="bu">:</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/i1b5rym52fhqkdz2kzaqn1gnk6nhf0b7-unzip-6.0</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="fu">clang</span>++ <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-I..</span>/include main.cpp <span class="at">-o</span> main <span class="at">-lbenchmark</span> <span class="at">-lpthread</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="ex">Run</span> on <span class="er">(</span><span class="ex">8</span> X 2300 MHz CPU s<span class="kw">)</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="ex">2018-02-27</span> 21:50:34</span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="ex">-----------------------------------------------------------------------</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a><span class="ex">Benchmark</span>                                Time           CPU Iterations</span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a><span class="ex">-----------------------------------------------------------------------</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a><span class="ex">measure_word_parsing/10</span>                 55 ns         55 ns   12703483</span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a><span class="ex">measure_word_parsing/100</span>              1107 ns       1105 ns     654444</span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a><span class="ex">measure_word_parsing/1000</span>             6021 ns       6012 ns     125101</span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a><span class="ex">measure_word_parsing/10000</span>           47889 ns      47812 ns      13667</span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a><span class="ex">measure_word_parsing/100000</span>         481643 ns     480574 ns       1428</span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a><span class="ex">measure_word_parsing/1000000</span>       4865444 ns    4854115 ns        130</span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a><span class="ex">measure_word_parsing/10000000</span>     54049501 ns   53973846 ns         13</span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a><span class="ex">measure_word_parsing_BigO</span>             5.40 N       5.39 N</span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a><span class="ex">measure_word_parsing_RMS</span>                 2 %          2 %</span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a><span class="ex">measure_vector_filling/10</span>              457 ns        455 ns    1683712</span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a><span class="ex">measure_vector_filling/100</span>            2282 ns       2279 ns     305181</span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span></code></pre></div>
<p>Yes, that’s some successful benchmark output!
This time it even installed <code>unzip</code> in case we don’t have it, yet.</p>
<p>However, we do not have to care about anything library-related other than linking.
The Makefile does not reflect any knowledge of Nix or the install location of our dependencies:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> cat benchmark/Makefile</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="ex">default:</span> main</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="va">CXXFLAGS</span><span class="op">=</span>-O2 <span class="ex">-std=c++14</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a><span class="va">LDFLAGS</span><span class="op">=</span>-lbenchmark <span class="ex">-lpthread</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="ex">main:</span> main.cpp ../include/parser.hpp ../include/math_expression.hpp</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>	<span class="va">$(</span><span class="ex">CXX</span><span class="va">)</span> <span class="va">$(</span><span class="ex">CXXFLAGS</span><span class="va">)</span> <span class="at">-I..</span>/include main.cpp <span class="at">-o</span> main <span class="va">$(</span><span class="ex">LDFLAGS</span><span class="va">)</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a><span class="ex">clean:</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>	<span class="fu">rm</span> <span class="at">-rf</span> main <span class="pp">*</span>.o</span></code></pre></div>
<h2 id="compiling-and-running-tests-with-different-compilers">Compiling and running tests with different compilers</h2>
<p>So… when pulling in compilers and libraries is so simple with Nix - how about checking if our library compiles with all compilers and versions of those?</p>
<p>We need to add a little modification to the <code>default.nix</code> file in order to <em>parametrize</em> it:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode numberSource numberLines"><code class="sourceCode"><span id="cb15-1"><a href="#cb15-1"></a># file default.nix</span>
<span id="cb15-2"><a href="#cb15-2"></a>{</span>
<span id="cb15-3"><a href="#cb15-3"></a>    pkgs   ? import &lt;nixpkgs&gt; {},</span>
<span id="cb15-4"><a href="#cb15-4"></a>    stdenv ? pkgs.stdenv</span>
<span id="cb15-5"><a href="#cb15-5"></a>}:</span>
<span id="cb15-6"><a href="#cb15-6"></a>rec {</span>
<span id="cb15-7"><a href="#cb15-7"></a>  myProject = stdenv.mkDerivation {</span>
<span id="cb15-8"><a href="#cb15-8"></a>    name = &quot;attoparsecpp&quot;;</span>
<span id="cb15-9"><a href="#cb15-9"></a>    version = &quot;dev-0.1&quot;;</span>
<span id="cb15-10"><a href="#cb15-10"></a>    buildInputs = with pkgs; [</span>
<span id="cb15-11"><a href="#cb15-11"></a>      (callPackage ./catch.nix { })</span>
<span id="cb15-12"><a href="#cb15-12"></a>      (callPackage ./googlebench.nix { stdenv = stdenv; })</span>
<span id="cb15-13"><a href="#cb15-13"></a>    ];</span>
<span id="cb15-14"><a href="#cb15-14"></a>  };</span>
<span id="cb15-15"><a href="#cb15-15"></a>}</span></code></pre></div>
<p>We applied the following changes:</p>
<ul>
<li>line 4: We added <code>stdenv</code> as a named parameter of this Nix derivation. <code>pkgs.stdenv</code> is its default value.</li>
<li>line 7: Now we use <code>stdenv.mkDerivation</code> instead of <code>pkgs.stdenv.mkDerivation</code>.</li>
<li>line 12: If our <code>stdenv</code> changes, this change is also forwarded into the <code>googlebench.nix</code> derivation. (Which then needs to be built just for this compiler, too)</li>
</ul>
<p>With this change, we can now build and execute our tests with different compilers just by changing varying <code>nix-shell</code> arguments.
Let’s try GCC now:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="dt">\</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span>  --command <span class="st">&quot;</span><span class="dt">\$</span><span class="st">CXX --version &amp;&amp; cd test &amp;&amp; make -B -j4 &amp;&amp; ./main&quot;</span> <span class="dt">\</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span>  --arg stdenv <span class="st">&quot;with (import &lt;nixpkgs&gt; {}); gccStdenv&quot;</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a><span class="ex">these</span> derivations will be built:</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/cs2r1wbz8n33fspdlqrcm5pf174qdgcj-googlebench-1.3.0.drv</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a><span class="ex">these</span> paths will be fetched <span class="er">(</span><span class="ex">35.32</span> MiB download, 145.96 MiB unpacked<span class="kw">)</span><span class="bu">:</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/1krs71lr68pvwjf21fq3f8wbw4c460sh-gcc-6.4.0</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/gya4nskw8khp28vy0f8m01lf4z8337cz-stdenv-darwin</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/yn7m3qnp0m3kf1acpjyxwqxzf3b40jf8-gcc-wrapper-6.4.0</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a><span class="ex">g++</span> <span class="er">(</span><span class="ex">GCC</span><span class="kw">)</span> <span class="ex">6.4.0</span></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a><span class="ex">Copyright</span> <span class="er">(</span><span class="ex">C</span><span class="kw">)</span> <span class="ex">2017</span> Free Software Foundation, Inc.</span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a><span class="ex">This</span> is free software<span class="kw">;</span> <span class="ex">see</span> the source for copying conditions.  There is NO</span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true" tabindex="-1"></a><span class="ex">warranty</span><span class="kw">;</span> <span class="ex">not</span> even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true" tabindex="-1"></a><span class="ex">g++</span> <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-c</span> main.cpp</span>
<span id="cb16-17"><a href="#cb16-17" aria-hidden="true" tabindex="-1"></a><span class="ex">g++</span> <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-I..</span>/include <span class="at">-c</span> test.cpp</span>
<span id="cb16-18"><a href="#cb16-18" aria-hidden="true" tabindex="-1"></a><span class="ex">g++</span> <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-I..</span>/include <span class="at">-c</span> math_expression.cpp</span>
<span id="cb16-19"><a href="#cb16-19" aria-hidden="true" tabindex="-1"></a><span class="ex">g++</span> <span class="at">-o</span> main main.o test.o math_expression.o</span>
<span id="cb16-20"><a href="#cb16-20" aria-hidden="true" tabindex="-1"></a><span class="ex">===============================================================================</span></span>
<span id="cb16-21"><a href="#cb16-21" aria-hidden="true" tabindex="-1"></a><span class="ex">All</span> tests passed <span class="er">(</span><span class="ex">172</span> assertions in 11 test cases<span class="kw">)</span></span></code></pre></div>
<p>The magic <code>--arg stdenv "with (import &lt;nixpkgs&gt; {}); gccStdenv"</code> line pushed a GCC build environment into the <code>stdenv</code> variable.
The <code>$CXX --version</code> command in the <code>--command</code> part of the command line shows that it’s really GCC 6.4.0 now (instead of clang).</p>
<p>We can do the same with GCC 7:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="dt">\</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>  <span class="at">--command</span> <span class="st">&quot;</span><span class="dt">\$</span><span class="st">CXX --version &amp;&amp; cd test &amp;&amp; make -B -j4 &amp;&amp; ./main&quot;</span> <span class="dt">\</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>  <span class="at">--arg</span> stdenv <span class="st">&quot;with (import &lt;nixpkgs&gt; {}); overrideCC gccStdenv gcc7&quot;</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a><span class="ex">these</span> derivations will be built:</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/860fz8zccpxnia4ahzmxcvygms29nn1y-stdenv-darwin.drv</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/lnhid58mlkgcaqq6dg0mnaly7y2p1ap4-googlebench-1.3.0.drv</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a><span class="ex">these</span> paths will be fetched <span class="er">(</span><span class="ex">37.09</span> MiB download, 154.89 MiB unpacked<span class="kw">)</span><span class="bu">:</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/27mxffxnw9q070wqfzhpn3p32h0kafws-gcc-7.2.0-lib</span></span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/nknfwhafb2cwlrrwxh5dcwbdznf1fzq1-gcc-7.2.0</span></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/nix/store/xxb7a4i2y7mn6y0mkkzgy2cgnd78hahp-gcc-wrapper-7.2.0</span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a><span class="ex">g++</span> <span class="er">(</span><span class="ex">GCC</span><span class="kw">)</span> <span class="ex">7.2.0</span></span>
<span id="cb17-13"><a href="#cb17-13" aria-hidden="true" tabindex="-1"></a><span class="ex">Copyright</span> <span class="er">(</span><span class="ex">C</span><span class="kw">)</span> <span class="ex">2017</span> Free Software Foundation, Inc.</span>
<span id="cb17-14"><a href="#cb17-14" aria-hidden="true" tabindex="-1"></a><span class="ex">This</span> is free software<span class="kw">;</span> <span class="ex">see</span> the source for copying conditions.  There is NO</span>
<span id="cb17-15"><a href="#cb17-15" aria-hidden="true" tabindex="-1"></a><span class="ex">warranty</span><span class="kw">;</span> <span class="ex">not</span> even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span>
<span id="cb17-16"><a href="#cb17-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-17"><a href="#cb17-17" aria-hidden="true" tabindex="-1"></a><span class="ex">g++</span> <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-c</span> main.cpp</span>
<span id="cb17-18"><a href="#cb17-18" aria-hidden="true" tabindex="-1"></a><span class="ex">g++</span> <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-I..</span>/include <span class="at">-c</span> test.cpp</span>
<span id="cb17-19"><a href="#cb17-19" aria-hidden="true" tabindex="-1"></a><span class="ex">g++</span> <span class="at">-O2</span> <span class="at">-std</span><span class="op">=</span>c++14 <span class="at">-I..</span>/include <span class="at">-c</span> math_expression.cpp</span>
<span id="cb17-20"><a href="#cb17-20" aria-hidden="true" tabindex="-1"></a><span class="ex">g++</span> <span class="at">-o</span> main main.o test.o math_expression.o</span>
<span id="cb17-21"><a href="#cb17-21" aria-hidden="true" tabindex="-1"></a><span class="ex">===============================================================================</span></span>
<span id="cb17-22"><a href="#cb17-22" aria-hidden="true" tabindex="-1"></a><span class="ex">All</span> tests passed <span class="er">(</span><span class="ex">172</span> assertions in 11 test cases<span class="kw">)</span></span></code></pre></div>
<p>Easy. It downloads <em>another</em> GCC and uses that for building.</p>
<p>Using the same strategy, we can also run our benchmarks with all these compilers.
We could even write a Nix derivation that actually does this and generates a nice GNUPlot chart from all benchmark runs.</p>
<h2 id="fallout">Fallout</h2>
<p>While playing around, we installed at least 3 different compilers and recompiled the google benchmark library for each of them.
A nice thing about this is that this all needs to be done only once.
The resulting packages can then be used again on the next invocation of a <code>nix-shell</code> environment.
Even better: if another project happens to need the same compiler/libraries, then they are in place already!
These things are shared system wide now:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> find /nix/store <span class="dt">\(</span> <span class="at">-name</span> <span class="st">&quot;*googlebench*&quot;</span> <span class="at">-or</span> <span class="at">-name</span> <span class="st">&quot;*gcc*&quot;</span> <span class="at">-or</span> <span class="at">-name</span> <span class="st">&quot;*catch*&quot;</span> or <span class="at">-name</span> <span class="st">&quot;*clang*&quot;</span> <span class="dt">\)</span> <span class="at">-type</span> d <span class="at">-maxdepth</span> 1</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/62g4h135grzi5xn5y7hyrxg1r8ac408g-catch-2.1.2</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/2bz86w853wz8q036armrqzds1wh41l2d-googlebench-1.3.0</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/294rz6hxllqp5iqag01p2ymv37g25zhz-googlebench-1.3.0</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/02hca1p50i735iimv28cj9l0lmdzwljn-googlebench-1.3.0</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/5giskx5cy9q2qhv946svwmqw77vbr2iy-clang-4.0.1</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/mx8870valpdhywaaq16sdiiajrpyj4q7-clang-wrapper-4.0.1</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/1krs71lr68pvwjf21fq3f8wbw4c460sh-gcc-6.4.0</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/1p5bg2c6pd2v1lgnf0823sxcilf73ydi-gcc-6.4.0-lib</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/yn7m3qnp0m3kf1acpjyxwqxzf3b40jf8-gcc-wrapper-6.4.0</span></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/nknfwhafb2cwlrrwxh5dcwbdznf1fzq1-gcc-7.2.0</span></span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/27mxffxnw9q070wqfzhpn3p32h0kafws-gcc-7.2.0-lib</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a><span class="ex">/nix/store/xxb7a4i2y7mn6y0mkkzgy2cgnd78hahp-gcc-wrapper-7.2.0</span></span></code></pre></div>
<p>So we can see that we have one version of clang, two versions of GCC, just one version of catch and three versions of googlebench.
There is of course only one version of catch becasue it is just a header that does not need to be recompiled for different compilers.</p>
<p>But how does Nix know which googlebench installation belongs to which clang/GCC?</p>
<p>The long cryptic prefix of every package folder is the <em>hash of its build configuration</em>!
The compiler choice is part of the build configuration, of course.</p>
<p>If another project has dependencies that overlap with ours in the sense that some dependency turns out to have the same configuraiton hash for the same package, then it will be shared.
As soon as the configuration changes a little bit - another package is created.</p>
<p>We can now delete everything with one command:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-collect-garbage <span class="at">-d</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="ex">removing</span> old generations of profile /nix/var/nix/profiles/per-user/tfc/profile</span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="ex">removing</span> old generations of profile /nix/var/nix/profiles/per-user/tfc/channels</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a><span class="ex">finding</span> garbage collector roots...</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a><span class="ex">deleting</span> unused links...</span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a><span class="ex">note:</span> currently hard linking saves 0.00 MiB</span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a><span class="ex">606</span> store paths deleted, 358.10 MiB freed</span></code></pre></div>
<p>That’s it.
Our system is free of everything what was installed just for this project.</p>
<h2 id="purity">Purity</h2>
<p>By running <code>nix-shell --pure</code>, it is possible to <em>hide</em> everything which was not explicitly declared to be available:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">--pure</span> <span class="at">-p</span> gcc7</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell:~]$</span> clang++</span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a><span class="ex">bash:</span> clang++: command not found</span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell:~]$</span> exit</span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> nix-shell <span class="at">--pure</span> <span class="at">-p</span> clang</span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-10"><a href="#cb20-10" aria-hidden="true" tabindex="-1"></a><span class="ex">[nix-shell:~]$</span> g++</span>
<span id="cb20-11"><a href="#cb20-11" aria-hidden="true" tabindex="-1"></a><span class="ex">bash:</span> g++: command not found</span></code></pre></div>
<p>Using <code>--pure</code>, we can check if our <code>default.nix</code> <em>really</em> contains the complete list of dependencies.
That feature is something most other dependency management tools don’t do for us.</p>
<p>This way it cannot happen that a project builds on one computer, but not on the other, just because someone forgot to install something else that is implicitly needed.</p>
<h2 id="summary">Summary</h2>
<p>Nix just helped us with:</p>
<ul>
<li>fetching, compiling, and installing dependencies including compilers and libraries</li>
<li>easily changing the compiler and version between builds</li>
<li>managing all those dependencies without interference</li>
<li>getting rid of it again</li>
</ul>
<p>Maybe Conan would also have been able to do that (apart from the <code>--pure</code> feature).
Nix however does not only work for C/C++ projects:
It can be used for Rust, Haskell, Python, Ruby, etc. etc. - because it is a <em>universal</em> dependency manager.</p>
<p>Writing your own Nix derivations is only necessary if custom- or extremely new package versions are needed.
It is also not hard to do.
Existing packages can be rebuilt with different configurations, too.</p>
<p>Being completely amazed, i also installed NixOS on my laptop.
What’s great there is that i am now able to configure the whole system with just one <code>.nix</code> configuration file.
When that file changes, Nix automatically restarts only the affected services.
If it does not work, then it is possible to roll the system back to a previous configuration. (Remember all the stuff in <code>/nix/store/...</code>? It’s still there until it’s garbage-collected!)
The same system configuration could be used to clone the system elsewhere, etc.</p>
<p>This article is really just scratching the surface of Nix/NixOS’s possibilities.</p>]]></description>
    <pubDate>Tue, 27 Feb 2018 00:00:00 UT</pubDate>
    <guid>https://blog.galowicz.de/2018/02/27/managing_libraries_with_nix</guid>
    <dc:creator>Jacek Galowicz</dc:creator>
</item>
<item>
    <title>Iterators are also part of the C++ zero cost abstractions</title>
    <link>https://blog.galowicz.de/2017/07/02/order2_iterator</link>
    <description><![CDATA[<p>This article picks up an example operating system kernel code snippet that is written in C++, but looks like “C with classes”.
I think it is a great idea to implement Embedded projects/kernels in C++ instead of C and it’s nice to see that the number of embedded system developers that use C++ is rising.
Unfortunately, I see stagnation in terms of modern programming in embedded/kernel projects in the industry.
After diving through the context i demonstrate how to implement a nice iterator as a zero cost abstraction that helps tidy up the code.</p>
<!--more-->
<h2 id="the-real-life-story">The real life story</h2>
<blockquote>
<p>This context dive is rather long.
If you dont care about the actual logic behind the code, just jump to the next section.</p>
</blockquote>
<p>As an intern at Intel Labs in 2012, I had my first contact with microkernel operating systems that were implemented in C++.
This article concentrates on a recurring code pattern that I have seen very often in the following years also in other companies.
I have the opinion that such code should be written <em>once</em> as a little library helper.</p>
<p>Let’s jump right into it:
Most operating systems allow processes to share memory.
Memory is then usually shared by one process that tells the operating system kernel to map a specific memory range into the address space of another process, possibly at some different address than where it is visible for the original process.</p>
<p>In those <a href="https://en.wikipedia.org/wiki/Microkernel">microkernel operating system</a> environments I have been working on, memory ranges were described in a very specific way:
The beginning of a chunk is described by its <em>page number</em> in the virtual memory space.
The size of a chunk is described by its <em>order</em>.</p>
<blockquote>
<p>Both these characteristics are then part of a <em>capability range descriptor</em> and are used by some microkernel operating systems to describe ranges of memory, I/O ports, kernel objects, etc.
Capabilities are a <a href="https://en.wikipedia.org/wiki/Capability-based_security">security concept</a> i would like to ignore as much as possible for now, because the scope of this article is the maths behind capability range descriptors.</p>
</blockquote>
<p>Example:
A memory range that is 4 memory pages large and begins at address <code>0x123000</code> is described by <code>(0x123, 2)</code>.
We get from <code>0x123000</code> to <code>0x123</code>, because pages are 4096 bytes (0x1000 in hex) large. That means that we need to divide a virtual address pointer value by <code>0x1000</code> and get a virtual page number.
From 4 pages we get to the order value <code>2</code>, because <span class="math inline">4 = 2<sup>2</sup></span>, so the order is 2.</p>
<p>Ok, that is simple. It stops being simple as soon as one describes real-life memory ranges.
Such a <code>(base, order)</code> tuple is also called a <em>capability range descriptor</em>, and must follow the following rules:</p>
<ol type="1">
<li>Every memory capability’s size must be a power of 2. (By storing only the order, this rule is implicitly followed by design.)</li>
<li>Every capability’s base must be evenly divisible by its size.</li>
</ol>
<p>That means if we want to describe the memory range <code>[0x100, 0x107)</code> (the notation <code>[a, b)</code> means that the range goes from <code>a</code> to <code>b</code>, but does not contain <code>b</code>. Like it is the case for begin/end iterator pairs) following those rules, we would break it into multiple capability range descriptors:</p>
<ul>
<li><code>(0x100, 2)</code>, <span class="math inline">2<sup>2</sup> = 4</span> pages</li>
<li><code>(0x104, 1)</code>, <span class="math inline">2<sup>1</sup> = 2</span> pages</li>
<li><code>(0x106, 0)</code>, <span class="math inline">2<sup>0</sup> = 1</span> pages</li>
</ul>
<p>Let’s get towards actual code:
Mapping such an example range to another process’s address space would then look like the following code, which maps its own range <code>[0x100, 0x107)</code> to <code>[0x200, 0x207)</code> in the namespace of the other process using a structure <code>map_helper</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>map_helper<span class="op">.</span>source_base <span class="op">=</span> <span class="bn">0x100</span><span class="op">;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>map_helper<span class="op">.</span>push_back<span class="op">(</span><span class="bn">0x200</span><span class="op">,</span> <span class="dv">2</span><span class="op">);</span> <span class="co">// 2^2 pages = 4 pages</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>map_helper<span class="op">.</span>push_back<span class="op">(</span><span class="bn">0x204</span><span class="op">,</span> <span class="dv">1</span><span class="op">);</span> <span class="co">// 2^1 pages = 2 page</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>map_helper<span class="op">.</span>push_back<span class="op">(</span><span class="bn">0x206</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span> <span class="co">// 2^0 pages = 1 page</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>                                <span class="co">//       sum = 7 pages</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>map_helper<span class="op">.</span>delegate<span class="op">(</span>target_address_space<span class="op">);</span></span></code></pre></div>
<p>The <code>map_helper.delegate(...)</code> call results in a system call to the kernel which does the actual memory mapping.
In order to not result in one system call per mapping, <code>map_helper</code> accepts a whole batch of mappings that are sent to the kernel in one run.</p>
<blockquote>
<p>This looks very complicated but it is necessary to keep the microkernel <em>micro</em>.
When the kernel gets mapping requests preformatted like this, the kernel code that applies the mapping contains much less complicated logic.
An operating system kernel with a reduced amount of complicated logic is a good thing to have because then it is easier to prove that it is <em>correct</em>.</p>
</blockquote>
<p>Ok, that is nearly everything about expressing memory mappings with the logic of capability range descriptors.
There is one last quirk.</p>
<p>Imagine we want to map the range <code>[0x0, 0x10)</code>, which can be expressed as <code>(0x0, 4)</code> (<code>0x10 = 16</code>, and <span class="math inline">16 = 2<sup>4</sup></span>), to the range <code>[0x1, 0x11)</code> in the other process’s address space.
That should be easy since they only have an offset of 1 page to each other.
What is visible at address <code>0x1000</code> in the first process, will be visible at address <code>0x2000</code> in the other.
Actually, it is not that easy, because the capability range descriptor <code>(0x0, 4)</code> can not simply be described as <code>(0x1, 4)</code> in the other process’s address space.
It violates rule number 2 because <code>0x1</code> is not evenly divisible by <code>0x10</code>!</p>
<p>Frustratingly, this means that we need to break down the whole descriptor <code>(0x0, 4)</code> into 16 descriptors with order <code>0</code> because only such small ones have mappings that comply with the two rules in <strong>both</strong> address spaces.</p>
<p>This was already a worst-case example.
Another less bad example is the following one:
If we want to map <code>[0x0, 0x10)</code> to <code>[0x8, 0x18)</code> in the other process, we could do that with the two descriptors <code>(0, 3)</code> and <code>(8, 3)</code>, because both offsets <code>0x0</code> and <code>0x8</code> are evenly divisible by 8.
That allows for larger chunks.</p>
<p>A generic function that maps <em>any</em> page range to another process’s address space could finally look like the following:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> map<span class="op">(</span><span class="dt">word_t</span> base1<span class="op">,</span> <span class="dt">word_t</span> base2<span class="op">,</span> <span class="dt">word_t</span> size<span class="op">,</span> <span class="dt">foo_t</span> target_address_space<span class="op">)</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    map_helper<span class="op">.</span>source_base <span class="op">=</span> base1<span class="op">;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">constexpr</span> <span class="dt">word_t</span> max_bit <span class="op">{</span><span class="dv">1</span><span class="bu">ull</span> <span class="op">&lt;&lt;</span> <span class="op">(</span><span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>max_bit<span class="op">)</span> <span class="op">-</span> <span class="dv">1</span><span class="op">)};</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(</span>size<span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>        <span class="co">// take smaller order of both bases, as both must be divisible by it.</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> min_order <span class="op">{</span>order_min<span class="op">(</span>base1 <span class="op">|</span> base2 <span class="op">|</span> max_bit<span class="op">)};</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        <span class="co">// take largest possible order from actual size of unmapped rest</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> max_order <span class="op">{</span>order_max<span class="op">(</span>size<span class="op">)};</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>        <span class="co">// choose smaller of both</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> order     <span class="op">{</span>min<span class="op">(</span>min_order<span class="op">,</span> max_order<span class="op">)};</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>        map_helper<span class="op">.</span>push_back<span class="op">(</span>base2<span class="op">,</span> order<span class="op">);</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>map_helper<span class="op">.</span>full<span class="op">())</span> <span class="op">{</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>            map_helper<span class="op">.</span>delegate<span class="op">(</span>target_address_space<span class="op">);</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>            map_helper<span class="op">.</span>reset<span class="op">();</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>            map_helper<span class="op">.</span>source_base <span class="op">=</span> base1<span class="op">;</span></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> step <span class="op">{</span><span class="dv">1</span><span class="bu">ull</span> <span class="op">&lt;&lt;</span> order<span class="op">};</span></span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>        base1 <span class="op">+=</span> step<span class="op">;</span></span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>        base2 <span class="op">+=</span> step<span class="op">;</span></span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a>        size  <span class="op">-=</span> step<span class="op">;</span></span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>    map_helper<span class="op">.</span>delegate<span class="op">(</span>target_address_space<span class="op">);</span></span>
<span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>As a newcomer to such a project, you will soon understand the maths behind it.
You will see it everywhere, because the same technique is used for sharing memory, I/O ports, and descriptors for kernel objects like threads, semaphores, etc. between processes.</p>
<p>After you have seen repeatedly exactly the same calculation with different <em>payload</em> code between it, you might get sick of it.
Everywhere in the code base where this pattern is repeated, you have to follow the calculations thoroughly in order to see if it is <strong>really</strong> the same formula.
If it is, you may wonder why no one writes some kind of library for it instead of duplicating the formula in code again and again.
And if it is <em>not</em> the same formula - is that because it is wrong or is there an actual idea behind that?
It is plainly annoying to write and read this from the ground on all the time.</p>
<h2 id="library-thoughts">Library thoughts</h2>
<p>Ok, let’s assume that this piece of math will be recurring very often and we want to provide a nice abstraction for it.
This would have multiple advantages:</p>
<ul>
<li>Reduced code duplication.</li>
<li>Correctness: The library can be tested meticulously, and all user code will automatically profit from that. No one could ever do wrong descriptor calculations any longer if he/she just used the library.</li>
<li>Readability: User code will not be polluted by the same calculations again and again. Users do not even need to be able to implement the maths themselves.</li>
</ul>
<p>One possibility is to write a function <code>map_generic</code> that accepts a callback function that would get already calculated chunks as parameters and that would then do the payload magic:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">typename</span> F<span class="op">&gt;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> map_generic<span class="op">(</span><span class="dt">word_t</span> base1<span class="op">,</span> <span class="dt">word_t</span> base2<span class="op">,</span> <span class="dt">word_t</span> size<span class="op">,</span> F f<span class="op">)</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">constexpr</span> <span class="dt">word_t</span> max_bit <span class="op">{</span><span class="dv">1</span><span class="bu">ull</span> <span class="op">&lt;&lt;</span> <span class="op">(</span><span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>max_bit<span class="op">)</span> <span class="op">-</span> <span class="dv">1</span><span class="op">)};</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(</span>size<span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>        <span class="co">// take smallest order of both bases, as both must be divisible by it.</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> min_order <span class="op">{</span>order_min<span class="op">(</span>base1 <span class="op">|</span> base2 <span class="op">|</span> max_bit<span class="op">)};</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>        <span class="co">// take largest possible order from actual size of unmapped rest</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> max_order <span class="op">{</span>order_max<span class="op">(</span>size<span class="op">)};</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>        <span class="co">// choose smallest of both</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> order     <span class="op">{</span>min<span class="op">(</span>min_order<span class="op">,</span> max_order<span class="op">)};</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>        f<span class="op">(</span>base1<span class="op">,</span> base2<span class="op">,</span> order<span class="op">);</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> step <span class="op">{</span><span class="dv">1</span><span class="bu">ull</span> <span class="op">&lt;&lt;</span> order<span class="op">};</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>        base1 <span class="op">+=</span> step<span class="op">;</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>        base2 <span class="op">+=</span> step<span class="op">;</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>        size  <span class="op">-=</span> step<span class="op">;</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> map<span class="op">(</span><span class="dt">word_t</span> base1<span class="op">,</span> <span class="dt">word_t</span> base2<span class="op">,</span> <span class="dt">word_t</span> size<span class="op">,</span> <span class="dt">foo_t</span> target_address_space<span class="op">)</span></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>    map_helper<span class="op">.</span>source_base <span class="op">=</span> base1<span class="op">;</span></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>    map_generic<span class="op">(</span>base1<span class="op">,</span> base2<span class="op">,</span> size<span class="op">,</span></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>        <span class="op">[&amp;</span>map_helper<span class="op">](</span><span class="dt">word_t</span> b1<span class="op">,</span> <span class="dt">word_t</span> b2<span class="op">,</span> <span class="dt">word_t</span> order<span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>            map_helper<span class="op">.</span>push_back<span class="op">(</span>b2<span class="op">,</span> order<span class="op">);</span></span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">(</span>map_helper<span class="op">.</span>full<span class="op">())</span> <span class="op">{</span></span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>                map_helper<span class="op">.</span>delegate<span class="op">(</span>target_address_space<span class="op">);</span></span>
<span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a>                map_helper<span class="op">.</span>reset<span class="op">();</span></span>
<span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a>                map_helper<span class="op">.</span>source_base <span class="op">=</span> b1<span class="op">;</span></span>
<span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a>        <span class="op">});</span></span>
<span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a>    map_helper<span class="op">.</span>delegate<span class="op">(</span>target_address_space<span class="op">);</span></span>
<span id="cb3-40"><a href="#cb3-40" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>What we have is now the pure math of capability range composition of generic ranges in <code>map_generic</code> and actual memory mapping code in <code>map</code>.
This is already much better but leaves us without control <em>how many</em> chunks we actually want to consume at a time.
As soon as we start <code>map_generic</code>, it will shoot all the sub-ranges at our callback function.
At this point, it is hard to stop.
And if we were able to stop it (for example by returning <code>true</code> from the callback whenever it shall continue and returning <code>false</code> if it shall stop), it would be hard to resume from where we stopped it.
It’s just hardly composable coding style.</p>
<h2 id="the-iterator-library">The iterator library</h2>
<p>After all, this is C++.
Can’t we have some really nice and composable things here?
Of course, we can.
How about iterators?
We could define an iterable range class which we can feed with our memory geometry.
When such a range is iterated over, it emits the sub-ranges.</p>
<p>So let’s implement this in terms of an iterator.
If you don’t know yet how to implement iterators, you might want to have a look at <a href="/2016/09/04/algorithms_in_iterators">my other article where i explain how to implement your own iterator</a>.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode numberSource cpp numberLines"><code class="sourceCode cpp"><span id="cb4-1"><a href="#cb4-1"></a><span class="pp">#include </span><span class="im">&lt;cstdint&gt;</span><span class="pp">   </span><span class="co">// uintptr_t</span></span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span><span class="pp"> </span><span class="co">// min/max</span></span>
<span id="cb4-3"><a href="#cb4-3"></a><span class="pp">#include </span><span class="im">&lt;tuple&gt;</span></span>
<span id="cb4-4"><a href="#cb4-4"></a></span>
<span id="cb4-5"><a href="#cb4-5"></a><span class="kw">using</span> <span class="dt">word_t</span> <span class="op">=</span> <span class="dt">uintptr_t</span><span class="op">;</span></span>
<span id="cb4-6"><a href="#cb4-6"></a></span>
<span id="cb4-7"><a href="#cb4-7"></a><span class="at">static</span> <span class="dt">word_t</span> current_order<span class="op">(</span><span class="dt">word_t</span> base<span class="op">,</span> <span class="dt">word_t</span> rest<span class="op">)</span> <span class="op">{</span></span>
<span id="cb4-8"><a href="#cb4-8"></a>    <span class="at">const</span> <span class="dt">word_t</span> max_bit   <span class="op">{</span><span class="dv">1</span><span class="bu">ull</span> <span class="op">&lt;&lt;</span> <span class="op">(</span><span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>max_bit<span class="op">)</span> <span class="op">-</span> <span class="dv">1</span><span class="op">)};</span></span>
<span id="cb4-9"><a href="#cb4-9"></a>    <span class="at">const</span> <span class="dt">word_t</span> min_order <span class="op">{</span>order_min<span class="op">(</span>base <span class="op">|</span> max_bit<span class="op">)};</span></span>
<span id="cb4-10"><a href="#cb4-10"></a>    <span class="at">const</span> <span class="dt">word_t</span> max_order <span class="op">{</span>order_max<span class="op">(</span>rest<span class="op">)};</span></span>
<span id="cb4-11"><a href="#cb4-11"></a>    <span class="cf">return</span> <span class="bu">std::</span>min<span class="op">(</span>min_order<span class="op">,</span> max_order<span class="op">);</span></span>
<span id="cb4-12"><a href="#cb4-12"></a><span class="op">}</span></span>
<span id="cb4-13"><a href="#cb4-13"></a></span>
<span id="cb4-14"><a href="#cb4-14"></a><span class="co">// This class is iterable range and iterator at the same time</span></span>
<span id="cb4-15"><a href="#cb4-15"></a><span class="kw">struct</span> order_range</span>
<span id="cb4-16"><a href="#cb4-16"></a><span class="op">{</span></span>
<span id="cb4-17"><a href="#cb4-17"></a>    <span class="dt">word_t</span> base1<span class="op">;</span></span>
<span id="cb4-18"><a href="#cb4-18"></a>    <span class="dt">word_t</span> base2<span class="op">;</span></span>
<span id="cb4-19"><a href="#cb4-19"></a>    <span class="dt">word_t</span> size<span class="op">;</span></span>
<span id="cb4-20"><a href="#cb4-20"></a></span>
<span id="cb4-21"><a href="#cb4-21"></a>    <span class="co">// operator-Xs fulfill the iterator interface</span></span>
<span id="cb4-22"><a href="#cb4-22"></a>    <span class="bu">std::</span>tuple<span class="op">&lt;</span><span class="dt">word_t</span><span class="op">,</span> <span class="dt">word_t</span><span class="op">,</span> <span class="dt">word_t</span><span class="op">&gt;</span> <span class="kw">operator</span><span class="op">*()</span> <span class="at">const</span> <span class="op">{</span></span>
<span id="cb4-23"><a href="#cb4-23"></a>        <span class="cf">return</span> <span class="op">{</span>base1<span class="op">,</span> base2<span class="op">,</span></span>
<span id="cb4-24"><a href="#cb4-24"></a>                current_order<span class="op">(</span>base1 <span class="op">|</span> base2<span class="op">,</span> size<span class="op">)};</span></span>
<span id="cb4-25"><a href="#cb4-25"></a>    <span class="op">}</span></span>
<span id="cb4-26"><a href="#cb4-26"></a></span>
<span id="cb4-27"><a href="#cb4-27"></a>    order_range<span class="op">&amp;</span> <span class="kw">operator</span><span class="op">++()</span> <span class="op">{</span></span>
<span id="cb4-28"><a href="#cb4-28"></a>        <span class="kw">auto</span> step <span class="op">(</span><span class="dv">1</span><span class="bu">ull</span> <span class="op">&lt;&lt;</span> current_order<span class="op">(</span>base1 <span class="op">|</span> base2<span class="op">,</span> size<span class="op">));</span></span>
<span id="cb4-29"><a href="#cb4-29"></a>        base1 <span class="op">+=</span> step<span class="op">;</span></span>
<span id="cb4-30"><a href="#cb4-30"></a>        base2 <span class="op">+=</span> step<span class="op">;</span></span>
<span id="cb4-31"><a href="#cb4-31"></a>        size  <span class="op">-=</span> step<span class="op">;</span></span>
<span id="cb4-32"><a href="#cb4-32"></a>        <span class="cf">return</span> <span class="op">*</span><span class="kw">this</span><span class="op">;</span></span>
<span id="cb4-33"><a href="#cb4-33"></a>    <span class="op">}</span></span>
<span id="cb4-34"><a href="#cb4-34"></a></span>
<span id="cb4-35"><a href="#cb4-35"></a>    <span class="kw">class</span> it_sentinel <span class="op">{};</span></span>
<span id="cb4-36"><a href="#cb4-36"></a></span>
<span id="cb4-37"><a href="#cb4-37"></a>    <span class="dt">bool</span> <span class="kw">operator</span><span class="op">!=(</span>it_sentinel<span class="op">)</span> <span class="at">const</span> <span class="op">{</span> <span class="cf">return</span> size<span class="op">;</span> <span class="op">}</span></span>
<span id="cb4-38"><a href="#cb4-38"></a></span>
<span id="cb4-39"><a href="#cb4-39"></a>    <span class="co">// begin/end functions fulfill the iterable range interface</span></span>
<span id="cb4-40"><a href="#cb4-40"></a>    order_range begin<span class="op">()</span> <span class="at">const</span> <span class="op">{</span> <span class="cf">return</span> <span class="op">*</span><span class="kw">this</span><span class="op">;</span> <span class="op">}</span></span>
<span id="cb4-41"><a href="#cb4-41"></a>    it_sentinel end<span class="op">()</span>   <span class="at">const</span> <span class="op">{</span> <span class="cf">return</span> <span class="op">{};</span> <span class="op">}</span></span>
<span id="cb4-42"><a href="#cb4-42"></a><span class="op">};</span></span></code></pre></div>
<p>This looks a bit bloaty at first, but this is a one-time implementation after all.
When we compare it with the initial <code>for</code>-loop version, we realize that all the calculations are in the function <code>current_order</code> and <code>operator++</code>.
All the other code is just data storage and retrieval, as well as iterator interface compliance.</p>
<p>It might also at first look strange that the <code>begin()</code> function returns a copy of the <code>order_range</code> instance.
The trick is that this class is at the same time a range and an iterator.</p>
<p>One nice perk of C++17 is, that the <em>end</em> iterator does not need to be of the same type as normal iterators any longer.
This allows for a simpler abort condition (which is: <code>size == 0</code>).</p>
<p>With this tiny order 2 range iterator <em>“library”</em>, we can now do the following.
(Let’s move away from the memory mapping examples to simple <code>printf</code> examples because we will compare them in <a href="https://gcc.godbolt.org">Godbolt</a> later)</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> print_range<span class="op">(</span><span class="dt">word_t</span> base1<span class="op">,</span> <span class="dt">word_t</span> base2<span class="op">,</span> <span class="dt">word_t</span> size<span class="op">)</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="at">const</span> <span class="kw">auto</span> <span class="op">&amp;[</span>b1<span class="op">,</span> b2<span class="op">,</span> order<span class="op">]</span> <span class="op">:</span> order_range<span class="op">{</span>base1<span class="op">,</span> base2<span class="op">,</span> size<span class="op">})</span> <span class="op">{</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>        printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%4zx</span><span class="st"> -&gt; </span><span class="sc">%4zx</span><span class="st">, order </span><span class="sc">%2zu\n</span><span class="st">&quot;</span><span class="op">,</span> b1<span class="op">,</span> b2<span class="op">,</span> order<span class="op">);</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This code just contains <em>pure payload</em>.
There is no trace of the mathematical obfuscation left.</p>
<p>Another differentiating feature from the callback function variant is that we can combine this iterator with STL data structures and algorithms!</p>
<h2 id="comparing-the-resulting-assembly">Comparing the resulting assembly</h2>
<p>What is the price of this abstraction?
Let us see how the non-iterator-version of the same code would look like, and then compare it in the Godbolt assembly output view.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> print_range<span class="op">(</span><span class="dt">word_t</span> base1<span class="op">,</span> <span class="dt">word_t</span> base2<span class="op">,</span> <span class="dt">word_t</span> size<span class="op">)</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">constexpr</span> <span class="dt">word_t</span> max_bit <span class="op">{</span><span class="dv">1</span><span class="bu">ull</span> <span class="op">&lt;&lt;</span> <span class="op">(</span><span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>max_bit<span class="op">)</span> <span class="op">-</span> <span class="dv">1</span><span class="op">)};</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(</span>size<span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> min_order <span class="op">{</span>order_min<span class="op">(</span>base1 <span class="op">|</span> base2 <span class="op">|</span> max_bit<span class="op">)};</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> max_order <span class="op">{</span>order_max<span class="op">(</span>size<span class="op">)};</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> order     <span class="op">{</span><span class="bu">std::</span>min<span class="op">(</span>min_order<span class="op">,</span> max_order<span class="op">)};</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>        printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%4zx</span><span class="st"> -&gt; </span><span class="sc">%4zx</span><span class="st">, order </span><span class="sc">%2zu\n</span><span class="st">&quot;</span><span class="op">,</span> base1<span class="op">,</span> base2<span class="op">,</span> order<span class="op">);</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">word_t</span> step <span class="op">{</span><span class="dv">1</span><span class="bu">ull</span> <span class="op">&lt;&lt;</span> order<span class="op">};</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>        base1 <span class="op">+=</span> step<span class="op">;</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>        base2 <span class="op">+=</span> step<span class="op">;</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>        size  <span class="op">-=</span> step<span class="op">;</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Interestingly, <code>clang++</code> sees exactly what we did there and emits exactly <strong>the same assembly</strong> in <strong>both</strong> cases.
That means that this iterator is a real <strong>zero cost</strong> abstraction!</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>print_range<span class="op">(</span>unsigned long<span class="op">,</span> unsigned long<span class="op">,</span> unsigned long<span class="op">):</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>        <span class="bu">push</span>    <span class="kw">r15</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>        <span class="bu">push</span>    <span class="kw">r14</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>        <span class="bu">push</span>    <span class="kw">r13</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">push</span>    <span class="kw">r12</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>        <span class="bu">push</span>    <span class="kw">rbx</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     <span class="kw">r14</span><span class="op">,</span> <span class="kw">rdx</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     <span class="kw">r15</span><span class="op">,</span> <span class="kw">rsi</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     <span class="kw">r12</span><span class="op">,</span> <span class="kw">rdi</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>        <span class="bu">test</span>    <span class="kw">r14</span><span class="op">,</span> <span class="kw">r14</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">je</span>      <span class="op">.</span>LBB0_3</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>        movabs  <span class="kw">r13</span><span class="op">,</span> <span class="op">-</span><span class="dv">9223372036854775808</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="fu">.LBB0_2:</span> # =&gt;This Inner Loop Header<span class="op">:</span> Depth<span class="op">=</span><span class="dv">1</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     <span class="kw">rax</span><span class="op">,</span> <span class="kw">r12</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>        <span class="bu">or</span>      <span class="kw">rax</span><span class="op">,</span> <span class="kw">r15</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>        <span class="bu">or</span>      <span class="kw">rax</span><span class="op">,</span> <span class="kw">r13</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>        <span class="bu">bsf</span>     <span class="kw">rbx</span><span class="op">,</span> <span class="kw">rax</span></span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>        <span class="bu">bsr</span>     <span class="kw">rax</span><span class="op">,</span> <span class="kw">r14</span></span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>        <span class="bu">cmp</span>     <span class="kw">rax</span><span class="op">,</span> <span class="kw">rbx</span></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>        <span class="bu">cmovb</span>   <span class="kw">rbx</span><span class="op">,</span> <span class="kw">rax</span></span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     <span class="kw">edi</span><span class="op">,</span> <span class="op">.</span>L<span class="op">.</span>str</span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>        <span class="bu">xor</span>     <span class="kw">eax</span><span class="op">,</span> <span class="kw">eax</span></span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     <span class="kw">rsi</span><span class="op">,</span> <span class="kw">r12</span></span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     <span class="kw">rdx</span><span class="op">,</span> <span class="kw">r15</span></span>
<span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     <span class="kw">rcx</span><span class="op">,</span> <span class="kw">rbx</span></span>
<span id="cb7-26"><a href="#cb7-26" aria-hidden="true" tabindex="-1"></a>        <span class="cf">call</span>    printf</span>
<span id="cb7-27"><a href="#cb7-27" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     <span class="kw">eax</span><span class="op">,</span> <span class="dv">1</span></span>
<span id="cb7-28"><a href="#cb7-28" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     <span class="kw">ecx</span><span class="op">,</span> <span class="kw">ebx</span></span>
<span id="cb7-29"><a href="#cb7-29" aria-hidden="true" tabindex="-1"></a>        <span class="bu">shl</span>     <span class="kw">rax</span><span class="op">,</span> <span class="kw">cl</span></span>
<span id="cb7-30"><a href="#cb7-30" aria-hidden="true" tabindex="-1"></a>        <span class="bu">add</span>     <span class="kw">r12</span><span class="op">,</span> <span class="kw">rax</span></span>
<span id="cb7-31"><a href="#cb7-31" aria-hidden="true" tabindex="-1"></a>        <span class="bu">add</span>     <span class="kw">r15</span><span class="op">,</span> <span class="kw">rax</span></span>
<span id="cb7-32"><a href="#cb7-32" aria-hidden="true" tabindex="-1"></a>        <span class="bu">sub</span>     <span class="kw">r14</span><span class="op">,</span> <span class="kw">rax</span></span>
<span id="cb7-33"><a href="#cb7-33" aria-hidden="true" tabindex="-1"></a>        <span class="cf">jne</span>     <span class="op">.</span>LBB0_2</span>
<span id="cb7-34"><a href="#cb7-34" aria-hidden="true" tabindex="-1"></a><span class="fu">.LBB0_3:</span></span>
<span id="cb7-35"><a href="#cb7-35" aria-hidden="true" tabindex="-1"></a>        <span class="bu">pop</span>     <span class="kw">rbx</span></span>
<span id="cb7-36"><a href="#cb7-36" aria-hidden="true" tabindex="-1"></a>        <span class="bu">pop</span>     <span class="kw">r12</span></span>
<span id="cb7-37"><a href="#cb7-37" aria-hidden="true" tabindex="-1"></a>        <span class="bu">pop</span>     <span class="kw">r13</span></span>
<span id="cb7-38"><a href="#cb7-38" aria-hidden="true" tabindex="-1"></a>        <span class="bu">pop</span>     <span class="kw">r14</span></span>
<span id="cb7-39"><a href="#cb7-39" aria-hidden="true" tabindex="-1"></a>        <span class="bu">pop</span>     <span class="kw">r15</span></span>
<span id="cb7-40"><a href="#cb7-40" aria-hidden="true" tabindex="-1"></a>        <span class="cf">ret</span></span>
<span id="cb7-41"><a href="#cb7-41" aria-hidden="true" tabindex="-1"></a><span class="fu">.L.str:</span></span>
<span id="cb7-42"><a href="#cb7-42" aria-hidden="true" tabindex="-1"></a>        .asciz  <span class="st">&quot;%4zx -&gt; %4zx, order %2zu\n&quot;</span></span></code></pre></div>
<p><a href="https://godbolt.org/g/hn3yix">See the whole example in gcc.godbolt.org.</a></p>
<p>When comparing the assembly of both variants with GCC, the result is a little bit disappointing at first:
The <code>for</code>-loop version is 62 lines of assembly vs. 48 lines of assembly for the iterator version.
When looking at how many lines of assembly are the actual loop part, it is still 25 lines for <strong>both</strong> implementations!</p>
<h2 id="summary">Summary</h2>
<p>Hardcore low-level/kernel hackers often claim that it’s disadvantageous to use abstractions like iterators and generic algorithms.
Their code needs to be very small and fast because especially on hot paths, interrupt service routines, and other occasions, the kernel surely must not be bloaty and slow.</p>
<p>Unfortunately, one extreme kind of low-level hackers that keep their code tight and short just out of plain responsibility, are the ones that use the same reasons as an excuse for writing code that contains a lot of duplicates, is complex, hard to read (but surely makes you feel smart while being written), and difficult to test.</p>
<p>Code should be separated into composable libraric parts that serve isolated concerns.
C++ allows combining the goals of reusable software, testable libraries, and logical decoupling with high performance and low binary size.</p>
<p>It is usually worth a try to implement a nice abstraction that turns out to be free with regard to assembly size and performance.</p>
<h2 id="related">Related</h2>
<p>I really enjoyed reading <a href="https://kristerw.blogspot.de/2017/06/a-look-at-range-v3-code-generation.html">Krister Waldfridsson’s article</a> where he primarily analyzes runtime performance of a piece of range-v3 code.
What’s interesting about that article is that he also shows an innocently looking code snippet with a raw <code>for</code>-loop that is slower than equivalent code that uses an STL algorithm, because the STL algorithm helps the compiler optimizing the code.</p>
<p>Another thing that is worth a look and which fits the same topic:
Jason Turner gave a <a href="https://www.youtube.com/watch?v=zBkNBP00wJE">great talk about using C++17 on tiny computers</a>.
He demonstrates how modern C++ programming patterns that help writing better code do <strong>not</strong> lead to bloaty or slow code by compiling and showing the assembly in a Godbolt view.
It actually runs on a real Commodore in the end.</p>]]></description>
    <pubDate>Sun, 02 Jul 2017 00:00:00 UT</pubDate>
    <guid>https://blog.galowicz.de/2017/07/02/order2_iterator</guid>
    <dc:creator>Jacek Galowicz</dc:creator>
</item>
<item>
    <title>C++17 STL Cookbook</title>
    <link>https://blog.galowicz.de/2017/06/30/cpp17_stl_cookbook</link>
    <description><![CDATA[<p>This article is about the <a href="https://www.packtpub.com/application-development/c17-stl-cookbook"><strong>C++17 STL Cookbook</strong></a>, which got published this week.
After about 6 months of writing, I am happy that it is out the door and hope it helps and inspires its readers to write modern C++ code.</p>
<!--more-->
<div class="book-cover">
<figure>
<img src="/images/cpp17_stl_cookbook_cover.png" alt="Book cover of “C++17 STL Cookbook" />
<figcaption aria-hidden="true">Book cover of “C++17 STL Cookbook</figcaption>
</figure>
</div>
<h2 id="why-did-i-write-this-book">Why did I write this book?</h2>
<p>Some day in October 2016, I was messaged by an acquisition editor of the British publishing company <em>PACKT Publishing</em> via LinkedIn.
He asked me if I was interested in writing a book with the title <em>“C++17 STL Cookbook”</em>.</p>
<p>Two months earlier, my former employer shut down the whole office site together with the project and team I have been working on/with.
Having been still unemployed and on the search for a new nice job, I had plenty of time thinking about the possible content of the book.</p>
<p>The <em>frame/format</em> of the book was fixed already because it should be part of the <em>PACKT “Cookbook”</em> franchise.
Such cookbooks contain a lot of short <em>recipes</em> that explain how to solve very practical problems.
This makes a lot of sense, because many other books first teach all the important aspects of their topic, and then let the user puzzle together themselves how to combine these in real life.</p>
<h2 id="what-is-the-general-idea-behind-the-book">What is the general idea behind the book?</h2>
<p>I made the general observation, that most C++ programmers write code that could rather be called <em>C with classes</em> than C++.
Such programmers are happy to use data structures like <code>std::vector</code>, <code>std::list</code>, <code>std::map</code>, and so on, but when it comes to implementing standard tasks like for example <em>filtering</em>, <em>accumulating</em>, and so on, they fall back to handcrafted <code>for</code> loops.</p>
<p>So in real life, people rather write code like this:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> sum <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> my_vector<span class="op">.</span>length<span class="op">();</span> <span class="op">++</span>i<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    sum <span class="op">+=</span> my_vector<span class="op">[</span>i<span class="op">];</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>… instead of this:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> sum <span class="op">=</span> accumulate<span class="op">(</span>begin<span class="op">(</span>my_vector<span class="op">),</span> end<span class="op">(</span>my_vector<span class="op">),</span> <span class="dv">0</span><span class="op">);</span></span></code></pre></div>
<p>The <code>for</code> loop variant is <em>not faster</em> and <em>not shorter</em>, but it comes with the disadvantage that it is hardwired to arrays and vectors.
If one wanted to do the same with lists, it would be necessary to <em>rewrite</em> this piece of code.
The <code>accumulate</code> function has a data structure agnostic interface and just <em>“does the right thing”</em>.
(Since C++17, there is also <code>reduce(begin(my_vector), end(my_vector))</code>, which does the same thing.)
In contrast to the <code>for</code> loop, one does not have to “mentally execute it” in order to understand it.</p>
<p>A very interesting perk of C++17 is that it adds <a href="http://en.cppreference.com/w/cpp/experimental/parallelism"><strong>execution policies</strong></a> to a lot of STL algorithms.
That means that it is now possible to trivially parallelize code that already uses STL algorithms just with one extra parameter.
It would, therefore, make sense if C++ programmers would finally get used to all the carefully crafted and already tested helpers the STL has already been providing for decades now.</p>
<p>I regret that many C++ programmers ignore the vast possibilities that the STL provides.
Especially in the embedded C++ area, people regularly fall back to “C with classes”.</p>
<p>A very old, but ironically still very applicable quote that I read in <a href="http://wwwusers.di.uniroma1.it/~lpara/LETTURE/backus.pdf">John Backus’ publication “Can Programming Be Liberated from the von Neumann Style?”</a>:</p>
<blockquote>
<p>[…] programming […] must always start again at square one, writing “for i := …” and “for j := …” followed by assignment statements sprinkled with i’s and j’s.</p>
</blockquote>
<p>In 1977, he was talking about FORTRAN code, but his observation still applies to a lot of C++ code from today.
Another very inspiring talk about the “C with classes” vs. “Modern C++” topic is <a href="https://channel9.msdn.com/Events/GoingNative/2013/Cpp-Seasoning">Sean Parent’s talk where he presents his <code>gather</code> algorithm which is only an STL two-liner</a>.</p>
<p>The <strong>C++17 STL Cookbook</strong> is obviously about <strong>C++17</strong> and the <strong>STL</strong>.
While the first chapter concentrates solely on the most interesting new language features and syntax sugar that were introduced with the new C++17 standard, I aimed to spread a lot of <em>modern C++ philosophy</em> with the rest of the book:</p>
<p>All recipes try to solve problems <em>the STL way</em>.</p>
<h2 id="the-content">The content</h2>
<p>In roughly 500 pages, the book covers the following topics:</p>
<ol type="1">
<li><p><strong>The new C++17 features</strong></p>
<p>An overview of the most interesting new C++17 <em>language</em> features: <code>constexpr if</code>, structured bindings, initializers in <code>if</code> statements, fold expressions, etc.</p></li>
<li><p><strong>STL Containers</strong></p>
<p>A quick overview what kind of data structures we already have in the C++ STL, and what their characteristics are. The recipes show how to use them in C++17.</p></li>
<li><p><strong>Iterators</strong></p>
<p>This chapter explains the important concept of iterators in C++ and how to implement them. This includes the new perks introduced by C++17.</p></li>
<li><p><strong>Lambda expressions</strong></p>
<p>Lambda expressions were added in C++11 but evolved in every following standard. This chapter shows their current state and demonstrates what we can do with them. There is some functional programming style involved here.</p></li>
<li><p><strong>STL algorithm basics</strong></p>
<p>This chapter is a quick reintroduction to STL algorithms.</p></li>
<li><p><strong>Advanced use of STL algorithms</strong></p>
<p>After having reintroduced how standard algorithms work, this chapter demonstrates how to combine them in order to solve more complex tasks without reinventing the wheel (or <code>for</code> loop) all the time.</p></li>
<li><p><strong>Strings, stream classes, and regular expressions</strong></p></li>
</ol>
<ul>
<li>The streaming library is an ancient and large, but very important part of the STL. This chapter shows how to solve the typical I/O tasks.</li>
</ul>
<ol start="8" type="1">
<li><p><strong>Utility classes</strong></p>
<p>Time conversion, <code>std::optional</code>, <code>std::any</code>, <code>std::variant</code>, automatic memory management with smart pointers, and random number generation.</p></li>
<li><p><strong>Parallelism and concurrency</strong></p>
<p>It was always possible to write multicore programs with C++, but that was a rather operating system dependent task until C++11 introduced <code>std::task</code>, <code>std::future</code>, and a lot of synchronization classes. This chapter gives a lot of examples how to write portable multicore programs.</p></li>
<li><p><strong>Filesystem</strong></p>
<p>C++17 also introduced another sub-library that is solely about accessing and iterating file system structures in an operating system independent way. This chapter concentrates on example apps that can be implemented with this new addition to the C++ standard.</p></li>
</ol>
<h2 id="book-formatsordering">Book formats/Ordering</h2>
<p>The book will soon be available in <strong>printed form</strong>, but the <strong>ebook</strong> can be ordered already.</p>
<p>If you want a <strong>DRM-free</strong> version of it, you should order it <a href="https://www.packtpub.com/application-development/c17-stl-cookbook">directly from PACKT</a>. Of course, <a href="https://amzn.to/3up1Cb5">Amazon has the book</a>, too.</p>
<h2 id="thank-you">Thank you</h2>
<p>The best thing that can happen to you while writing a book is having <a href="https://arne-mertz.de/">Arne Mertz</a> as the reviewer!
No book comes without mistakes, but he did a <strong>great job</strong> finding even the most subtle, but critical ones.</p>
<p>Not to forget the <a href="https://www.meetup.com/de-DE/C-User-Group-Hannover/">C++ user group Hannover</a>, where I got a lot of valuable feedback and inspiration.</p>]]></description>
    <pubDate>Fri, 30 Jun 2017 00:00:00 UT</pubDate>
    <guid>https://blog.galowicz.de/2017/06/30/cpp17_stl_cookbook</guid>
    <dc:creator>Jacek Galowicz</dc:creator>
</item>
<item>
    <title>A reinterpret_cast Trap</title>
    <link>https://blog.galowicz.de/2017/01/22/reinterpret_cast_trap</link>
    <description><![CDATA[<p>Sometimes, casting is just inevitable.
And then there’s even not much science behind it, at least it seems so.
Once some address is provided in a variable of the right size, a typed pointer can be casted out of it, and then the object can be accessed via its members and methods as usual.
In some situations it is really easy to get the casting wrong, leading to interesting bugs.
This article describes an example situation and a proper fix.</p>
<!--more-->
<p>Imagine we have a base class <code>C</code>, which inherits from <code>B</code>, which inherits from <code>A</code>.
They all have one <code>int</code> member (4 Bytes each):</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> A     <span class="op">{</span> <span class="dt">int</span> a<span class="op">;</span> <span class="op">};</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> B <span class="op">:</span> A <span class="op">{</span> <span class="dt">int</span> b<span class="op">;</span> <span class="op">};</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> C <span class="op">:</span> B <span class="op">{</span> <span class="dt">int</span> c<span class="op">;</span> <span class="op">};</span></span></code></pre></div>
<p>Assuming that we have an instance of class <code>C</code> somewhere in memory at address <code>X</code>, we know that its member <code>a</code> which it inherited from struct <code>A</code> lies at exactly the same offset.
Member <code>b</code> is located at <code>X + 4</code>, and <code>c</code> is located at <code>X + 8</code>.</p>
<p>If we are just interested in one of those specific members, we could simply calculate the offset, and then <code>reinterpret_cast</code>, just like this:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Print c, assuming x is the address of an instance of struct C:</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="op">*</span><span class="kw">reinterpret_cast</span><span class="op">&lt;</span><span class="dt">int</span><span class="op">*&gt;(</span>x <span class="op">+</span> <span class="dv">8</span><span class="op">)</span> <span class="op">&lt;&lt;</span> <span class="ch">&#39;</span><span class="sc">\n</span><span class="ch">&#39;</span><span class="op">;</span></span></code></pre></div>
<p>Let’s assume we have some code, which <em>relies</em> on getting addresses of <code>struct A</code> typed addresses in integral form:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> A <span class="op">{</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> a <span class="op">{</span><span class="bn">0xa</span><span class="op">};</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> B <span class="op">:</span> A <span class="op">{</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> b <span class="op">{</span><span class="bn">0xb</span><span class="op">};</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="co">// Simple inheritance: A -&gt; B1 -&gt; C</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> C <span class="op">:</span> B <span class="op">{</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> c <span class="op">{</span><span class="bn">0xc</span><span class="op">};</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> print_a_from_address<span class="op">(</span><span class="bu">std::</span>uintptr_t<span class="op"> </span>addr<span class="op">)</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> A <span class="op">*</span>a <span class="op">{</span><span class="kw">reinterpret_cast</span><span class="op">&lt;</span><span class="at">const</span> A<span class="op">*&gt;(</span>addr<span class="op">)};</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="bu">std::</span>hex<span class="op"> &lt;&lt;</span> a<span class="op">-&gt;</span>a <span class="op">&lt;&lt;</span> <span class="ch">&#39;</span><span class="sc">\n</span><span class="ch">&#39;</span><span class="op">;</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>    C c<span class="op">;</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>    print_a_from_address<span class="op">(</span><span class="kw">reinterpret_cast</span><span class="op">&lt;</span><span class="bu">std::</span>uintptr_t<span class="op">&gt;(&amp;</span>c<span class="op">));</span></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>That’s no good style, but this program works.
The structures have standard definitions which initialize members <code>a</code>, <code>b</code>, and <code>c</code> to values <code>0xa</code>, <code>0xb</code>, and <code>0xc</code>.</p>
<p>The program will print <code>a</code> at run time, which is what we expect.</p>
<p>The inheritance chain wraps every inheriting member’s variables past the structure members in memory from which it is inheriting. So the memory layout of <code>c</code> looks like:</p>
<p>|Relative offset|Value|Structure Type Origin|
|0x0|0xa|A|
|0x4|0xb|B|
|0x8|0xc|C|</p>
<p>(Every table row represents an integer in memory)</p>
<p>This program stops to work so nicely when changing the inheritance chain a bit:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> A     <span class="op">{</span> <span class="dt">int</span> a <span class="op">{</span><span class="bn">0xa</span><span class="op">};</span> <span class="op">};</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> B <span class="op">:</span> A <span class="op">{</span> <span class="dt">int</span> b <span class="op">{</span><span class="bn">0xb</span><span class="op">};</span> <span class="op">};</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> Foo <span class="op">{</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> f <span class="op">{</span><span class="bn">0xf</span><span class="op">};</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="co">// Multiple inheritance: (Foo), (A, B) -&gt; C</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> C <span class="op">:</span> Foo<span class="op">,</span> B <span class="op">{</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> c <span class="op">{</span><span class="bn">0xc</span><span class="op">};</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> print_a_from_address<span class="op">(</span><span class="bu">std::</span>uintptr_t<span class="op"> </span>addr<span class="op">)</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> A <span class="op">*</span>a <span class="op">{</span><span class="kw">reinterpret_cast</span><span class="op">&lt;</span><span class="at">const</span> A<span class="op">*&gt;(</span>addr<span class="op">)};</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="bu">std::</span>hex<span class="op"> &lt;&lt;</span> a<span class="op">-&gt;</span>a <span class="op">&lt;&lt;</span> <span class="ch">&#39;</span><span class="sc">\n</span><span class="ch">&#39;</span><span class="op">;</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>    C c<span class="op">;</span></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>    print_a_from_address<span class="op">(</span><span class="kw">reinterpret_cast</span><span class="op">&lt;</span><span class="bu">std::</span>uintptr_t<span class="op">&gt;(&amp;</span>c<span class="op">));</span></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This program version will print <code>f</code>, and not <code>a</code>.
This is, because we disturbed the memory layout by letting <code>C</code> first inherit from <code>Foo</code>, then from <code>B</code> (which still inherits from <code>A</code>).</p>
<p>|Relative offset|Value|Structure Type Origin|
|0x0|0xf|Foo|
|0x4|0xa|A|
|0x8|0xb|B|
|0xc|0xc|C|</p>
<p><code>reinterpret_cast</code> is just not the right tool for this, if we just assume that inheriting from <code>A</code> somehow shall do the magic.
Before showing how to do it right, i first present another failing example:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* Unchanged definition of struct A and B... */</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> C <span class="op">:</span> B <span class="op">{</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> c <span class="op">{</span><span class="bn">0xd</span><span class="op">};</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">virtual</span> <span class="dt">void</span> f<span class="op">()</span> <span class="op">{};</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    C c<span class="op">;</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>    print_a_from_address<span class="op">(</span><span class="kw">reinterpret_cast</span><span class="op">&lt;</span><span class="bu">std::</span>uintptr_t<span class="op">&gt;(&amp;</span>c<span class="op">));</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>In this case, the program <em>might</em> print <code>a</code>, but in many cases it will print <em>something</em>.</p>
<p>The only difference is, that we added a virtual function in struct <code>C</code>.
This leads to this object containing another <em>pointer</em>.
It points to a <strong>vtable</strong>.
(That vtable itself is globally accessible at runtime and contains pointers to all virtual functions which that class contains.
This is roughly how C++ implements polymorphy.)
The vtable pointer can be located <em>somewhere</em> in the object.
In the clang and GCC case, it is located at the beginning of the object, where we assumed the <code>a</code> member.
And that is why it does not work.</p>
<h2 id="casting-done-right">Casting done right</h2>
<div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    C1 c1<span class="op">;</span> <span class="co">// normal C B A inheritance</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    C2 c2<span class="op">;</span> <span class="co">// Foo C B A inheritance</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>    C3 c3<span class="op">;</span> <span class="co">// virtual function added in class C</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>    print_a_from_address<span class="op">(</span><span class="kw">reinterpret_cast</span><span class="op">&lt;</span><span class="bu">std::</span>uintptr_t<span class="op">&gt;(</span><span class="kw">static_cast</span><span class="op">&lt;</span><span class="at">const</span> A<span class="op">*&gt;(&amp;</span>c1<span class="op">)));</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>    print_a_from_address<span class="op">(</span><span class="kw">reinterpret_cast</span><span class="op">&lt;</span><span class="bu">std::</span>uintptr_t<span class="op">&gt;(</span><span class="kw">static_cast</span><span class="op">&lt;</span><span class="at">const</span> A<span class="op">*&gt;(&amp;</span>c2<span class="op">)));</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>    print_a_from_address<span class="op">(</span><span class="kw">reinterpret_cast</span><span class="op">&lt;</span><span class="bu">std::</span>uintptr_t<span class="op">&gt;(</span><span class="kw">static_cast</span><span class="op">&lt;</span><span class="at">const</span> A<span class="op">*&gt;(&amp;</span>c3<span class="op">)));</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>I renamed the 3 variants of struct <code>C</code> to <code>C1</code>, <code>C2</code>, and <code>C3</code>.
This program will now correctly print <code>a</code> in all these cases.</p>
<p>What is different here (But same in all cases!), is that the address of the objects are first <code>static_cast</code>ed to <code>const A*</code>, and <strong>then</strong> <code>reinterpret_cast</code>ed to <code>std::uintptr_t</code>.</p>
<p><code>static_cast</code> applies some magic to the pointer: As it knows from what to what we are casting (from type <code>C</code> to <code>A</code>), it can <em>modify</em> the actual pointer address.
And it must do that, because if we want an <code>A</code>-typed pointer from the <code>C2</code> object (which first inherits from <code>Foo</code>, and then from <code>B</code>), then we must add 4 bytes to the address, in order to have an actual <code>A</code> pointer. (Because the <code>A</code> part lies 4 bytes behind the <code>Foo</code> part)</p>
<p>In the <code>C3</code> case (which adds a virtual function), the pointer must be fixed in the sense that the <code>A</code> part of the object lies behind (or in front of? That is compiler dependend, but <code>static_cast</code> will always get it right!) the vtable.
So in this case, clang’s <code>static_cast</code> will add 8 bytes offset to the pointer, to make it an actual <code>A</code> typed pointer. (It’s 8 bytes, because a pointer is 8 bytes large on 64bit systems which we assume here)</p>
<p>Another nice feature is, that <code>static_cast</code> will refuse to compile, if the object is by no means related to type <code>A</code>.
<code>reinterpret_cast</code> just ignores this and gives us no safety.</p>
<p>However, it was not possible to completely avoid <code>reinterpret_cast</code>, because of the <em>type erasing</em> cast from <code>A*</code> to <code>std::uintptr_t</code>, which <code>static_cast</code> would refuse to do.
Although we could have used a union which overlays an <code>A</code> pointer with a <code>std::uintptr_t</code>.</p>
<h2 id="summary">Summary</h2>
<p>Only use <code>reinterpret_cast</code> when you are <em>1000000%</em> sure what type you have in front of you.
And even if you could do the math of pointer offset correction yourself - don’t.</p>
<p>When casting, you should always first consider to <code>static_cast</code> to the type you need first.
This will <em>fail</em> if you got the types wrong - this is useful in situations where you deal with templates or <code>auto</code> types)
Do the <code>reinterpret_cast</code> only if it is really inevitable, and even then double check its correctness.</p>
<p><code>reinterpret_cast</code>-<code>static_cast</code> <em>chains</em> will not make your code prettier.
As Stroustrup states in his original C++ books, the C++ style casts are <em>intentionally ugly</em>, because they are also potentionally <strong>dangerous</strong>.</p>
<p><em>EDIT on 2017-01-27: Changed the type from <code>uint64_t</code> to <code>std::uintptr_t</code>, as a comment on <a href="https://www.reddit.com/r/cpp/comments/5pju7q/a_reinterpret_cast_trap/">reddit.com/r/cpp</a> suggested. Thanks for the input!</em></p>]]></description>
    <pubDate>Sun, 22 Jan 2017 00:00:00 UT</pubDate>
    <guid>https://blog.galowicz.de/2017/01/22/reinterpret_cast_trap</guid>
    <dc:creator>Jacek Galowicz</dc:creator>
</item>
<item>
    <title>Python Style printf for C++ with pprintpp</title>
    <link>https://blog.galowicz.de/2016/11/05/python_style_printf_for_cpp</link>
    <description><![CDATA[<p>The C++ STL comes with <em>stream</em> style character output, which is an alternative to the classic <code>printf</code> like format function collection of the C library.
For different reasons, some C++ programmers still stick to <code>printf</code> like formatting.
This article demonstrates the <code>pprintpp</code> <a href="https://github.com/tfc/pprintpp">(open source, and available on Github)</a> library, which tries to make <code>printf</code> use comfortable and safe while avoiding any runtime overhead.</p>
<!--more-->
<h2 id="c-streams-vs.-printf">C++ Streams vs. <code>printf</code></h2>
<p>So, I am presenting a <code>printf</code> frontend library which tries to enhance it.
But what is wrong with <code>printf</code>?
Let’s compare it with C++ stream style printing in different situations:</p>
<h3 id="round-1-inconvenience">Round 1: Inconvenience</h3>
<p>Consider the following simple program:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%u</span><span class="st">, </span><span class="sc">%x</span><span class="st">, </span><span class="sc">%0.8f</span><span class="st">, </span><span class="sc">%0.8lf</span><span class="st">, </span><span class="sc">%s\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="dv">123</span><span class="bu">u</span><span class="op">,</span> <span class="bn">0x123</span><span class="bu">u</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">2.0</span><span class="op">,</span> <span class="st">&quot;Hello World&quot;</span><span class="op">);</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>It’s simply no fun to tell <code>printf</code> of which type all variables are.
The compiler <em>knows</em> the types already, so why must the programmer type the type names <em>again</em>?</p>
<p>C++ streams fix this, as the <code>operator&lt;&lt;</code> is properly overloaded for any type, which selects the right formatting method automatically.
Let’s have a look how to get exactly the same output with C++ streams:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%u</span><span class="st">, </span><span class="sc">%x</span><span class="st">, </span><span class="sc">%0.8f</span><span class="st">, </span><span class="sc">%0.8lf</span><span class="st">, </span><span class="sc">%s\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="dv">123</span><span class="bu">u</span><span class="op">,</span> <span class="bn">0x123</span><span class="bu">u</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">2.0</span><span class="op">,</span> <span class="st">&quot;Hello World&quot;</span><span class="op">);</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="dv">123</span><span class="bu">u</span> <span class="op">&lt;&lt;</span> <span class="st">&quot;, &quot;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>              <span class="op">&lt;&lt;</span> <span class="bu">std::</span>hex<span class="op"> &lt;&lt;</span> <span class="bn">0x123</span><span class="bu">u</span> <span class="op">&lt;&lt;</span> <span class="st">&quot;, &quot;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>              <span class="op">&lt;&lt;</span> <span class="bu">std::</span>fixed<span class="op"> &lt;&lt;</span> <span class="bu">std::</span>setprecision<span class="op">(</span><span class="dv">6</span><span class="op">)</span> <span class="op">&lt;&lt;</span> <span class="fl">1.0</span><span class="bu">f</span> <span class="op">&lt;&lt;</span> <span class="st">&quot;, &quot;</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>              <span class="op">&lt;&lt;</span> <span class="fl">2.0</span> <span class="op">&lt;&lt;</span> <span class="st">&quot;, &quot;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>              <span class="op">&lt;&lt;</span> <span class="st">&quot;Hello World</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">;</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>All type safety aside, at this point most likely everyone will agree that this is, from a readability and comfort perspective, <em>no</em> improvement over to <code>printf</code>.</p>
<blockquote>
<p>Although I must say that I do not format floating point numbers every day and had to guess here and there while being too lazy to look at the documentation.
In order to see if the <code>printf</code> format works as I hoped, I had to run the program.
At the same time, the C++ iostream format just did not compile when I did it wrong!</p>
</blockquote>
<h3 id="round-2-type-pitfalls">Round 2: Type Pitfalls</h3>
<p>When compiling the following program on a 64-bit machine, everything is fine:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%ld\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="kw">static_cast</span><span class="op">&lt;</span><span class="dt">uint64_t</span><span class="op">&gt;(</span><span class="dv">123</span><span class="op">));</span></span></code></pre></div>
<p>Compiling it on a 32-bit machine, the compiler quickly comes up with errors like:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">error:</span> format <span class="st">&#39;%ld&#39;</span> expects argument of type <span class="st">&#39;long int&#39;</span>, but argument 2 has type <span class="st">&#39;uint64_t {aka long long unsigned int}&#39;</span> [-Werror=format=]</span></code></pre></div>
<p>So on 32bit systems, one should better have used <code>%lld</code>.
This feels needlessly complicated because in both cases, the compiler knows the *@!#* type, but nevertheless the programmer has to deal with this now.</p>
<p>There is a portable solution: <code>PRIu64</code>.
The header file <cinttypes> brings a lot of PRI macros.
Using this here looks like the following:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>printf<span class="op">(</span><span class="st">&quot;%&quot;</span> PRIu64 <span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="kw">static_cast</span><span class="op">&lt;</span><span class="dt">uint64_t</span><span class="op">&gt;(</span><span class="dv">123</span><span class="op">));</span></span></code></pre></div>
<p>All the <code>printf</code> fans who laughed at the ugliness of C++ streams, now again look a <em>little bit</em> like fools.</p>
<h3 id="round-3-repetition">Round 3: Repetition</h3>
<p>There are certain types which are a data composition of multiple values.
A very typical example are <em>vectors</em> of data, e.g. geometric vectors:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> vec3d <span class="op">{</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> x<span class="op">;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> y<span class="op">;</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> z<span class="op">;</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span></code></pre></div>
<p>When printing some game state or similar, one usually wants to see vectors formatted like <code>(1.000, 2.000, 0.000)</code>.</p>
<p>Okay, easy:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>printf<span class="op">(</span><span class="st">&quot;(</span><span class="sc">%0.3lf</span><span class="st">, </span><span class="sc">%0.3lf</span><span class="st">, </span><span class="sc">%0.3lf</span><span class="st">)</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> v<span class="op">.</span>x<span class="op">,</span> v<span class="op">.</span>y<span class="op">,</span> v<span class="op">.</span>z<span class="op">);</span></span></code></pre></div>
<p>What if there are a lot of vectors?</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>printf<span class="op">(</span><span class="st">&quot;(</span><span class="sc">%0.3lf</span><span class="st">, </span><span class="sc">%0.3lf</span><span class="st">, </span><span class="sc">%0.3lf</span><span class="st">), &quot;</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>       <span class="st">&quot;(</span><span class="sc">%0.3lf</span><span class="st">, </span><span class="sc">%0.3lf</span><span class="st">, </span><span class="sc">%0.3lf</span><span class="st">), &quot;</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>       <span class="st">&quot;(</span><span class="sc">%0.3lf</span><span class="st">, </span><span class="sc">%0.3lf</span><span class="st">, </span><span class="sc">%0.3lf</span><span class="st">)</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>       v1<span class="op">.</span>x<span class="op">,</span> v1<span class="op">.</span>y<span class="op">,</span> v1<span class="op">.</span>z<span class="op">,</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>       v2<span class="op">.</span>x<span class="op">,</span> v2<span class="op">.</span>y<span class="op">,</span> v2<span class="op">.</span>z<span class="op">,</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>       v2<span class="op">.</span>x<span class="op">,</span> v3<span class="op">.</span>y<span class="op">,</span> v3<span class="op">.</span>z<span class="op">);</span></span></code></pre></div>
<p>Okay, it starts to get very repetitive.</p>
<blockquote>
<p>And we have a bug: I mistyped the <code>x</code> value of the third vector.
Would you have seen it in a code review?</p>
</blockquote>
<p>C++ iostream users would just overload <code>operator&lt;&lt;</code> for <code>std::ostream</code> <strong>once</strong> and be done with this forever:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="bu">std::</span>ostream<span class="op">&amp;</span> <span class="kw">operator</span><span class="op">&lt;&lt;(</span><span class="bu">std::</span>ostream<span class="op"> &amp;</span>os<span class="op">,</span> <span class="at">const</span> vec3d <span class="op">&amp;</span>v<span class="op">)</span> <span class="op">{</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> os <span class="op">&lt;&lt;</span> <span class="st">&quot;(&quot;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>              <span class="op">&lt;&lt;</span> <span class="bu">std::</span>setprecision<span class="op">(</span><span class="dv">4</span><span class="op">)</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>              <span class="op">&lt;&lt;</span> v<span class="op">.</span>x <span class="op">&lt;&lt;</span> <span class="st">&quot;, &quot;</span> <span class="op">&lt;&lt;</span> v<span class="op">.</span>y <span class="op">&lt;&lt;</span> <span class="st">&quot;, &quot;</span> <span class="op">&lt;&lt;</span> v<span class="op">.</span>z</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>              <span class="op">&lt;&lt;</span> <span class="st">&quot;)&quot;</span><span class="op">;</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Printing multiple vectors now looks like this:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> v1 <span class="op">&lt;&lt;</span> <span class="st">&quot;, &quot;</span> <span class="op">&lt;&lt;</span> v2 <span class="op">&lt;&lt;</span> <span class="st">&quot;, &quot;</span> <span class="op">&lt;&lt;</span> v3 <span class="op">&lt;&lt;</span> <span class="ch">&#39;</span><span class="sc">\n</span><span class="ch">&#39;</span><span class="op">;</span></span></code></pre></div>
<p><code>printf</code> users may start defining helpful macros:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define PRIvec3d       </span><span class="st">&quot;(</span><span class="sc">%0.3lf</span><span class="st">, </span><span class="sc">%0.3lf</span><span class="st">, </span><span class="sc">%0.3lf</span><span class="st">)&quot;</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#define UNPACKvec3d</span><span class="op">(</span>v<span class="op">)</span><span class="pp"> </span><span class="op">(</span>v<span class="op">).</span>x<span class="op">,</span><span class="pp"> </span><span class="op">(</span>v<span class="op">).</span>y<span class="op">,</span><span class="pp"> </span><span class="op">(</span>v<span class="op">).</span>z</span></code></pre></div>
<p>…and print their vectors like this:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>printf<span class="op">(</span>PRIvec3d <span class="st">&quot;, &quot;</span> PRIvec3d <span class="st">&quot;, &quot;</span> PRIvec3d <span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>       UNPACKvec3d<span class="op">(</span>v1<span class="op">),</span> UNPACKvec3d<span class="op">(</span>v2<span class="op">),</span> UNPACKvec3d<span class="op">(</span>v3<span class="op">));</span></span></code></pre></div>
<p>In my opinion, C++ streams clearly win at this point.</p>
<h2 id="being-stuck-with-printf.-for-reasons.">Being Stuck with <code>printf</code>. For Reasons.</h2>
<p>Situations exist, where developers really can’t use stream printing.
The reasons for those situations might be technical, but there are also social reasons:
What are you going to do if you work in a team with <code>printf</code> dinosaurs, who <strong>just like it</strong>, and then it becomes a project convention to use <code>printf</code>?
Right, nothing.</p>
<p>I found myself in such a situation.
And I made format string mistakes all the time, which led me to think about how to <em>fix</em> <code>printf</code> by removing a whole class of bug sources.
Bjarne Stroustrupi’s C++ book proposes a type safe <code>printf</code> (Section 28.6.1), which is implemented using variadic templates.
My team did not find this solution acceptable because it generates <em>custom code</em> for every <code>printf</code> invocation.</p>
<h2 id="the-idea">The Idea</h2>
<p>When using <code>printf</code>, the programmer asks himself “What is the type of the variable I am going to print?”, and as soon as that question is answered, the next question is “What is the right <code>%</code> format string for this type?”.
The compiler can easily answer these questions.
The next thing is: How to make the compiler do that, without generating additional runtime code?</p>
<p>In the past, I wrote about <a href="/2016/05/08/compile_time_type_lists">type lists which can be used as compile-time data structures for metaprograms</a>.
And building on top of that, I wrote about <a href="/2016/05/14/converting_between_c_strings_and_type_lists">transforming string literals to type lists, doing something with them and transforming back to string literals</a>.
Understanding the ideas from those articles is crucial for understanding the code of this library.</p>
<p>After a lot of inspiring discussions with my colleagues, we iterated towards the idea of having a compile time function, which takes a simplified format string, and a list of the types of the parameters the user provided.
The syntax of the simplified format string was inspired by Python style printing.
In Python, you can do the following:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>python shell <span class="op">&gt;&gt;&gt;</span> <span class="st">&quot;some </span><span class="sc">{}</span><span class="st"> with some var </span><span class="sc">{}</span><span class="st">&quot;</span>.<span class="bu">format</span>(<span class="st">&quot;string&quot;</span>, <span class="dv">123</span>)</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;some string with some var 123&#39;</span></span></code></pre></div>
<p>Being inspired from that, I hoped to be able to come up with something like…</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>printf<span class="op">(</span>metaprog_result<span class="op">(</span><span class="st">&quot;some </span><span class="sc">{}</span><span class="st"> with some var </span><span class="sc">{}</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>                       typelist<span class="op">&lt;</span><span class="at">const</span> <span class="dt">char</span> <span class="op">*,</span> <span class="dt">int</span><span class="op">&gt;),</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>       <span class="st">&quot;string&quot;</span><span class="op">,</span> <span class="dv">123</span><span class="op">);</span></span></code></pre></div>
<p>…which collapses to the following during compile time:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>printf<span class="op">(</span><span class="st">&quot;some </span><span class="sc">%s</span><span class="st"> with some var </span><span class="sc">%d</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;string&quot;</span><span class="op">,</span> <span class="dv">123</span><span class="op">);</span></span></code></pre></div>
<p>With this design, it is also possible to use the meta-program as a frontend for not only <code>printf</code>, but also <code>sprintf</code>, <code>fprintf</code>, etc.</p>
<h3 id="first-step-defining-an-autoformat-macro">First Step: Defining an <code>autoformat</code> Macro</h3>
<p>The first problem is, that the parameters <code>"string", 123</code> need to be both present in the <code>printf</code> function call as parameters, and at the same time, a type list <code>&lt;const char*, int&gt;</code> needs to be extracted out of them.
The only way I was able to come up with was a preprocessor macro:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define AUTOFORMAT</span><span class="op">(</span>fmtstr<span class="op">,</span><span class="pp"> </span><span class="op">...)</span><span class="pp"> </span><span class="op">\</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="pp">    </span><span class="op">({</span><span class="pp"> </span><span class="op">\</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="pp">        </span><span class="kw">using</span><span class="pp"> </span>paramtypes<span class="pp"> </span><span class="op">=</span><span class="pp"> </span>create_typelist_from_params<span class="op">(</span><span class="ot">__VA_ARGS__</span><span class="op">));</span><span class="pp"> </span><span class="op">\</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a><span class="pp">        </span>return_preprocessed_format_str<span class="op">(</span>fmtstr<span class="op">,</span><span class="pp"> </span>paramtypes<span class="op">);</span><span class="pp"> </span><span class="op">\</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a><span class="pp">    </span><span class="op">})</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a><span class="pp">#define pprintf</span><span class="op">(</span>fmtstr<span class="op">,</span><span class="pp"> </span><span class="op">...)</span><span class="pp"> </span><span class="op">\</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a><span class="pp">    </span>printf<span class="op">(</span>AUTOFORMAT<span class="op">(</span>fmtstr<span class="op">,</span><span class="pp"> </span><span class="ot">__VA_ARGS__</span><span class="op">),</span><span class="pp"> </span>__VA_ARGS<span class="op">)</span></span></code></pre></div>
<p>This way it is possible to extract a type list with all the parameter types, feed it into a metaprogram which preprocesses and transforms the simplified format string, and then puts a <code>printf</code> compatible result into <code>printf</code>.
And that would then happen without adding any portion of additional runtime code.</p>
<p>Unfortunately, in C++ (even including C++17) there is currently no other way to do this without C preprocessor macros.</p>
<h3 id="second-step-obtaining-the-type-list">Second Step: Obtaining the Type List</h3>
<p>What we have: <code>"some string", 123</code>.
What we want: <code>const char*, int</code>.</p>
<p>In the <code>AUTOFORMAT</code> macro, the parameters, separated by commas, are available via <code>__VA_ARGS__</code>.
These can be put into a template function call, which deduces the types:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">typename</span> <span class="op">...</span> Ts<span class="op">&gt;</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="dt">make_t</span><span class="op">&lt;</span>Ts<span class="op">...&gt;</span> tie_types<span class="op">(</span>Ts<span class="op">...);</span></span></code></pre></div>
<p>This function does not even need to be defined because it is only used in a <code>decltype</code> environment.
No runtime code will lever call it.
Within the <code>pprintf</code> macro, it can now be used the following way:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> paramtypes <span class="op">=</span> <span class="kw">decltype</span><span class="op">(</span>tie_types<span class="op">(</span>__VA_ARGS__<span class="op">));</span></span></code></pre></div>
<p><code>paramtypes</code> is now a type list.
<code>make_t&lt;const char*, int&gt;</code> evaluates to <code>tl&lt;const char*, tl&lt;int, null_t&gt;&gt;</code> (Read more about how this in particular works in the <a href="/2016/05/08/compile_time_type_lists">type list article</a>).</p>
<h3 id="third-step-transforming-the-simplified-format-string">Third Step: Transforming the Simplified Format String</h3>
<p>Having the simplified format string with <code>{}</code> braces, and the list of types the user provided as <code>printf</code> arguments, this can be fed to some algorithm which constructs a <code>printf</code> compatible format string.</p>
<p>The following statement will run the metaprogram function <code>autoformat_t</code>, which results in a struct with a static member function <code>str()</code>, which returns the <code>printf</code> compatible result string:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="dt">autoformat_t</span><span class="op">&lt;</span>strprov<span class="op">,</span> paramtypes<span class="op">&gt;::</span>str<span class="op">();</span></span></code></pre></div>
<p>What <code>autoformat_t</code> does, is basically:</p>
<ol type="1">
<li>Iterate through the simplified format string.</li>
<li>For every opening <code>{</code> brace, find the closing <code>}</code> brace.</li>
<li>For every pair of braces, take the right argument type from the type list.</li>
<li>Map from <code>type</code> to <code>%foo</code> format string (There is a lookup table of those), and substitute the braces by the format string piece.</li>
</ol>
<p>The brace match search algorithm looks really similar to the <a href="/2016/06/16/cpp_template_compile_time_brainfuck_interpreter">function of the compile-time brainfuck interpreter, which searches for matching <code>[]</code> pairs</a>.</p>
<h3 id="detail-features">Detail Features</h3>
<p>Just looking for <code>{}</code> braces and substituting them by format string pieces is not enough.
There are different cases and use cases which must be handled:</p>
<h4 id="printing-strings">Printing Strings</h4>
<p>When a programmer writes <code>pprintf("Buffer address: {}\n", some_char_buffer);</code>, it is <strong>not</strong> wise to substitute the <code>{}</code> with <code>%s</code>.
As the example already suggests, the parameter is of type <code>char*</code>, but it is not a null terminated string.</p>
<p>Different implementation strategies can be applied:</p>
<ol type="1">
<li>Let the user cast the parameter to <code>void*</code>, then <code>autoformat_t</code> will substitute the braces with <code>%p</code> to print the address of the buffer.</li>
<li>Let the user additionally type <code>{s}</code> between the braces, so <code>autoformat_t</code> knows that the user <strong>really</strong> wants to print it as a string.</li>
</ol>
<p>I chose method <em>2</em>.
Printing a string now looks like this:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a>pprintf<span class="op">(</span><span class="st">&quot;Some string: {s}&quot;</span><span class="op">,</span> <span class="st">&quot;Hello World&quot;</span><span class="op">);</span></span></code></pre></div>
<h4 id="formatting-integers-as-hex-numbers">Formatting Integers as Hex Numbers</h4>
<p>When a programmer writes <code>pprintf("Some hex number: {}", 0x123);</code>, there must be some possibility to express “I want this integer printed as hex number instead of a decimal number”.</p>
<p>I chose to let the user provide this information between the braces by writing <code>{x}</code>.
This way any integer of any size will be printed correctly as <code>%x</code>, or <code>%lx</code>, or <code>%llx</code>.</p>
<p><strong>Example</strong>: <code>pprintf("{x}", 0x123);</code> results in <code>printf("%x", 0x123);</code></p>
<h4 id="adding-additional-format-info">Adding Additional Format Info</h4>
<p>What if the user wants to print a <code>double</code> variable, but also needs to specify the precision?</p>
<p>In that case, <code>autoformat_t</code> will just take anything which is not an <code>x</code> or <code>s</code> (as used as a special specifier for string or hex number formatting) and put it between the <code>%</code> and the <code>f</code> or <code>lf</code> for doubles.
This works for any type.</p>
<p>This strategy is applied to all types.
This way it is possible to tamper with the indentation, precision, etc. whatever <code>printf</code> supports for which type.</p>
<p><strong>Example</strong>: <code>pprintf("{0.3}", 1.23);</code> results in <code>printf("%0.3lf", 1.23);</code></p>
<h4 id="printing-actual-braces">Printing Actual <code>{}</code> Braces</h4>
<p>If the user wants to print actual <code>{}</code> braces, it must be possible to mask them somehow.</p>
<p>If <code>autoformat_t</code> runs over an opening brace but finds it masked with <code>\</code>, it will ignore it.
The closing brace is ignored already because the closing brace search function is not called.</p>
<p>However, there are actually 2 backslashes needed because <code>\</code> alone does not result in an actual “" string part.
The backslash must be masked itself, so only <code>\\{</code> will result in the <code>autoformat_t</code> function seeing a <code>\{</code>.</p>
<p><strong>Example</strong>: <code>pprintf("var in braces: \\{ {} }", 123);</code> results in <code>printf("var in braces: { %d }", 123);</code>
#### Catching Brace Mismatches</p>
<p>The meta-program refuses to compile if…</p>
<ul>
<li>it does not find a closing brace for an opening one.</li>
<li>it finds nested braces <code>{ {} }</code>, in which case it looks probable that the user wanted to mask the outer pair.</li>
<li>it finds more <code>{}</code> placeholders than parameters provided by the user.</li>
<li>it finds less <code>{}</code> placeholders than parameters provided by the user.</li>
</ul>
<h3 id="the-type-to-format-string-lookup-table">The Type-to-Format-String Lookup Table</h3>
<p>All types are cleaned from any <code>const</code> etc. noise, and then fed into the <code>type2fmt</code> function:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">typename</span> T<span class="op">&gt;</span> <span class="kw">struct</span> type2fmt<span class="op">;</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="co">// Integral types</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;&gt;</span> <span class="kw">struct</span> type2fmt<span class="op">&lt;</span><span class="dt">char</span><span class="op">&gt;</span>                <span class="op">{</span> <span class="kw">using</span> type <span class="op">=</span> <span class="dt">char_tl_t</span><span class="op">&lt;</span><span class="ch">&#39;c&#39;</span><span class="op">&gt;;</span> <span class="op">};</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;&gt;</span> <span class="kw">struct</span> type2fmt<span class="op">&lt;</span><span class="dt">short</span><span class="op">&gt;</span>               <span class="op">{</span> <span class="kw">using</span> type <span class="op">=</span> <span class="dt">char_tl_t</span><span class="op">&lt;</span><span class="ch">&#39;d&#39;</span><span class="op">&gt;;</span> <span class="op">};</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;&gt;</span> <span class="kw">struct</span> type2fmt<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span>                 <span class="op">{</span> <span class="kw">using</span> type <span class="op">=</span> <span class="dt">char_tl_t</span><span class="op">&lt;</span><span class="ch">&#39;d&#39;</span><span class="op">&gt;;</span> <span class="op">};</span></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;&gt;</span> <span class="kw">struct</span> type2fmt<span class="op">&lt;</span><span class="dt">long</span> <span class="dt">int</span><span class="op">&gt;</span>            <span class="op">{</span> <span class="kw">using</span> type <span class="op">=</span> <span class="dt">char_tl_t</span><span class="op">&lt;</span><span class="ch">&#39;l&#39;</span><span class="op">,</span> <span class="ch">&#39;d&#39;</span><span class="op">&gt;;</span> <span class="op">};</span></span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;&gt;</span> <span class="kw">struct</span> type2fmt<span class="op">&lt;</span><span class="dt">long</span> <span class="dt">long</span> <span class="dt">int</span><span class="op">&gt;</span>       <span class="op">{</span> <span class="kw">using</span> type <span class="op">=</span> <span class="dt">char_tl_t</span><span class="op">&lt;</span><span class="ch">&#39;l&#39;</span><span class="op">,</span> <span class="ch">&#39;l&#39;</span><span class="op">,</span> <span class="ch">&#39;d&#39;</span><span class="op">&gt;;</span> <span class="op">};</span></span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;&gt;</span> <span class="kw">struct</span> type2fmt<span class="op">&lt;</span><span class="dt">unsigned</span> <span class="dt">char</span><span class="op">&gt;</span>       <span class="op">{</span> <span class="kw">using</span> type <span class="op">=</span> <span class="dt">char_tl_t</span><span class="op">&lt;</span><span class="ch">&#39;u&#39;</span><span class="op">&gt;;</span> <span class="op">};</span></span>
<span id="cb21-10"><a href="#cb21-10" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;&gt;</span> <span class="kw">struct</span> type2fmt<span class="op">&lt;</span><span class="dt">unsigned</span> <span class="dt">short</span><span class="op">&gt;</span>      <span class="op">{</span> <span class="kw">using</span> type <span class="op">=</span> <span class="dt">char_tl_t</span><span class="op">&lt;</span><span class="ch">&#39;u&#39;</span><span class="op">&gt;;</span> <span class="op">};</span></span>
<span id="cb21-11"><a href="#cb21-11" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;&gt;</span> <span class="kw">struct</span> type2fmt<span class="op">&lt;</span><span class="dt">unsigned</span><span class="op">&gt;</span>            <span class="op">{</span> <span class="kw">using</span> type <span class="op">=</span> <span class="dt">char_tl_t</span><span class="op">&lt;</span><span class="ch">&#39;u&#39;</span><span class="op">&gt;;</span> <span class="op">};</span></span>
<span id="cb21-12"><a href="#cb21-12" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;&gt;</span> <span class="kw">struct</span> type2fmt<span class="op">&lt;</span><span class="dt">unsigned</span> <span class="dt">long</span><span class="op">&gt;</span>       <span class="op">{</span> <span class="kw">using</span> type <span class="op">=</span> <span class="dt">char_tl_t</span><span class="op">&lt;</span><span class="ch">&#39;l&#39;</span><span class="op">,</span> <span class="ch">&#39;u&#39;</span><span class="op">&gt;;</span> <span class="op">};</span></span>
<span id="cb21-13"><a href="#cb21-13" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;&gt;</span> <span class="kw">struct</span> type2fmt<span class="op">&lt;</span><span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span><span class="op">&gt;</span>  <span class="op">{</span> <span class="kw">using</span> type <span class="op">=</span> <span class="dt">char_tl_t</span><span class="op">&lt;</span><span class="ch">&#39;l&#39;</span><span class="op">,</span> <span class="ch">&#39;l&#39;</span><span class="op">,</span> <span class="ch">&#39;u&#39;</span><span class="op">&gt;;</span> <span class="op">};</span></span>
<span id="cb21-14"><a href="#cb21-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-15"><a href="#cb21-15" aria-hidden="true" tabindex="-1"></a><span class="co">// Floating point</span></span>
<span id="cb21-16"><a href="#cb21-16" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;&gt;</span> <span class="kw">struct</span> type2fmt<span class="op">&lt;</span><span class="dt">float</span><span class="op">&gt;</span>  <span class="op">{</span> <span class="kw">using</span> type <span class="op">=</span> <span class="dt">char_tl_t</span><span class="op">&lt;</span><span class="ch">&#39;f&#39;</span><span class="op">&gt;;</span> <span class="op">};</span></span>
<span id="cb21-17"><a href="#cb21-17" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;&gt;</span> <span class="kw">struct</span> type2fmt<span class="op">&lt;</span><span class="dt">double</span><span class="op">&gt;</span> <span class="op">{</span> <span class="kw">using</span> type <span class="op">=</span> <span class="dt">char_tl_t</span><span class="op">&lt;</span><span class="ch">&#39;l&#39;</span><span class="op">,</span> <span class="ch">&#39;f&#39;</span><span class="op">&gt;;</span> <span class="op">};</span></span>
<span id="cb21-18"><a href="#cb21-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-19"><a href="#cb21-19" aria-hidden="true" tabindex="-1"></a><span class="co">// Pointers</span></span>
<span id="cb21-20"><a href="#cb21-20" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;&gt;</span> <span class="kw">struct</span> type2fmt<span class="op">&lt;</span><span class="bu">std::</span>nullptr_t<span class="op">&gt;</span> <span class="op">{</span> <span class="kw">using</span> type <span class="op">=</span> <span class="dt">char_tl_t</span><span class="op">&lt;</span><span class="ch">&#39;p&#39;</span><span class="op">&gt;;</span> <span class="op">};</span></span>
<span id="cb21-21"><a href="#cb21-21" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">typename</span> T<span class="op">&gt;</span> <span class="kw">struct</span> type2fmt<span class="op">&lt;</span>T<span class="op">*&gt;</span>   <span class="op">{</span> <span class="kw">using</span> type <span class="op">=</span> <span class="dt">char_tl_t</span><span class="op">&lt;</span><span class="ch">&#39;p&#39;</span><span class="op">&gt;;</span> <span class="op">};</span></span></code></pre></div>
<p><code>type2fmt</code> will then return a character type list, which can be used to compose the right format string for <code>printf</code>.</p>
<p>Note that the 32bit/64bit safety comes from here.
For 64bit systems, <code>uint64_t</code> is an <code>unsigned long</code>, while it is an <code>unsigned long long</code> on 32bit systems.
When the user writes <code>pprintf("Some 64bit unsigned: {}", uint64_t(123));</code>, the compiler will go through all the typedef aliases, and boil the type down to <code>unsigned long</code>, or <code>unsigned long long</code>, depending on what platform the code is compiled for.
Because of this, <code>type2fmt</code> will automatically translate the <code>uint64_t</code> to the right format string: <code>%lu</code> or <code>%llu</code>.
No <code>PRIu64</code> necessary.</p>
<h2 id="no-runtime-overhead">No Runtime Overhead</h2>
<p>What’s with the “no runtime overhead” and “no additional runtime code” promise?</p>
<p>Compiling the program…</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;pprintpp.hpp&gt;</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a>    pprintf<span class="op">(</span><span class="st">&quot;</span><span class="sc">{}</span><span class="st"> hello {s}! </span><span class="sc">{}\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="st">&quot;world&quot;</span><span class="op">,</span> <span class="dv">2</span><span class="op">);</span></span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>…leads to the following <code>main</code> function in the binary:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="fu">bash</span> $ objdump <span class="at">-d</span> example</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a><span class="ex">...</span></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a><span class="ex">0000000000400450</span> <span class="op">&lt;</span>main<span class="op">&gt;</span>:</span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a>  <span class="ex">400450:</span>       48 83 ec 08             sub    <span class="va">$0</span>x8,%rsp</span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a>  <span class="ex">400454:</span>       41 b8 02 00 00 00       mov    <span class="va">$0</span>x2,%r8d</span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a>  <span class="ex">40045a:</span>       b9 04 06 40 00          mov    <span class="va">$0</span>x400604,%ecx <span class="co"># &lt;-- &quot;world&quot;</span></span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a>  <span class="ex">40045f:</span>       ba 01 00 00 00          mov    <span class="va">$0</span>x1,%edx</span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a>  <span class="ex">400464:</span>       be 10 06 40 00          mov    <span class="va">$0</span>x400610,%esi <span class="co"># &lt;-- &quot;%d hello world %s!...&quot;</span></span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true" tabindex="-1"></a>  <span class="ex">400469:</span>       bf 01 00 00 00          mov    <span class="va">$0</span>x1,%edi</span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true" tabindex="-1"></a>  <span class="ex">40046e:</span>       31 c0                   xor    %eax,%eax</span>
<span id="cb23-11"><a href="#cb23-11" aria-hidden="true" tabindex="-1"></a>  <span class="ex">400470:</span>       e8 bb ff ff ff          callq  400430 <span class="op">&lt;</span>__printf_chk@plt<span class="op">&gt;</span></span>
<span id="cb23-12"><a href="#cb23-12" aria-hidden="true" tabindex="-1"></a>  <span class="ex">400475:</span>       31 c0                   xor    %eax,%eax</span>
<span id="cb23-13"><a href="#cb23-13" aria-hidden="true" tabindex="-1"></a>  <span class="ex">400477:</span>       48 83 c4 08             add    <span class="va">$0</span>x8,%rsp</span>
<span id="cb23-14"><a href="#cb23-14" aria-hidden="true" tabindex="-1"></a>  <span class="ex">40047b:</span>       c3                      retq</span>
<span id="cb23-15"><a href="#cb23-15" aria-hidden="true" tabindex="-1"></a><span class="ex">...</span></span></code></pre></div>
<p>Excerpt of the data section where the strings which are loaded reside:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="fu">bash</span> $ objdump <span class="at">-s</span> <span class="at">-j</span> .rodata example</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="ex">...</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a><span class="ex">Contents</span> of section .rodata:</span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a> <span class="ex">400600</span> 01000200 776f726c 64000000 00000000  ....world.......</span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a> <span class="ex">400610</span> 25642068 656c6c6f 20257321 2025640a  %d hello %s! %d.</span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a> <span class="ex">400620</span> 00                                   .</span></code></pre></div>
<p>The string looks exactly as if one had written <code>printf("%d hello %s! %d\n", /* ... */);</code>.</p>
<p>Having exactly that string embedded in the binary does <strong>not</strong> rely on optimization.
It <em>may</em> happen, that the <code>str()</code> function which statically returns this string, is still called in an unoptimized binary.
But this function does <em>nothing</em> else than returning this string, which is already composed in the binary.</p>
<h2 id="limitations">Limitations</h2>
<p>The <code>autoformat_t</code> meta-program does only substitute generic placeholders with the right <code>%</code> format strings, which are compatible with <code>printf</code>.</p>
<p>It does <strong>not</strong> extend <code>printf</code> with more formatting capabilities.
This way it is also not possible to print custom types because it is not possible to put some custom <code>%</code> format string into <code>printf</code>, which the original <code>printf</code> implementation does not know.</p>
<p>Of course, it is possible to extend the type knowledge of the <code>type2fmt</code> meta function, in order to feed custom implementations of <code>printf</code> like functions with additional type format strings.</p>
<p>There are libraries like <a href="https://github.com/fmtlib/fmt">libfmt</a> out there, which provide rich formatting capabilities.
However, all such libraries add additional runtime overhead to the resulting program.</p>
<h2 id="compilation-performance">Compilation Performance</h2>
<p>Heavy template meta-programs tend to be slow.
I invested a lot of time in measuring different type list implementations, in order to make this <code>printf</code> frontend <em>fast</em>.</p>
<p>In another blog article, I <a href="/2016/06/25/cpp_template_type_list_performance">measured the performance of type lists</a> using variadic template parameters, and recursive type lists.
This library builds on the faster list implementation.</p>
<p>The resulting compile time overhead is <em>rarely</em> in measurable timing regions, which makes it useful for real life projects.</p>
<h2 id="summary">Summary</h2>
<p>I wrapped the code into a repository called <code>pprintpp</code> and published it on GitHub under the MIT license.
(<a href="https://github.com/tfc/pprintpp">Link to the repository</a>)</p>
<p>This library is in production use for some time now and helped get rid of a lot of typos and variable-type accidents while being very comfortable at the same time.</p>
<p>I’d be happy to hear that it is useful to others outside of my projects, too!</p>]]></description>
    <pubDate>Sat, 05 Nov 2016 00:00:00 UT</pubDate>
    <guid>https://blog.galowicz.de/2016/11/05/python_style_printf_for_cpp</guid>
    <dc:creator>Jacek Galowicz</dc:creator>
</item>

    </channel>
</rss>
